

// Transpose.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com)
//

import all caltrop.lib.BitOps;

actor Transpose ( int sz )
   int(size=sz) X0, int(size=sz) X1, int(size=sz) X2, int(size=sz) X3 ==> int(size=sz) Y0, int(size=sz) Y1 :

  List ( type:List( type:List( type:int(size=sz), size=8), size=8), size=2) mem := 
     [  [  [0 : for k in Integers(1, 8)]  : for j in Integers(1, 8)]   : for i in Integers(1, 2) ];

  int rcount := 0;
  int ccount := 0;
  int select := 0;

  action X0:[a], X1:[b], X2:[c], X3:[d] ==>
  guard rcount < 64
  var
    int row = rshift( rcount, 3 ),
    int quad = bitand( rshift( rcount, 2), 1)
  do
    // { 0, 7, 3, 4 }
    // { 1, 6, 2, 5 }
    if  quad = 0 then
      mem[select,row,0] := a;
      mem[select,row,7] := b;
      mem[select,row,3] := c;
      mem[select,row,4] := d;
    else
      mem[select,row,1] := a;
      mem[select,row,6] := b;
      mem[select,row,2] := c;
      mem[select,row,5] := d;
    end
    rcount := rcount + 4;
  end

  action ==> Y0:[ mem[i,a,col] ], Y1:[ mem[i,b,col] ]
  guard ccount > 0
  var
    int a,
    int b,
    int col = rshift( 64-ccount, 3 ),
    int pair = bitand( rshift( 64-ccount, 1) , 3 ),
    int i = bitxor(select,1)
  do
    // idct col input order is
    // { 0, 4 } {2, 6} {1, 7} {5, 3}
    a := if pair = 0 then 0
         else
           if pair = 1 then 2
           else
             if pair = 2 then 1 else 5 end
           end
         end;
    b := if pair = 0 then 4
         else
           if pair = 1 then 6
           else
             if pair = 2 then 7 else 3 end
           end
         end;
    ccount := ccount - 2;
  end

  action ==>
  guard
    (ccount = 0) and (rcount = 64)
  do
    select := bitxor( select, 1 );
    ccount := 64;
    rcount := 0;
  end

 end