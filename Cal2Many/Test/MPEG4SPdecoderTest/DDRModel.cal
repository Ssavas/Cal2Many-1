
// DDRModel.cal
//
// Author: David B. Parlour (dave.parlour@xilinx.com), Ian Miller (ian.miller@xilinx.com)
//

import all caltrop.lib.BitOps;
import java.lang.Math;

actor DDRModel( MAXW_IN_MB, MAXH_IN_MB ) int(size=32)RA, int(size=32)WA, int(size=32)WD ==> int(size=32)RD :

  //bool _CAL_tokenMonitor := true;
  
  // find the number of bits needed to represent some positive integer
  
   function log2_ceil( n ) :
     Math.round( Math.ceil( Math.log( n * 1.0 ) / Math.log( 2.0 ) ) )
   end
  

  // Frame buffer organization:
  // Address    <-- FRAMEBITS --><-- YBITS --><-- XBITS --><-- COMPBITS --><-- BLOCKBITS -->
  // Data are stored as 32 bit words representing 4 horizontally consecutive pixels.
  // This allows an entire macroblock to be streamed to/from DRAM in one burst.

  COMPONENTS      = 6;              // Y0, Y1, Y2, Y2, U, V
  BLOCKSIZE       = 64;
  PIXELS_PER_WORD = 4;
  FRAMEBITS       = log2_ceil( 2 );                 // Current, prev. frame
  //FRAMEBITS       = 1;
  COMPBITS        = log2_ceil( COMPONENTS );        
  //COMPBITS        = 3;
  YBITS           = log2_ceil( MAXH_IN_MB );
  //YBITS           = 5;
  XBITS           = log2_ceil( MAXW_IN_MB );
  //XBITS           = 6;
  BLOCKBITS       = log2_ceil( BLOCKSIZE / PIXELS_PER_WORD ) ;
  //BLOCKBITS       = 4;
  MEMBITS         = ((FRAMEBITS + YBITS) + (XBITS + COMPBITS)) + BLOCKBITS;
  MEMSIZE         = lshift( 1, MEMBITS );
  // MEMSIZE         = 524268;
  BURSTSIZE       = (COMPONENTS * BLOCKSIZE) / PIXELS_PER_WORD;
  // BURSTSIZE       = 96;

  List( type:int(size=32), size=4194304 ) buf := [ 0 : for i in Integers(1, MEMSIZE) ];

  

  int address := 0;
  int burstSize := 0;
  bool preferRead := true;
  
  select.read.prefer: action RA:[a] ==>
    guard preferRead
    do
      address := a;
      burstSize := BURSTSIZE;
      preferRead := false;
  end

  select.write.prefer: action WA:[a] ==>
    guard not preferRead
    do
      address := a;
      burstSize := BURSTSIZE;
      preferRead := true;
  end

  select.read.low: action RA:[a] ==>
    guard not preferRead
    do
      address := a;
      burstSize := BURSTSIZE;
      preferRead := false;
  end

  select.write.low: action WA:[a] ==>
    guard preferRead
    do
      address := a;
      burstSize := BURSTSIZE;
      preferRead := true;
  end

  data.read: action ==> RD:[ dat ]
    guard
      burstSize > 0
    var
      int dat
    do
     //  println("-------------------------------------------------------------------------------- " + MEMSIZE);
    
      dat := buf[address];
      address := address + 1;
      burstSize := burstSize - 1;
  end

  data.write: action WD:[ dat ] ==>
    guard
      burstSize > 0
    var
      int wa := address
    do
      burstSize := burstSize - 1;
      address := address + 1;
      buf[wa] := dat;
  end
  
  data.done: action ==>
    guard burstSize = 0
  end

  priority
    select.read.prefer > select.read.low;
    select.read.prefer > select.write.low;

    select.write.prefer > select.read.low;
    select.write.prefer > select.write.low;

    data.read > data.done;
    data.write > data.done;
  end
      
  schedule fsm getAddr :

    getAddr ( select.read ) --> doDataRead;
    getAddr ( select.write ) --> doDataWrite;

    doDataRead ( data.read ) --> doDataRead;
    doDataRead ( data.done ) --> getAddr;
    
    doDataWrite ( data.write ) --> doDataWrite;
    doDataWrite ( data.done ) --> getAddr;
    
  end

  
end
