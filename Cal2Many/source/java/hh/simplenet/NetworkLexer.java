package hh.simplenet;
/* The following code was generated by JFlex 1.4.3 on 2012-09-27 15:17 */

/* 

The options and code are here in order to interface with a jacc
generated parser. For the moment you will have to define your java
interface <NetworkTokens>. Later, this will be generated by jacc when
you announce what the terminals of the grammar are. It gives names to
the integers used for tokens.

We rename the class generated by jflex(Yylex) to minijavaLexer for
uniformity of names with the files generated by jacc

I have also introduced some definitions (new lines, newlines and
spaces) so that you see how this is done.  You are welcome to
introduce more definitions, for instance for identifiers, integer
constants and comments.  

*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2012-09-27 15:17 from the specification file
 * <tt>C:/Users/essgeb/AMtoC/lexerParser/src/NL.flex</tt>
 */
public class NetworkLexer implements NetworkTokens {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\20\1\3\1\2\1\0\1\3\1\1\16\20\4\0\1\3\1\56"+
    "\1\14\1\0\1\17\1\0\1\55\1\0\1\34\1\35\1\5\1\33"+
    "\1\60\1\31\1\16\1\4\1\21\11\22\1\32\1\57\1\62\1\27"+
    "\1\30\2\0\22\17\1\52\7\17\1\43\1\15\1\44\1\0\1\17"+
    "\1\0\1\40\1\54\1\50\1\51\1\24\1\37\1\53\1\61\1\6"+
    "\1\17\1\26\1\41\1\7\1\23\1\11\1\10\1\17\1\12\1\42"+
    "\1\13\1\36\1\47\1\25\3\17\1\45\1\0\1\46\1\0\41\20"+
    "\2\0\4\17\4\0\1\17\2\0\1\20\7\0\1\17\4\0\1\17"+
    "\5\0\27\17\1\0\37\17\1\0\u01ca\17\4\0\14\17\16\0\5\17"+
    "\7\0\1\17\1\0\1\17\21\0\160\20\5\17\1\0\2\17\2\0"+
    "\4\17\10\0\1\17\1\0\3\17\1\0\1\17\1\0\24\17\1\0"+
    "\123\17\1\0\213\17\1\0\5\20\2\0\236\17\11\0\46\17\2\0"+
    "\1\17\7\0\47\17\11\0\55\20\1\0\1\20\1\0\2\20\1\0"+
    "\2\20\1\0\1\20\10\0\33\17\5\0\3\17\15\0\4\20\7\0"+
    "\1\17\4\0\13\20\5\0\53\17\37\20\4\0\2\17\1\20\143\17"+
    "\1\0\1\17\10\20\1\0\6\20\2\17\2\20\1\0\4\20\2\17"+
    "\12\20\3\17\2\0\1\17\17\0\1\20\1\17\1\20\36\17\33\20"+
    "\2\0\131\17\13\20\1\17\16\0\12\20\41\17\11\20\2\17\4\0"+
    "\1\17\5\0\26\17\4\20\1\17\11\20\1\17\3\20\1\17\5\20"+
    "\22\0\31\17\3\20\244\0\4\20\66\17\3\20\1\17\22\20\1\17"+
    "\7\20\12\17\2\20\2\0\12\20\1\0\7\17\1\0\7\17\1\0"+
    "\3\20\1\0\10\17\2\0\2\17\2\0\26\17\1\0\7\17\1\0"+
    "\1\17\3\0\4\17\2\0\1\20\1\17\7\20\2\0\2\20\2\0"+
    "\3\20\1\17\10\0\1\20\4\0\2\17\1\0\3\17\2\20\2\0"+
    "\12\20\4\17\7\0\1\17\5\0\3\20\1\0\6\17\4\0\2\17"+
    "\2\0\26\17\1\0\7\17\1\0\2\17\1\0\2\17\1\0\2\17"+
    "\2\0\1\20\1\0\5\20\4\0\2\20\2\0\3\20\3\0\1\20"+
    "\7\0\4\17\1\0\1\17\7\0\14\20\3\17\1\20\13\0\3\20"+
    "\1\0\11\17\1\0\3\17\1\0\26\17\1\0\7\17\1\0\2\17"+
    "\1\0\5\17\2\0\1\20\1\17\10\20\1\0\3\20\1\0\3\20"+
    "\2\0\1\17\17\0\2\17\2\20\2\0\12\20\1\0\1\17\17\0"+
    "\3\20\1\0\10\17\2\0\2\17\2\0\26\17\1\0\7\17\1\0"+
    "\2\17\1\0\5\17\2\0\1\20\1\17\7\20\2\0\2\20\2\0"+
    "\3\20\10\0\2\20\4\0\2\17\1\0\3\17\2\20\2\0\12\20"+
    "\1\0\1\17\20\0\1\20\1\17\1\0\6\17\3\0\3\17\1\0"+
    "\4\17\3\0\2\17\1\0\1\17\1\0\2\17\3\0\2\17\3\0"+
    "\3\17\3\0\14\17\4\0\5\20\3\0\3\20\1\0\4\20\2\0"+
    "\1\17\6\0\1\20\16\0\12\20\11\0\1\17\7\0\3\20\1\0"+
    "\10\17\1\0\3\17\1\0\27\17\1\0\12\17\1\0\5\17\3\0"+
    "\1\17\7\20\1\0\3\20\1\0\4\20\7\0\2\20\1\0\2\17"+
    "\6\0\2\17\2\20\2\0\12\20\22\0\2\20\1\0\10\17\1\0"+
    "\3\17\1\0\27\17\1\0\12\17\1\0\5\17\2\0\1\20\1\17"+
    "\7\20\1\0\3\20\1\0\4\20\7\0\2\20\7\0\1\17\1\0"+
    "\2\17\2\20\2\0\12\20\1\0\2\17\17\0\2\20\1\0\10\17"+
    "\1\0\3\17\1\0\51\17\2\0\1\17\7\20\1\0\3\20\1\0"+
    "\4\20\1\17\10\0\1\20\10\0\2\17\2\20\2\0\12\20\12\0"+
    "\6\17\2\0\2\20\1\0\22\17\3\0\30\17\1\0\11\17\1\0"+
    "\1\17\2\0\7\17\3\0\1\20\4\0\6\20\1\0\1\20\1\0"+
    "\10\20\22\0\2\20\15\0\60\17\1\20\2\17\7\20\4\0\10\17"+
    "\10\20\1\0\12\20\47\0\2\17\1\0\1\17\2\0\2\17\1\0"+
    "\1\17\2\0\1\17\6\0\4\17\1\0\7\17\1\0\3\17\1\0"+
    "\1\17\1\0\1\17\2\0\2\17\1\0\4\17\1\20\2\17\6\20"+
    "\1\0\2\20\1\17\2\0\5\17\1\0\1\17\1\0\6\20\2\0"+
    "\12\20\2\0\2\17\42\0\1\17\27\0\2\20\6\0\12\20\13\0"+
    "\1\20\1\0\1\20\1\0\1\20\4\0\2\20\10\17\1\0\44\17"+
    "\4\0\24\20\1\0\2\20\5\17\13\20\1\0\44\20\11\0\1\20"+
    "\71\0\53\17\24\20\1\17\12\20\6\0\6\17\4\20\4\17\3\20"+
    "\1\17\3\20\2\17\7\20\3\17\4\20\15\17\14\20\1\17\17\20"+
    "\2\0\46\17\12\0\53\17\1\0\1\17\3\0\u0149\17\1\0\4\17"+
    "\2\0\7\17\1\0\1\17\1\0\4\17\2\0\51\17\1\0\4\17"+
    "\2\0\41\17\1\0\4\17\2\0\7\17\1\0\1\17\1\0\4\17"+
    "\2\0\17\17\1\0\71\17\1\0\4\17\2\0\103\17\2\0\3\20"+
    "\40\0\20\17\20\0\125\17\14\0\u026c\17\2\0\21\17\1\0\32\17"+
    "\5\0\113\17\3\0\3\17\17\0\15\17\1\0\4\17\3\20\13\0"+
    "\22\17\3\20\13\0\22\17\2\20\14\0\15\17\1\0\3\17\1\0"+
    "\2\20\14\0\64\17\40\20\3\0\1\17\3\0\2\17\1\20\2\0"+
    "\12\20\41\0\3\20\2\0\12\20\6\0\130\17\10\0\51\17\1\20"+
    "\1\17\5\0\106\17\12\0\35\17\3\0\14\20\4\0\14\20\12\0"+
    "\12\20\36\17\2\0\5\17\13\0\54\17\4\0\21\20\7\17\2\20"+
    "\6\0\12\20\46\0\27\17\5\20\4\0\65\17\12\20\1\0\35\20"+
    "\2\0\13\20\6\0\12\20\15\0\1\17\130\0\5\20\57\17\21\20"+
    "\7\17\4\0\12\20\21\0\11\20\14\0\3\20\36\17\12\20\3\0"+
    "\2\17\12\20\6\0\46\17\16\20\14\0\44\17\24\20\10\0\12\20"+
    "\3\0\3\17\12\20\44\17\122\0\3\20\1\0\25\20\4\17\1\20"+
    "\4\17\1\20\15\0\300\17\47\20\25\0\4\20\u0116\17\2\0\6\17"+
    "\2\0\46\17\2\0\6\17\2\0\10\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\37\17\2\0\65\17\1\0\7\17\1\0\1\17"+
    "\3\0\3\17\1\0\7\17\3\0\4\17\2\0\6\17\4\0\15\17"+
    "\5\0\3\17\1\0\7\17\16\0\5\20\32\0\5\20\20\0\2\17"+
    "\23\0\1\17\13\0\5\20\5\0\6\20\1\0\1\17\15\0\1\17"+
    "\20\0\15\17\3\0\32\17\26\0\15\20\4\0\1\20\3\0\14\20"+
    "\21\0\1\17\4\0\1\17\2\0\12\17\1\0\1\17\3\0\5\17"+
    "\6\0\1\17\1\0\1\17\1\0\1\17\1\0\4\17\1\0\13\17"+
    "\2\0\4\17\5\0\5\17\4\0\1\17\21\0\51\17\u0a77\0\57\17"+
    "\1\0\57\17\1\0\205\17\6\0\4\17\3\20\16\0\46\17\12\0"+
    "\66\17\11\0\1\17\17\0\1\20\27\17\11\0\7\17\1\0\7\17"+
    "\1\0\7\17\1\0\7\17\1\0\7\17\1\0\7\17\1\0\7\17"+
    "\1\0\7\17\1\0\40\20\57\0\1\17\u01d5\0\3\17\31\0\11\17"+
    "\6\20\1\0\5\17\2\0\5\17\4\0\126\17\2\0\2\20\2\0"+
    "\3\17\1\0\132\17\1\0\4\17\5\0\51\17\3\0\136\17\21\0"+
    "\33\17\65\0\20\17\u0200\0\u19b6\17\112\0\u51cc\17\64\0\u048d\17\103\0"+
    "\56\17\2\0\u010d\17\3\0\20\17\12\20\2\17\24\0\57\17\1\20"+
    "\14\0\2\20\1\0\31\17\10\0\120\17\2\20\45\0\11\17\2\0"+
    "\147\17\2\0\4\17\1\0\2\17\16\0\12\17\120\0\10\17\1\20"+
    "\3\17\1\20\4\17\1\20\27\17\5\20\20\0\1\17\7\0\64\17"+
    "\14\0\2\20\62\17\21\20\13\0\12\20\6\0\22\20\6\17\3\0"+
    "\1\17\4\0\12\20\34\17\10\20\2\0\27\17\15\20\14\0\35\17"+
    "\3\0\4\20\57\17\16\20\16\0\1\17\12\20\46\0\51\17\16\20"+
    "\11\0\3\17\1\20\10\17\2\20\2\0\12\20\6\0\27\17\3\0"+
    "\1\17\1\20\4\0\60\17\1\20\1\17\3\20\2\17\2\20\5\17"+
    "\2\20\1\17\1\20\1\17\30\0\3\17\43\0\6\17\2\0\6\17"+
    "\2\0\6\17\11\0\7\17\1\0\7\17\221\0\43\17\10\20\1\0"+
    "\2\20\2\0\12\20\6\0\u2ba4\17\14\0\27\17\4\0\61\17\u2104\0"+
    "\u012e\17\2\0\76\17\2\0\152\17\46\0\7\17\14\0\5\17\5\0"+
    "\1\17\1\20\12\17\1\0\15\17\1\0\5\17\1\0\1\17\1\0"+
    "\2\17\1\0\2\17\1\0\154\17\41\0\u016b\17\22\0\100\17\2\0"+
    "\66\17\50\0\15\17\3\0\20\20\20\0\7\20\14\0\2\17\30\0"+
    "\3\17\31\0\1\17\6\0\5\17\1\0\207\17\2\0\1\20\4\0"+
    "\1\17\13\0\12\20\7\0\32\17\4\0\1\17\1\0\32\17\13\0"+
    "\131\17\3\0\6\17\2\0\6\17\2\0\6\17\2\0\3\17\3\0"+
    "\2\17\3\0\2\17\22\0\3\20\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\3\5\1\1\1\6"+
    "\2\7\3\5\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\3\5\1\16\1\17\1\20\1\21\3\5\1\1\1\22"+
    "\1\23\1\24\1\25\2\0\2\5\1\26\1\5\1\0"+
    "\1\27\2\0\1\30\4\5\2\0\6\5\1\31\2\0"+
    "\1\5\1\32\1\5\1\30\2\5\1\33\2\5\1\34"+
    "\1\35\3\5\1\36\2\5\1\0\1\2\1\5\1\37"+
    "\2\5\1\40\11\5\1\41\1\42\7\5\1\43\1\5"+
    "\1\44\1\5\1\45\2\5\1\46\1\47\1\5\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\63\0\231\0\63\0\314\0\377"+
    "\0\u0132\0\u0165\0\63\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264"+
    "\0\u0297\0\u02ca\0\63\0\63\0\63\0\63\0\u02fd\0\u0330"+
    "\0\u0363\0\63\0\63\0\63\0\63\0\u0396\0\u03c9\0\u03fc"+
    "\0\u042f\0\63\0\63\0\63\0\63\0\u0462\0\u0495\0\u04c8"+
    "\0\u04fb\0\377\0\u052e\0\u0165\0\63\0\u0561\0\u0594\0\u0198"+
    "\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c"+
    "\0\u075f\0\u0792\0\u07c5\0\u07f8\0\63\0\u082b\0\u085e\0\u0891"+
    "\0\377\0\u08c4\0\u0594\0\u08f7\0\u092a\0\377\0\u095d\0\u0990"+
    "\0\63\0\63\0\u09c3\0\u09f6\0\u0a29\0\377\0\u0a5c\0\u0a8f"+
    "\0\u0ac2\0\u082b\0\u0af5\0\377\0\u0b28\0\u0b5b\0\377\0\u0b8e"+
    "\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26"+
    "\0\377\0\377\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58"+
    "\0\u0e8b\0\377\0\u0ebe\0\377\0\u0ef1\0\377\0\u0f24\0\u0f57"+
    "\0\377\0\377\0\u0f8a\0\377";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\4\10\1\11"+
    "\1\12\1\2\1\13\1\10\1\2\1\14\1\15\1\16"+
    "\1\17\1\20\1\10\1\21\1\2\1\22\1\23\1\24"+
    "\1\25\1\26\1\10\1\27\1\10\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\2\10\1\37\1\10\1\40"+
    "\1\41\1\42\1\43\1\44\1\10\1\45\65\0\1\4"+
    "\64\0\1\46\1\47\63\0\1\10\1\50\4\10\3\0"+
    "\4\10\1\51\3\10\7\0\1\10\1\52\3\10\4\0"+
    "\6\10\4\0\1\10\7\0\6\10\3\0\10\10\7\0"+
    "\5\10\4\0\6\10\4\0\1\10\7\0\4\10\1\53"+
    "\1\10\3\0\10\10\7\0\5\10\4\0\6\10\4\0"+
    "\1\10\1\0\2\54\1\0\11\54\1\55\1\56\45\54"+
    "\16\0\1\57\2\0\2\60\56\0\1\57\2\0\2\15"+
    "\46\0\6\10\3\0\5\10\1\61\2\10\7\0\5\10"+
    "\4\0\6\10\4\0\1\10\7\0\6\10\3\0\4\10"+
    "\1\62\3\10\7\0\3\10\1\63\1\10\4\0\6\10"+
    "\4\0\1\10\7\0\6\10\3\0\10\10\7\0\5\10"+
    "\4\0\6\10\4\0\1\64\30\0\1\65\64\0\1\66"+
    "\37\0\6\10\3\0\10\10\7\0\2\10\1\67\2\10"+
    "\4\0\6\10\4\0\1\10\7\0\6\10\3\0\5\10"+
    "\1\70\2\10\7\0\5\10\4\0\6\10\4\0\1\10"+
    "\7\0\5\10\1\71\3\0\10\10\7\0\5\10\4\0"+
    "\6\10\4\0\1\10\7\0\6\10\3\0\10\10\7\0"+
    "\2\10\1\72\2\10\4\0\6\10\4\0\1\10\7\0"+
    "\5\10\1\73\3\0\10\10\7\0\5\10\4\0\6\10"+
    "\4\0\1\10\7\0\3\10\1\74\2\10\3\0\10\10"+
    "\7\0\5\10\4\0\6\10\4\0\1\10\56\0\1\75"+
    "\5\0\1\46\1\3\1\4\60\46\5\76\1\77\55\76"+
    "\6\0\2\10\1\100\3\10\3\0\10\10\7\0\5\10"+
    "\4\0\6\10\4\0\1\10\7\0\5\10\1\101\3\0"+
    "\10\10\7\0\5\10\4\0\6\10\4\0\1\10\7\0"+
    "\6\10\3\0\10\10\7\0\1\102\4\10\4\0\6\10"+
    "\4\0\1\10\3\0\1\54\13\0\1\54\65\0\2\103"+
    "\46\0\5\10\1\104\3\0\10\10\7\0\5\10\4\0"+
    "\6\10\4\0\1\10\7\0\5\10\1\105\3\0\10\10"+
    "\7\0\5\10\4\0\2\10\1\106\3\10\4\0\1\10"+
    "\7\0\6\10\3\0\10\10\7\0\4\10\1\107\4\0"+
    "\6\10\4\0\1\10\7\0\1\110\5\10\3\0\10\10"+
    "\7\0\5\10\4\0\6\10\4\0\1\10\31\0\1\111"+
    "\62\0\1\112\40\0\6\10\3\0\10\10\7\0\3\10"+
    "\1\113\1\10\4\0\6\10\4\0\1\10\7\0\6\10"+
    "\3\0\4\10\1\114\3\10\7\0\5\10\4\0\6\10"+
    "\4\0\1\10\7\0\4\10\1\115\1\10\3\0\10\10"+
    "\7\0\5\10\4\0\6\10\4\0\1\10\7\0\4\10"+
    "\1\116\1\10\3\0\10\10\7\0\5\10\4\0\6\10"+
    "\4\0\1\10\7\0\4\10\1\117\1\10\3\0\10\10"+
    "\7\0\5\10\4\0\6\10\4\0\1\10\7\0\3\10"+
    "\1\120\2\10\3\0\10\10\7\0\5\10\4\0\6\10"+
    "\4\0\1\10\1\0\5\76\1\121\61\76\1\122\1\121"+
    "\55\76\6\0\3\10\1\123\2\10\3\0\10\10\7\0"+
    "\5\10\4\0\6\10\4\0\1\10\7\0\6\10\3\0"+
    "\5\10\1\124\2\10\7\0\5\10\4\0\6\10\4\0"+
    "\1\10\7\0\6\10\3\0\6\10\1\125\1\10\7\0"+
    "\5\10\4\0\6\10\4\0\1\10\7\0\1\126\5\10"+
    "\3\0\10\10\7\0\5\10\4\0\6\10\4\0\1\10"+
    "\7\0\6\10\3\0\5\10\1\127\2\10\7\0\5\10"+
    "\4\0\6\10\4\0\1\10\7\0\6\10\3\0\10\10"+
    "\7\0\3\10\1\130\1\10\4\0\6\10\4\0\1\10"+
    "\7\0\6\10\3\0\10\10\7\0\4\10\1\131\4\0"+
    "\6\10\4\0\1\10\7\0\6\10\3\0\10\10\7\0"+
    "\5\10\4\0\4\10\1\132\1\10\4\0\1\10\7\0"+
    "\6\10\3\0\10\10\7\0\1\133\4\10\4\0\6\10"+
    "\4\0\1\10\7\0\1\134\5\10\3\0\10\10\7\0"+
    "\5\10\4\0\6\10\4\0\1\10\7\0\6\10\3\0"+
    "\10\10\7\0\3\10\1\135\1\10\4\0\6\10\4\0"+
    "\1\10\1\0\4\76\1\4\1\121\55\76\6\0\4\10"+
    "\1\136\1\10\3\0\10\10\7\0\5\10\4\0\6\10"+
    "\4\0\1\10\7\0\3\10\1\137\2\10\3\0\10\10"+
    "\7\0\5\10\4\0\6\10\4\0\1\10\7\0\5\10"+
    "\1\140\3\0\10\10\7\0\5\10\4\0\6\10\4\0"+
    "\1\10\7\0\6\10\3\0\5\10\1\141\2\10\7\0"+
    "\5\10\4\0\6\10\4\0\1\10\7\0\6\10\3\0"+
    "\5\10\1\142\2\10\7\0\5\10\4\0\6\10\4\0"+
    "\1\10\7\0\5\10\1\143\3\0\10\10\7\0\5\10"+
    "\4\0\6\10\4\0\1\10\7\0\6\10\3\0\10\10"+
    "\7\0\5\10\4\0\1\10\1\144\4\10\4\0\1\10"+
    "\7\0\6\10\3\0\4\10\1\145\3\10\7\0\5\10"+
    "\4\0\6\10\4\0\1\10\7\0\6\10\3\0\5\10"+
    "\1\146\2\10\7\0\5\10\4\0\6\10\4\0\1\10"+
    "\7\0\5\10\1\147\3\0\10\10\7\0\5\10\4\0"+
    "\6\10\4\0\1\10\7\0\4\10\1\150\1\10\3\0"+
    "\10\10\7\0\5\10\4\0\6\10\4\0\1\10\7\0"+
    "\1\151\5\10\3\0\10\10\7\0\5\10\4\0\6\10"+
    "\4\0\1\10\7\0\6\10\3\0\10\10\7\0\5\10"+
    "\4\0\6\10\4\0\1\152\7\0\5\10\1\153\3\0"+
    "\10\10\7\0\5\10\4\0\6\10\4\0\1\10\7\0"+
    "\6\10\3\0\10\10\7\0\5\10\4\0\4\10\1\154"+
    "\1\10\4\0\1\10\7\0\6\10\3\0\10\10\7\0"+
    "\2\10\1\155\2\10\4\0\6\10\4\0\1\10\1\0"+
    "\1\46\1\3\1\4\3\46\6\147\3\46\10\147\7\46"+
    "\5\147\4\46\6\147\4\46\1\147\1\46\6\0\6\10"+
    "\3\0\7\10\1\156\7\0\5\10\4\0\6\10\4\0"+
    "\1\10\7\0\6\10\3\0\5\10\1\157\2\10\7\0"+
    "\5\10\4\0\6\10\4\0\1\10\7\0\6\10\3\0"+
    "\10\10\7\0\1\160\4\10\4\0\6\10\4\0\1\10"+
    "\7\0\6\10\3\0\4\10\1\161\3\10\7\0\5\10"+
    "\4\0\6\10\4\0\1\10\7\0\6\10\3\0\10\10"+
    "\7\0\4\10\1\162\4\0\6\10\4\0\1\10\7\0"+
    "\4\10\1\163\1\10\3\0\10\10\7\0\5\10\4\0"+
    "\6\10\4\0\1\10\7\0\6\10\3\0\5\10\1\164"+
    "\2\10\7\0\5\10\4\0\6\10\4\0\1\10\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4029];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\4\1\1\11"+
    "\7\1\4\11\3\1\4\11\4\1\4\11\2\0\4\1"+
    "\1\0\1\11\2\0\5\1\2\0\6\1\1\11\2\0"+
    "\11\1\2\11\6\1\1\0\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
/* To store the value of identifiers and integer constants 
  (or of other tokens with semantic values).
  Should be assigned to in the corresponding actions.
*/
Object semanticValue; 
public int line(){
 return yyline;
}
public int column(){
return yycolumn;
}
/* To store the token type.
   Should be assigned in the corresponding action 
   before returning the value of the token.
*/
int token;




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
public NetworkLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
public NetworkLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [105] { semanticValue = new String(yytext()); return token =STRING_LITERAL; }");
          { semanticValue = new String(yytext()); return token =STRING_LITERAL;
          }
        case 41: break;
        case 2: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [161] { /* ignore */ }");
          { /* ignore */
          }
        case 42: break;
        case 1: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [175] { throw new Error(\"ILLEGAL CHARACTER <<\"+yytext()+\">>\"); }");
          { throw new Error("ILLEGAL CHARACTER <<"+yytext()+">>");
          }
        case 43: break;
        case 28: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [106] { return token = IOSIGNATURE; }");
          { return token = IOSIGNATURE;
          }
        case 44: break;
        case 14: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [119] { return token = \'[\'; }");
          { return token = '[';
          }
        case 45: break;
        case 5: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [150] { semanticValue = yytext();  return token = ID; }");
          { semanticValue = yytext();  return token = ID;
          }
        case 46: break;
        case 17: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [122] { return token = \'}\'; }");
          { return token = '}';
          }
        case 47: break;
        case 3: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [114] { return token = \'/\'; }");
          { return token = '/';
          }
        case 48: break;
        case 34: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [118] { return token = FALSE; }");
          { return token = FALSE;
          }
        case 49: break;
        case 32: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [147] { return token = ELSE; }");
          { return token = ELSE;
          }
        case 50: break;
        case 6: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [142] { return token = \'.\'; }");
          { return token = '.';
          }
        case 51: break;
        case 38: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [132] { return token = BOOLEAN; }");
          { return token = BOOLEAN;
          }
        case 52: break;
        case 35: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [146] { return token = LENGTH; }");
          { return token = LENGTH;
          }
        case 53: break;
        case 30: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [124] { return token = VAR; }");
          { return token = VAR;
          }
        case 54: break;
        case 16: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [121] { return token = \'{\'; }");
          { return token = '{';
          }
        case 55: break;
        case 31: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [117] { return token = TRUE; }");
          { return token = TRUE;
          }
        case 56: break;
        case 9: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [113] { return token = \'-\'; }");
          { return token = '-';
          }
        case 57: break;
        case 27: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [127] { return token = END; }");
          { return token = END;
          }
        case 58: break;
        case 20: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [144] { return token = \',\'; }");
          { return token = ',';
          }
        case 59: break;
        case 8: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [141] { return token = \'=\'; }");
          { return token = '=';
          }
        case 60: break;
        case 39: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [128] { return token = ENTITIES; }");
          { return token = ENTITIES;
          }
        case 61: break;
        case 33: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [145] { return token = WHILE; }");
          { return token = WHILE;
          }
        case 62: break;
        case 22: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [140] { return token = IF; }");
          { return token = IF;
          }
        case 63: break;
        case 11: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [111] { return token = \'+\'; }");
          { return token = '+';
          }
        case 64: break;
        case 7: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [103] { semanticValue = new Integer(yytext()); return token = INTEGER_LITERAL; }");
          { semanticValue = new Integer(yytext()); return token = INTEGER_LITERAL;
          }
        case 65: break;
        case 21: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [148] { return token = \'<\'; }");
          { return token = '<';
          }
        case 66: break;
        case 4: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [112] { return token = \'*\'; }");
          { return token = '*';
          }
        case 67: break;
        case 19: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [143] { return token = \';\'; }");
          { return token = ';';
          }
        case 68: break;
        case 18: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [138] { return token = \'!\'; }");
          { return token = '!';
          }
        case 69: break;
        case 25: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [136] { return token = AND; }");
          { return token = AND;
          }
        case 70: break;
        case 36: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [129] { return token = STRING; }");
          { return token = STRING;
          }
        case 71: break;
        case 15: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [120] { return token = \']\'; }");
          { return token = ']';
          }
        case 72: break;
        case 26: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [131] { return token = INT; }");
          { return token = INT;
          }
        case 73: break;
        case 13: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [116] { return token = \')\'; }");
          { return token = ')';
          }
        case 74: break;
        case 40: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [125] { return token = STRUCTURE; }");
          { return token = STRUCTURE;
          }
        case 75: break;
        case 10: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [108] { return token = \':\'; }");
          { return token = ':';
          }
        case 76: break;
        case 37: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [102] { return token = NETWORK; }");
          { return token = NETWORK;
          }
        case 77: break;
        case 12: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [115] { return token = \'(\'; }");
          { return token = '(';
          }
        case 78: break;
        case 24: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [104] { semanticValue = new Double(yytext()); return token = DOUBLE_LITERAL; }");
          { semanticValue = new Double(yytext()); return token = DOUBLE_LITERAL;
          }
        case 79: break;
        case 29: 
          //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          //System.out.println("action [107] { return token = CONECTOR; }");
          { return token = CONECTOR;
          }
        case 80: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                //System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: <<EOF>>");
                //System.out.println("action [169] { return token = ENDINPUT; }");
                return token = ENDINPUT;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      ////System.out.println("Usage : java NetworkLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        NetworkLexer scanner = null;
        try {
          scanner = new NetworkLexer( new java.io.FileReader(argv[i]) );
          do {
            ////System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          ////System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          ////System.out.println("IO error scanning file \""+argv[i]+"\"");
          ////System.out.println(e);
        }
        catch (Exception e) {
          ////System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
