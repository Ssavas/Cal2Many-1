/* 
 *  @author Per Andersson<Per.Andersson@cs.lth.se>, Lund University
 *  To parse a CAL file use one of the methods:
 *  - public net.opendf.ir.cal.Actor parse(String path, String fileName)
 *  - public net.opendf.ir.cal.Actor parse(File file)
 *
 *  After parsing check for errors in the attribute parseProblems.
 *
 *  The parser is created using jflex and beaver.
 */
 
package net.opendf.parser.lth;

import net.opendf.ir.cal.Action;
import java.util.ArrayList;
import java.util.Map;
import net.opendf.ir.cal.*;
import java.util.AbstractMap;
import net.opendf.ir.*;
import java.io.PrintStream;
import net.opendf.ir.util.ImmutableList;
import net.opendf.ir.util.ImmutableEntry;
import java.util.TreeSet;
import beaver.*;
import java.io.File;
import java.util.Arrays;
import net.opendf.ir.common.*;
import java.util.Collection;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "CalParser.beaver".
 */
public class CalParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ACTOR = 1;
		static public final short IDENTIFIER = 2;
		static public final short LPAREN = 3;
		static public final short RPAREN = 4;
		static public final short PORTCONN = 5;
		static public final short COLON = 6;
		static public final short EDGE = 7;
		static public final short SEMICOLON = 8;
		static public final short BAR = 9;
		static public final short IMPORT = 10;
		static public final short EQ = 11;
		static public final short IF = 12;
		static public final short THEN = 13;
		static public final short ELSE = 14;
		static public final short END = 15;
		static public final short MAP = 16;
		static public final short LBRACE = 17;
		static public final short RBRACE = 18;
		static public final short BEGIN = 19;
		static public final short VAR = 20;
		static public final short DO = 21;
		static public final short CHOOSE = 22;
		static public final short IN = 23;
		static public final short COMMA = 24;
		static public final short ALL = 25;
		static public final short SCHEDULE = 26;
		static public final short LBRACK = 27;
		static public final short RBRACK = 28;
		static public final short DOUBLECOLON = 29;
		static public final short ACTION = 30;
		static public final short INITIALIZE = 31;
		static public final short PRIORITY = 32;
		static public final short REGEXP = 33;
		static public final short DOT = 34;
		static public final short MUTABLE = 35;
		static public final short EQCOLON = 36;
		static public final short FUNCTION = 37;
		static public final short PROCEDURE = 38;
		static public final short MULTI = 39;
		static public final short LET = 40;
		static public final short CONST = 41;
		static public final short LAMBDA = 42;
		static public final short COLONEQ = 43;
		static public final short WHILE = 44;
		static public final short GUARD = 45;
		static public final short DELAY = 46;
		static public final short AT = 47;
		static public final short ATSTAR = 48;
		static public final short ANY = 49;
		static public final short REPEAT = 50;
		static public final short TIME = 51;
		static public final short INVARIANT = 52;
		static public final short FSM = 53;
		static public final short MULT = 54;
		static public final short GT = 55;
		static public final short ENDACTION = 56;
		static public final short ENDACTOR = 57;
		static public final short ENDINVARIANT = 58;
		static public final short ENDSCHEDULE = 59;
		static public final short LT = 60;
		static public final short ARROW = 61;
		static public final short INTEGER_LITERAL = 62;
		static public final short LONG_LITERAL = 63;
		static public final short FLOATING_POINT_LITERAL = 64;
		static public final short DOUBLE_LITERAL = 65;
		static public final short TRUE_LITERAL = 66;
		static public final short FALSE_LITERAL = 67;
		static public final short CHARACTER_LITERAL = 68;
		static public final short STRING_LITERAL = 69;
		static public final short NULL_LITERAL = 70;
		static public final short OLD = 71;
		static public final short PROC = 72;
		static public final short OPERATOR = 73;
		static public final short FOREACH = 74;
		static public final short FOR = 75;
		static public final short ENDCHOOSE = 76;
		static public final short ENDFOREACH = 77;
		static public final short ENDIF = 78;
		static public final short ENDLAMBDA = 79;
		static public final short ENDLET = 80;
		static public final short ENDPROC = 81;
		static public final short ENDWHILE = 82;

		static public final String[] NAMES = {
			"EOF",
			"ACTOR",
			"IDENTIFIER",
			"LPAREN",
			"RPAREN",
			"PORTCONN",
			"COLON",
			"EDGE",
			"SEMICOLON",
			"BAR",
			"IMPORT",
			"EQ",
			"IF",
			"THEN",
			"ELSE",
			"END",
			"MAP",
			"LBRACE",
			"RBRACE",
			"BEGIN",
			"VAR",
			"DO",
			"CHOOSE",
			"IN",
			"COMMA",
			"ALL",
			"SCHEDULE",
			"LBRACK",
			"RBRACK",
			"DOUBLECOLON",
			"ACTION",
			"INITIALIZE",
			"PRIORITY",
			"REGEXP",
			"DOT",
			"MUTABLE",
			"EQCOLON",
			"FUNCTION",
			"PROCEDURE",
			"MULTI",
			"LET",
			"CONST",
			"LAMBDA",
			"COLONEQ",
			"WHILE",
			"GUARD",
			"DELAY",
			"AT",
			"ATSTAR",
			"ANY",
			"REPEAT",
			"TIME",
			"INVARIANT",
			"FSM",
			"MULT",
			"GT",
			"ENDACTION",
			"ENDACTOR",
			"ENDINVARIANT",
			"ENDSCHEDULE",
			"LT",
			"ARROW",
			"INTEGER_LITERAL",
			"LONG_LITERAL",
			"FLOATING_POINT_LITERAL",
			"DOUBLE_LITERAL",
			"TRUE_LITERAL",
			"FALSE_LITERAL",
			"CHARACTER_LITERAL",
			"STRING_LITERAL",
			"NULL_LITERAL",
			"OLD",
			"PROC",
			"OPERATOR",
			"FOREACH",
			"FOR",
			"ENDCHOOSE",
			"ENDFOREACH",
			"ENDIF",
			"ENDLAMBDA",
			"ENDLET",
			"ENDPROC",
			"ENDWHILE"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjN7TybCNJdtdkBiaHKcWc64IbML2m8Q221JL4Gz7O00czgFGclOC2Ag2224XlAaqiY4g" +
		"L8aKHbHyA2eBO4HjMvFRzxZpxt3rtkSl5yiVxoOS7vvajixFVcPsTPv$SdKJfn#bksgZowI" +
		"rAe9hyAEKgHGtfPJx27mGEKZzgHJvQHYjf6vUW7BwC5gZcr9qQqntKYAwZDsW3vL5Jkerkf" +
		"xwqXqRH37gCIzDnMa9xE8qIqPRC#qJ$hNIBUeZ6yr6#Y6joVVg43j8X#fGEqn7wZ8xIvtGd" +
		"pQ9iwahTD2P#dSxNPVwASgcQngGsyokyHcFYwsWPrrB3RKpSbYR7miHV6andqN5#cJny9by" +
		"5PAsvFLMdqXeJdGjCkpKcIec7IUtWZkIbB$XZokLtn4z$qEMsd$WGBLDRgQB1b4$xO$gfge" +
		"q9lZbE7QWT3wBwAE#asdGERTEOu9tnQgzWsXuF4qR#ZtjoRxKNVdfIC5r7bUXwMRiwyDCGc" +
		"clMxciw5WFJS6vf$7GL7LT7k3bt4KoTk0pje$TaxVO2qrk2gNBSjRFn$C1V0zFv6XFjnlpV" +
		"2QO36XD$e36fhZGCgnSTqyt1U2gbCQ4sNfsIsD6hvnS$TQUpUHyqNufLZ8VfVXxEWxa7zmM" +
		"cFOBf1B$EzmccyS2aDMi$RU8rV5iiJFoImLG1QzUHw$98gi#3QJwTf02L44prk9wwJTt6Us" +
		"bHN4mZ44#$0CqUO9ekQ$S2J#83WgaaC3t4UpKcIkFyc7xgIyfWGZnf#xWDjLKly07nqsB1T" +
		"3OluWLKYjhmXBYOzl0gVX5xf3PYl8xikq#n5rS9fZ781LNvZQ2VteovxzOQJDE0QJsbyXRu" +
		"UYRqw1rTN$QTrlCgTEWz7G$JDkoJthoURm6cQsJjReAkTC4K2CS4ZB7MReF1zAl6n2VuBHi" +
		"FT0z233cOW8T$uz#BiEyKNmxR1cBjwilQ7UCFQ89WEWPC0wYNhDqZo9tVnC3Kp8bnwebuUe" +
		"TlKYsfDZU4z$Vf$2QOoj0sTI$oGe2JucBQnLNOXtss9nZZP$BPo08wFoKXdafo6V5J1fTHp" +
		"M9WQX74z27sdSxS2dxny$cwh8O9fZ6wpEMelceQT#sIUJf6NyqNujdIH31LvNfKHVoq3Nwg" +
		"XbsaCLNX6v2hecDg6SIaOpmFMQagh#GPl1TvuJpk9Z7#8Dr45q13LVLsN4pz#NtkfnRp4c0" +
		"w8ckNosFvfFZfB$XfD8yJJ7FKePYOEdD$WoaNQzUG7rRRaGscy61rH2s2Petf3#YOool5Y$" +
		"4mBUT7L1E#cU0dgWjCzz0LuckDwNb4MXKyDxP1tuUYhJkVHm$HmpIEBe6EiVoShOEcEfXOY" +
		"OuzL0kaVOtO5ao7eECehrPRO5SiJFO#MSyRoSUVOFoLcFz7$e5tydU2QPjgZ$dBKnPLY6lN" +
		"ftoGlu2E6cQVt4CDi5Br1TFTT1SVvk$vCFR96MYh7yFN8tcxiIk3CkaYkbXrW6nxq0FKX#n" +
		"yyY0DfS6Y8#xPWYRHH7gSdW7FfMc2QIRDeTc2QHuylP2MqWfWUgaGJ8#YnyOKhVTfmQH7Rw" +
		"6jMAztuc9wctRGk$G1wUVu#uBf8up#IZ1zIp$Ip$GR$GbCf#XtvXYONc5F8PXUa$K$XnFnp" +
		"4hdibmnxddd1iQgS1QVYtYgB9Z6Y4qw9Y$c6dm$JSBJBuSluKlXl#wIFzVnCBw2h#K6l5hi" +
		"keopW$j4rfyhykr6HoVaJur9xxLx#Mvk4IycezgrLdIqGbG17NUsh9WwT3m#m0DqVkUkmNY" +
		"4HUgmu1bAIMedZn8yOo0t7lliCUn6YoVpuzWBJ$0lecCAX$RPKsBJB7wQPucEPtYsOrDWFp" +
		"moxn$Pj4bqpEU5l9YVXPPbXTgq518h#3Mr4dYs2fvTwar#L#DHQ$az$Xz$93RjXty#Zn4x7" +
		"$EHGl1yBsV0RVojQeVzUfn$AXJFp$mdd#80CbQkHHgFnQGl7Sku43UauuRigxjwHrg7aNDf" +
		"7HF1dRWH7QPFuWPSxoyAwVZxFkOKeoDq5MAJIwe07bTV24$avUY8OPFmVszJPZ6qwO9YQ5F" +
		"rOcZJZSNGffnYQDEjnT2cEugXJHsAeKszYg5DVOgXJGEBeKsV5GERhequbrCniAb9CRF9ZS" +
		"Q#faJObFElR78q5MvJjikcgV#vJVUwTFmzczRyHpRzL#iKUHKrzWfccEUf7kGxi1VtN#av#" +
		"ekkBaoARQch2fSokfujajJo8acz64FgrJ2fBukawviYIVrK9Aa$YYB5Lf6a4c99yUNY#vqY" +
		"LGbI5FnBPc5hjGForvY8g17ZSnWjsHJwtWOzINleVYBrY$g5pf9Huz6gFsFQRhIOlsI60eq" +
		"turOs#kTpw2aNjUU9Gh0qS#c#Y#kQubCnHuHVDygu9aMIla6aet$gSZrre2vXqgr1GwX$OP" +
		"hXxn2Ew9yEQWkT$M$xcwX7qD#vy7T3#RJoJNBobdsVWlomtlXx7Tfof2V7oTNSY3RBPo$XF" +
		"Ss3U7H#i3DC3ZdPmhwxisEsjAqnFTaYcorzKyF6s6tPhh6vt5ZcpSOzN$hDEoWYrvdtFeFL" +
		"#Gm0VLmDigDTA#xqwRyZLaF32w9bH1ZMN5gD##jcDhlDmPh3gPZHoQOvN3vyHk2i1WzNfSZ" +
		"Bze#3s6shUppiqeZvIi6IBRQBBu9ZR3GvV6U1ETj1lpF6kPpLaZ51RsfDpWewJmNt6trESF" +
		"PGcpDxjcYYYDMohOiSOsDtnZZOt2kS8v#$XDPoTMWaJu$mdj77wmkqkdgZNDdXd6UGHHwXD" +
		"Af8PvCVZSbK4cIX9PrAKHALGSQnw0na8miHaeWyc8VTTYVTXUVjFTGCSTy2qTmIxUVJ1NGX" +
		"jKNEse9QHwgB#tDqdkY$acfJ0bL6l5QbQhZNbtFgzSWB3R1$Ry9kjJrp2opGyctmJvTt05C" +
		"bmPH03o1BQ4n315CvWwaiZOc9QOeBqtXw6PXcGFPYvET9j5GmFGbCbmkcv#DYOcIatlGqSe" +
		"oVTWgc4jWjjfyiOF9YdzYO7e65iJ1P1bCMCBL2fki8kIpQ33rfwDEOye6fl63Q7HUJVYhLf" +
		"4leKc1wK30DmPfv15CTOBBW7HjJAlJ7MxiPm9G5VwyKJFhvimdPKMCg3qmUmLGxBYORJnze" +
		"y6CLxRMpaACrfcJ1PCUJZwPZzOeIJrduLncngUVNgyU2wI6ieeuk7rOn7gPkiAK7pQ6vm9G" +
		"bcDA0RO1WgWnCMhF6f6CizjeDT67gIRsWDGzQ#ublxRNJjddnBnyjyJ0zYdYwNMnprkvnnD" +
		"CWmUG1feUWHMCQZNYAxQTSW#afODBsTHHl3n8$tMOmhSFpR3ILHYaUfgTeCfsBkSe0Kpd1L" +
		"05#AYUOCcNjF44$rOhhfzMoTbvWQaDhpOxEDvWyeaDJF4nfia#oO9SVqQqnPKANJp2bHM3A" +
		"Z8jfWc2QXbErZKVhji8mpQHdYh3lSYLEDAOymRGHxPs2c4gZHsFIcVITk35U0PWin80NOwk" +
		"WzJp9RtRErF5aINQ8XobJHZMMUB9ZF0djTOAOz7xMc3IFdySp1PC7TbeuMoLBsSQKAULyZF" +
		"V6nTGJCpV2YEh0b22Oz0vf4yoPbR2BDAQos4LMN4mwPsR8$6rmBjV#RqDZJNxADBklGbnCi" +
		"x4xBeLl$44$lGejIS7yjCBuwGdeYerfji7a1wPasewSr0ssze2yrgmnbO0EBn3gEUEltQFm" +
		"JoAadNqtKdHeJ3gRb1NRCkIkewyJTSOPxtvQ0XrTWTJMqII8gRpeoC9xR9RnjSV4U0Qq#Q4" +
		"pAoOcnzSLO8dUJxqnOXUz3MoPHaU5uFpnx9gAP$1Kw1WMt2TUQCapcEwWHRWl0gQ9QCkBwU" +
		"jP1jCycayBQ27cpyCEouCcNTAOT7OgBJhoucBoq52W60hknEI5A2yslYvBgs1t6Z2b5Oefp" +
		"s2AtginwT7vqEWfGjvzMbOv7$Ru4GKQazvV3mkcXn4HB#9vsXUO#g9SBYQcld4nzS8fEKzs" +
		"K7nCNknUBLiEcCQPl9iNNBkXY7SFubt7v6A9INlC0D6jywAk3uSTJapccVtVq#Xu36Cq9lj" +
		"yaablnOt9s7Rrn$XCGJiXfWvxvrmc#Rr248#znXfF0ZqhJsEDfmBazDxtmVgNi1T78IPwus" +
		"rDwtWbU8OBvRJn8ArZijbdMiUxQ4ly5pPPcFDnYPxOQwNn94e#l19tFzw0xVDM0lnkswJNE" +
		"j$uEA#GV9OS5uy7Nj5efj4rXUB9bvoN97Ziyr#ImgNn2Ey6GjmekNIU4Jv0cSkE6t3ZOvIW" +
		"m$H9t8033#uX7V$Gnyfr5MQJIwe07bTV48#Ak1mTiMmIVjgcqpQTjkcqJQTjEctJQPjEstJ" +
		"QfjCs5MgJe#EqJVz$R7AZCUMqS9kqfdzkawEfS9ie9sGJDVclRQBKa8w$PvF#E#1$OTD$jK" +
		"u5vYbgx4NDC91lHQrnRqljg3rrA4oA#XH5gcYwJaiLLOhonVTj72d8Et$9B6ojB2rl8c9Od" +
		"FadWixKdt#2wyzKpv5HbK7wCwPPHelvIwOhqgu0BOkf#xMOVuKi14jGTqVgPKhzOes8s0ST" +
		"vJwzAD8qM6oDZczvE18j3TfAsmhJJ9OBUH4irFuM7CRVo7cLaH#qlxt1B6hVzTzrCsr$ozy" +
		"0zISqSZUQqkWi#HGbh8TItFd1pZ2IyUoCOzzTsH7vGSjLDpqv8fiZVKt2njXjEQwnVcegy#" +
		"O8LftnCenilZElZJyKkTBN5IEwkxpiHBN6qHNrxbAgvyQAML9mJpApsMq6gtpAakzaqw3FG" +
		"ZFwCMEoUqQtVuA8NRQ6eT9s6SJsx45Vv8SXr2WAp8bMCoOugrajCyPuKx0uA#Wy5J9SQ3AS" +
		"sLrjPdPfZLpX76DTn1WRkpCcQ8zxXJFiPs3GC$xGI7qwS7ilg2#hGAkhj#3bj0RvrKIMPxZ" +
		"zHOyfQFW5F4b$pqktEOHwSz1yK1cG$kRPF8ohWN9TSFtjgHAW9YZl84gTR8z9omdNONqPNl" +
		"UauxOwLASZfhssuHL1pKov9gYZUxmcuFqIx3Xmj0JLGRaHv5u6VuN8cnW#7triRAbcy8qYI" +
		"cXe#huYyi46Rosxxgs4lab4wMKYvmpNcR0gTf$t6fVSdvXlB55Y1V2PuEt1rzjzYMZdemQ7" +
		"5$$TQd3#WDjlw7y7ifjWrn7qPOCk2fyd4NBMOZFcE$JVQ9VJ6w2SX#M4NwpfTfjL2srt67p" +
		"mLL9puulNKCQQfgCDcOsifk3v1MsoHe0MGdOpP6#7ZWVDl8jGxW#C6q3J8lmmaCXVagZaV5" +
		"Dl1XfaoYFC#CKeZmRrHVaFqAnm7Tp3fM#KvbZx0Cf3ZD#MG0PrUXnjm#msF#8pxIUqmxQK5" +
		"DJxeVw7wPk6SjlmEVoVegsBiNC5z2mpyw5ilGc#qVHXFRml65mNexxRO2Y5TlqjmItWIrq#" +
		"mvwozeJg9IpuhdcaRsCHhY#D7iI6DIEyhyGjm0oxlElGrnXukeNtMw#Y3sjbmLwUOlGrHFs" +
		"sS3alC5k8BskB6VS#rl4YyAqH#h3Nh4EOjmlcXLq#o7W$0#$ZqlMduISXYxuIBq7sByXCHH" +
		"lMrdSmNAS7Q#Cz1GuxhCyDHgoRLvb#FtJy3px37az6JaXl0nrdWYhO$RvpGESQMUGdt$bcR" +
		"Iv3tOgOAmjKnvJBG$O2Lzybg5V37DS1xtscxHgR9p#CUJk1FuU#0T7NoLSRyZT01jZJiUUy" +
		"iCU7#F1kSCdS43w6Bx9vIUmv7$OUjmB7EfQy5phCtl9XBtfkD6Nu804OVQr1#ljvBuPqbHo" +
		"ACIF1ju9FnfXRm#SgYHoNZjpZmJo#pY0q#xeQEpiO$Ts0GQzh3r0BD9mq$RrHVoJ2tWbeVm" +
		"po6r0UZBLR0$weiUjhb9y6JGVDXLobYB4c5$YGDtpBqByK$5dGBfIH0tpRpBppZ1psdEzTr" +
		"3K$0DfZsWyNN0Vh3DYvobM$oiYkSBLf$rKnPUGTpqykR4UHBn0BLeE2kad7oESksIymzWFm" +
		"Rq0VOSm2WtibwZ#OCcBNim$r4w5ndjz1lngTBlqfoAdfSo3xA#ZFK7i2ujfxBTgmfnBAOQm" +
		"2pp0O3eNal9ckEHQ4O$VeFMtoPSA5eAgcZ3sSK3rSrdiG#LN$rg9gf0ySGlzOm$VROxYnuJ" +
		"tHPjOdzKmpzyknz1WTny1sHxR3d$jTPUMofLCqFQ6zxON$SSh77W1r1SqEbqkvr#2xp8n3d" +
		"aeU6UfFNHI18mCoNnLc0yOVYztd#TQbgusED$3dmN#sdmzUlvbtRKYEMeVAJfxm80QyoP3B" +
		"DlBlXS#J#erhZ2lUlAcclwyBHyIUf8L65hd8ep4Xpj9C3lBqTSkQyTSPUOq9UyvpIjUnbf#" +
		"OkP2Bg7l1SLxzd6hayesJvmyQ75qScw6h8ze$31#V4aLdYcljqiQOjYckESVfynZQS4xmrW" +
		"FXUUYznUxpuRdgRH6kJ#T1huaHx#qHVegqfxghtDd8cBtWlI#A$Tr3PTzYvonK5DBdFsFRw" +
		"mv#bowSUMcDwTTdb7CZnhOnVOTTvHoKsnMS9#K4sdkPSJYVfYQ2zmYNiSpvDU4Sz2t6MfcS" +
		"JTz7mJtBo8v7UIqAfUmwrurkPogUxzu9TZbjPNXVmWdxl9AO3xxLw9yTwlSEBgWlxTtey$2" +
		"1wEtEcIxnBPIR6BtlsppfCllCauHdgRKp#dZlTflx4r36SpVLF1TJ0owPeH5ZZXbCempcRu" +
		"mE$ImkwyAS42fJ2uCNpqJQ5shtxyUOwZWttGXUeo2#4ilHNZE6Jovr#U60uJXRStOq#P2iV" +
		"dOppYI#KeOg6xkEkdJtrsUtY74PhlbEHc2fvPAh7ofxcaQPVrGKMyv2NBfoBxyVHUO5q5vJ" +
		"rcVMioBwtzRdtC9iTs6OwC8OhNzAz76UcOPF3xKbPq9#WRlVXUbeXDwHHgwXgssNI$vuXFo" +
		"E6FXtXzSj3mKl5L1FgYSeub9TvRv1hLFhrKRrXa9cKg#fDUfLQNz5uMrSuIIedb8FuJvMMg" +
		"UfrUebzI9AduD#Lj$hztYir7TggfeIEAY#27mIE22IvLK5uTUfwt5le39LXZf3bLDbLHc57" +
		"A6oL6LLIPsZBbVObUfIDIOCsoKAvt5LKyerxBO0tiG3E7q5JWH#27ml$VBRENMHmbvHs3Fg" +
		"0gcVht16KZTB#IQZRwGQgeOed7NL813UQrMru5ot1Bu8V6xAyXiXLHLKHKfDL2xkZG970eT" +
		"XtQs1Zu4uHNfA1iSd2xg3ffOgzxFLMUfAATMI#nKgNtWBkTyfzpk26kvHTmjlfLhZdgUkLV" +
		"LLFNMDkbfTfUggEggskWlj9VGSoX$uAl2byOYk9mK#3HmArXBbdX0u5lZMjFWCzmQ#2Nnjv" +
		"iDxhD8Z$WeWEmH#DAsCCfe39mEd0Zy5VZBZ44TgX1gbiF$LWw1#8jjRxhqKJlogZyn#FF2T" +
		"QYojQQeqxgLKUj0#lBSgd8$L0AcT5pWQ#4nb1turLk3DCl0RwES0pYxgN3LQLLJ7rGyeuso" +
		"kW5bzfNvKmADs6tq7rSTgbqASgNtg0uLJkdfVlQS#0TyJd1Fl7Eepb$n#ANseFb97moBtc9" +
		"71kunwNarI4zLIjPp2BhKGjCHLNm2Qf#QhPzKAgJ#dvk0#MyrIpwYPqZ93xjFLN3DYbNfSJ" +
		"LOdn5$Vgasc5U$YwdxL4tSyALHtK3VrWFGygXvHunNUqnJUNr4Ufy9#hQpQgCwgey9xhRfF" +
		"jSNzfFfJ$I4zlylzDxd$gl3spbL9hrPlOdeNgMqDkFwUwmHmJJFHDfDyz0nvIV$$juQXRJZ" +
		"fDCBqY9158r0VWV8yyjDyIg9PQEll8drU70ckVRG4Sala5pa4Oj8UMW6kyyTOSEGI4CltuV" +
		"MtwhT3TWx6QjBUceisfpuRz1ZgZq56lnUiH7a0nlL0EzuvGKnuhmSnuKmEOiBxA8ZfDI6Bi" +
		"AuWffSeXNQYFX5bcqBbruLqtHDiMoZV1DP$ZsHQAsIH$itUQfGN0CC2#6iToklGhd#djnxb" +
		"oVADtWHw0kKdC7uW#43q3vHVdZ38eYxWNL3ND0dr9y4rZKAxffSDlM5elA4DGleRz$eNf4n" +
		"JC7OAwelasy4Cyj0Tu6#H$dy3Ql9GB$JftTa7l2lQ7EgCUcVWjqdNFKATKEw4lljGlXyq2F" +
		"L1P1dooAzBHwFjAI4FxK8xdh4WfccaVmb38AOTwDi8lX5y4$Wc#TOmazw$ky7rj#RrtzlUb" +
		"B9FwfjHtYpVbBTfEUdVjX68IUUSVk2BuLiyyq7w##a#K28eYRQYRol6J0TrHBaZE78zYEbU" +
		"wBu7F1ur4$A0VDGSPPiiK2B80$85#JRetYRzNb22wRDClqLteSycZ$0Mu7UZ$MxmEr6$4#M" +
		"Mu2rHpmEFHaE4B9e1FWDoxJ1NEzJRIJa1v0CbHfJzHiv7RS7R2ay09Rfu4iXFhT7V6lsjqT" +
		"uQxI6U1F9JJypR4tEr0jUqnL1VG#CCFMpeGKEl6bfbw4L3xU6pzk0TX2pQyt$UaJIy");

/*******************************************************
 *  Inject code for custom error handling in the parser class.
 *******************************************************/
  // all errors encountered during parsing is stored in the array parseProblems. This includes lexical, syntactical and semantic error (multiple initialization actors et.c.)
  public java.util.TreeSet<String> parseProblems = new TreeSet<String>();
  public void newError(String msg, Symbol token){
      parseProblems.add(msg + " At row " + Symbol.getLine(token.getStart()) + ", column " + Symbol.getColumn(token.getStart()));
  };
  public void printParseProblems(){ printParseProblems(System.err); }
  public void printParseProblems(PrintStream out){
    out.println("number of problems: " + parseProblems.size());
    for(String msg : parseProblems){
      out.println("ERROR: " + msg);
    }
  }

  // parser plug-in methods that are called when the parser encounters a syntactical problem
  class Events extends Parser.Events {
    public void scannerError(Scanner.Exception e) {
      parseProblems.add(e.getMessage());
    }
    public void syntaxError(Symbol token) {
      // This method is always called when a problem is encountered, even if it is repaired.
      // beaver.Parser$Exception is thrown if recovery fails.
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("unexpected token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
    public void unexpectedTokenRemoved(Symbol token) {
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("parser recovered after removing token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
    public void missingTokenInserted(Symbol token) {
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("parser recovered after inserting token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
    public void misspelledTokenReplaced(Symbol token) {
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("parser recovered after replacing token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
    public void errorPhraseRemoved(Symbol token) {
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("parser recovered after removing token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
  }

  {
    // initialization, before the constructor
    report = new Events(); // Use error handler in parser
  }

/*******************************************************
 *  Help routine that parses a file, given its name.
 *  A compilation unit is always returned, containing all parseProblems encountered during parsing.
 *  If a Parser.exception is thrown a CompilationUnit with an empty AST is returned.
 *******************************************************/
  private Actor makeEmptyActor(File file){
    String name;
    int lastPeriodPos = file.getName().lastIndexOf('.');
    if(lastPeriodPos >=0){
      name = file.getName().substring(0, lastPeriodPos);
    } else {
      name = file.getName();
    }
    return new Actor(name, null, null, null, null, null, null, null, null, null, null, null, null);   
  }
  
  public net.opendf.ir.cal.Actor parse(String path, String fileName){
    return parse(new java.io.File(path + "/" + fileName));
  }
  public net.opendf.ir.cal.Actor parse(File file){
     Actor actor;
     parseProblems = new TreeSet<String>();
     java.io.FileReader fr = null;
     try {
       try{
         fr = new java.io.FileReader(file);
  	     CalScanner scanner = new CalScanner(new java.io.BufferedReader(fr));
         actor = (Actor)parse(scanner);
       } catch(CalParser.Exception e) {
         // build empty compilation unit for failed error recovery
         // The problem is added to parseProblems[] by the syntaxError() method added to the parser above.
         actor = makeEmptyActor(file);
       } finally {
         if(fr != null){
           fr.close();
         }
       }
     } catch (java.io.FileNotFoundException e){
       parseProblems.add("file not found: " + e.getMessage());
       actor = makeEmptyActor(file);
//       actor.setFileNotFound(true);
     } catch (java.io.IOException e){
       parseProblems.add("error reading file: " + e.getMessage());
       actor = makeEmptyActor(file);
     }
//     actor.setSourceFile(file);
//     actor.parseProblems = parseProblems;
     return actor;
   }

  private enum ActionPartKind{ GUARD, DECL_LIST, DELAY; }
  private enum ActorPartKind{ DECL_VAR, INIT_ACTION, ACTION, FSM_SCHEDULE, PRIORITY, INVARIANT_LIST; }

  /****************************************************************************
   * Needed by CommonParser.beaver
   * Repeated in both NlParser.beaver and CalParser.beaver
   ***************************************************************************/
  private GeneratorFilter makeGeneratorFilter(TypeExpr type, ImmutableList<String> varList, Expression e, ImmutableList<Expression> filterList){
    ImmutableList.Builder<DeclVar> vars = ImmutableList.builder();
    for(String var : varList){
      vars.add(new DeclVar(type, var, null));
    }
    return new GeneratorFilter(vars.build(), e, filterList);
  }
  class ParenthesSymbol extends Symbol{ // used by the parser to wrap subexpressions that are enclosed by parentheses, i.e. do not add them to a ExprBinaryOp sequence.
     ParenthesSymbol(Symbol s){
       super(s.getId(), s.getStart(), s.getEnd(), s.value);
     }
  }
  
  private LValue expressionToLValue(Expression expression) {
    if (expression instanceof ExprVariable) {
      return new LValueVariable(((ExprVariable) expression).getVariable());
    } else if (expression instanceof ExprIndexer) {
      ExprIndexer exprIndexer = (ExprIndexer) expression;
      LValue structure = expressionToLValue(exprIndexer.getStructure());
      if (structure == null) return null;
      return new LValueIndexer(structure, exprIndexer.getIndex());
    } else if (expression instanceof ExprField) {
      ExprField exprField = (ExprField) expression;
      LValue structure = expressionToLValue(exprField.getStructure());
      if (structure == null) return null;
      return new LValueField(structure, exprField.getField());
    } else {
      return null;
    }
  }

	public CalParser() {
		super(PARSING_TABLES);
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 2: // goal = actor_decl.actor_decl end_actor opt$SEMICOLON
			{
					final Symbol _symbol_actor_decl = _symbols[offset + 1];
					final Actor actor_decl = (Actor) _symbol_actor_decl.value;
					 return _symbol_actor_decl;
			}
			case 3: // import_list = import_part.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					 ArrayList l = new ArrayList(); l.add(i); return new Symbol(l);
			}
			case 4: // import_list = import_list.l import_part.i
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList l = (ArrayList) _symbol_l.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final String i = (String) _symbol_i.value;
					 l.add(i); return _symbol_l;
			}
			case 5: // import_part = import_single.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					 return _symbol_i;
			}
			case 6: // import_part = import_group.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					 return _symbol_i;
			}
			case 7: // import_single = IMPORT qual_id.qual_id SEMICOLON
			{
					final Symbol _symbol_qual_id = _symbols[offset + 2];
					final ArrayList qual_id = (ArrayList) _symbol_qual_id.value;
					 return new Symbol(null);
			}
			case 8: // import_single = IMPORT qual_id.qual_id EQ IDENTIFIER.alias SEMICOLON
			{
					final Symbol _symbol_qual_id = _symbols[offset + 2];
					final ArrayList qual_id = (ArrayList) _symbol_qual_id.value;
					final Symbol alias = _symbols[offset + 4];
					 return new Symbol(null);
			}
			case 9: // import_group = IMPORT ALL qual_id.qual_id SEMICOLON
			{
					final Symbol _symbol_qual_id = _symbols[offset + 3];
					final ArrayList qual_id = (ArrayList) _symbol_qual_id.value;
					 return new Symbol(null);
			}
			case 14: // lst$action_head = action_head
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 15: // lst$action_head = lst$action_head action_head
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 18: // action_decl = opt$action_tag.tag ACTION.ACTION action_in_pattern_list.in_pattern_list PORTCONN opt$action_output_expression_list.out_expr_list opt$lst$action_head.head action_statement_body.body end_action opt$SEMICOLON
			{
					final Symbol _symbol_tag = _symbols[offset + 1];
					final QID tag = (QID) _symbol_tag.value;
					final Symbol ACTION = _symbols[offset + 2];
					final Symbol _symbol_in_pattern_list = _symbols[offset + 3];
					final ImmutableList.Builder in_pattern_list = (ImmutableList.Builder) _symbol_in_pattern_list.value;
					final Symbol _symbol_out_expr_list = _symbols[offset + 5];
					final ImmutableList.Builder out_expr_list = (ImmutableList.Builder) _symbol_out_expr_list.value;
					final Symbol _symbol_head = _symbols[offset + 6];
					final ArrayList _list_head = (ArrayList) _symbol_head.value;
					final Map.Entry[] head = _list_head == null ? new Map.Entry[0] : (Map.Entry[]) _list_head.toArray(new Map.Entry[_list_head.size()]);
					final Symbol _symbol_body = _symbols[offset + 7];
					final ImmutableList body = (ImmutableList) _symbol_body.value;
					
           // split the action head to it's parts
           ImmutableList.Builder<Expression> guardList = ImmutableList.builder();
           Expression delay = null;
           ImmutableList.Builder<DeclVar> declVarList = ImmutableList.builder();
           for(Map.Entry part : head){
             switch((ActionPartKind)part.getKey()){
               case GUARD:
                 guardList.addAll((Iterable)part.getValue());
                 break;
               case DECL_LIST:
                 declVarList.addAll((Iterable)part.getValue());
                 break;
               case DELAY:
                 if(delay != null){ parseProblems.add("multiple delays is not allowed in action, at " + Symbol.getLine(ACTION.getStart()) + ", " + Symbol.getColumn(ACTION.getStart())); }
                 delay = (Expression)part.getValue();
                 break;
             }
           }
            Action a = new Action(-1,              // id
                                  tag,             // tag
                                  in_pattern_list.build(), //inputPatterns
                                  out_expr_list == null ? null : out_expr_list.build(),   //outputExpressions
                                  null,            // typeDecls
                                  declVarList.build(),     // varDecls
                                  guardList.build(),       // guards 
                                  body,            // body
                                  delay,           // delay
                                  null,            // preconditions  NOTE, can not be expressed in CAL
                                  null);           // postconditions NOTE, can not be expressed in CAL
            return new Symbol(a);
			}
			case 19: // init_action_decl = opt$action_tag.tag INITIALIZE.INITIALIZE PORTCONN opt$action_output_expression_list.out_expr_list opt$lst$action_head.head action_statement_body.body end_action opt$SEMICOLON
			{
					final Symbol _symbol_tag = _symbols[offset + 1];
					final QID tag = (QID) _symbol_tag.value;
					final Symbol INITIALIZE = _symbols[offset + 2];
					final Symbol _symbol_out_expr_list = _symbols[offset + 4];
					final ImmutableList.Builder out_expr_list = (ImmutableList.Builder) _symbol_out_expr_list.value;
					final Symbol _symbol_head = _symbols[offset + 5];
					final ArrayList _list_head = (ArrayList) _symbol_head.value;
					final Map.Entry[] head = _list_head == null ? new Map.Entry[0] : (Map.Entry[]) _list_head.toArray(new Map.Entry[_list_head.size()]);
					final Symbol _symbol_body = _symbols[offset + 6];
					final ImmutableList body = (ImmutableList) _symbol_body.value;
					 
           // split the action head to it's parts
           ImmutableList.Builder<Expression> guardList = ImmutableList.builder();
           Expression delay = null;
           ImmutableList.Builder<DeclVar> declVarList = ImmutableList.builder();
           for(Map.Entry part : head){
             switch((ActionPartKind)part.getKey()){
               case GUARD:
                 guardList.addAll((ArrayList)part.getValue());
                 break;
               case DECL_LIST:
                 declVarList.addAll((ArrayList<DeclVar>)part.getValue());
                 break;
               case DELAY:
                 if(delay != null){ parseProblems.add("multiple delays is not allowed in action, at " + Symbol.getLine(INITIALIZE.getStart()) + ", " + Symbol.getColumn(INITIALIZE.getStart())); }
                 delay = (Expression)part.getValue();
                 break;
             }
           }
            Action a = new Action(-1,                        // id
                                  tag,                       // tag
                                  null,       //inputPatterns
                                  out_expr_list==null ? null : out_expr_list.build(),  //outputExpressions
                                  null,                                              // typeDecls
                                  declVarList.build(),         // varDecls
                                  guardList.build(),          // guards 
                                  body,        // body
                                  delay,                      // delay
                                  null,         // preconditions  NOTE, can not be expressed in CAL
                                  null);        // postconditions NOTE, can not be expressed in CAL
            return new Symbol(a);
			}
			case 20: // action_tag = qual_id.n COLON
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final ArrayList n = (ArrayList) _symbol_n.value;
					 return new Symbol(new QID((String[])n.toArray(new String[n.size()])));
			}
			case 21: // action_head = GUARD expression_list.l
			{
					final Symbol _symbol_l = _symbols[offset + 2];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(new AbstractMap.SimpleEntry(ActionPartKind.GUARD, l.build()));
			}
			case 22: // action_head = VAR decl_list.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final ImmutableList.Builder d = (ImmutableList.Builder) _symbol_d.value;
					 return new Symbol(new AbstractMap.SimpleEntry(ActionPartKind.DECL_LIST, d.build()));
			}
			case 23: // action_head = DELAY expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(new AbstractMap.SimpleEntry(ActionPartKind.DELAY, e));
			}
			case 24: // action_statement_body = 
			{
					 return new Symbol(ImmutableList.empty());
			}
			case 25: // action_statement_body = DO statement_list_opt.s
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final ImmutableList s = (ImmutableList) _symbol_s.value;
					 return new Symbol(s);
			}
			case 26: // action_in_pattern_list = 
			{
					 return new Symbol(ImmutableList.builder());
			}
			case 27: // action_in_pattern_list = action_in_pattern.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final InputPattern p = (InputPattern) _symbol_p.value;
					 return new Symbol(ImmutableList.builder().add(p));
			}
			case 28: // action_in_pattern_list = action_in_pattern_list.l COMMA action_in_pattern.p
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final InputPattern p = (InputPattern) _symbol_p.value;
					 l.add(p); return _symbol_l;
			}
			case 37: // action_in_pattern = opt$port_name_colon.actor_port_name LBRACK opt$token_name_list.tokens RBRACK opt$repeat.r opt$channel_selector.c
			{
					final Symbol _symbol_actor_port_name = _symbols[offset + 1];
					final Port actor_port_name = (Port) _symbol_actor_port_name.value;
					final Symbol _symbol_tokens = _symbols[offset + 3];
					final ImmutableList.Builder tokens = (ImmutableList.Builder) _symbol_tokens.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Expression r = (Expression) _symbol_r.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final String c = (String) _symbol_c.value;
					 return new Symbol(new InputPattern(actor_port_name, tokens==null ? null : tokens.build(), r));
			}
			case 38: // token_name_list = IDENTIFIER.ID
			{
					final Symbol ID = _symbols[offset + 1];
					 return new Symbol(ImmutableList.builder().add(ID.value));
			}
			case 39: // token_name_list = token_name_list.l COMMA IDENTIFIER.ID
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol ID = _symbols[offset + 3];
					 l.add(ID.value); return _symbol_l;
			}
			case 40: // channel_selector = AT expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(null);
			}
			case 41: // channel_selector = ATSTAR expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(null);
			}
			case 44: // channel_selector = opt$ATSTAR ANY
			{
					 return new Symbol(null);
			}
			case 45: // channel_selector = opt$ATSTAR ALL
			{
					 return new Symbol(null);
			}
			case 46: // repeat = REPEAT expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return _symbol_e;
			}
			case 47: // action_output_expression_list = action_output_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final OutputExpression e = (OutputExpression) _symbol_e.value;
					 return new Symbol(ImmutableList.builder().add(e));
			}
			case 48: // action_output_expression_list = action_output_expression_list.l COMMA action_output_expression.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final OutputExpression e = (OutputExpression) _symbol_e.value;
					 l.add(e); return _symbol_l;
			}
			case 51: // action_output_expression = opt$port_name_colon.actor_port_name LBRACK opt$expression_list.values RBRACK opt$repeat.r opt$channel_selector.c
			{
					final Symbol _symbol_actor_port_name = _symbols[offset + 1];
					final Port actor_port_name = (Port) _symbol_actor_port_name.value;
					final Symbol _symbol_values = _symbols[offset + 3];
					final ImmutableList.Builder values = (ImmutableList.Builder) _symbol_values.value;
					final Symbol _symbol_r = _symbols[offset + 5];
					final Expression r = (Expression) _symbol_r.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final String c = (String) _symbol_c.value;
					 return new Symbol(new OutputExpression(actor_port_name, values == null ? null : values.build(), r));
			}
			case 52: // port_name_colon = IDENTIFIER.IDENTIFIER COLON
			{
					final Symbol IDENTIFIER = _symbols[offset + 1];
					 return new Symbol(new Port((String)IDENTIFIER.value));
			}
			case 61: // lst$actor_body = actor_body
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 62: // lst$actor_body = lst$actor_body actor_body
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 65: // actor_decl = opt$import_list.imports ACTOR IDENTIFIER.name opt$type_parameter_block.typePars LPAREN opt$actor_parameter_list.valuePars RPAREN port_decl_list_opt.in PORTCONN port_decl_list_opt.out opt$time.t COLON opt$lst$actor_body.body
			{
					final Symbol _symbol_imports = _symbols[offset + 1];
					final ArrayList imports = (ArrayList) _symbol_imports.value;
					final Symbol name = _symbols[offset + 3];
					final Symbol _symbol_typePars = _symbols[offset + 4];
					final ImmutableList typePars = (ImmutableList) _symbol_typePars.value;
					final Symbol _symbol_valuePars = _symbols[offset + 6];
					final ImmutableList.Builder valuePars = (ImmutableList.Builder) _symbol_valuePars.value;
					final Symbol _symbol_in = _symbols[offset + 8];
					final ImmutableList in = (ImmutableList) _symbol_in.value;
					final Symbol _symbol_out = _symbols[offset + 10];
					final ImmutableList out = (ImmutableList) _symbol_out.value;
					final Symbol _symbol_t = _symbols[offset + 11];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_body = _symbols[offset + 13];
					final ArrayList _list_body = (ArrayList) _symbol_body.value;
					final Map.Entry[] body = _list_body == null ? new Map.Entry[0] : (Map.Entry[]) _list_body.toArray(new Map.Entry[_list_body.size()]);
					
    ImmutableList.Builder varDecls = ImmutableList.builder();
    ImmutableList.Builder initializers = ImmutableList.builder();
    ImmutableList.Builder actions = ImmutableList.builder();
    ScheduleFSM scheduleFSM = null;
    ImmutableList.Builder priorities = ImmutableList.builder();
    ImmutableList.Builder invariants = ImmutableList.builder();
    for(Map.Entry part : body){
      switch((ActorPartKind)part.getKey()){
        case DECL_VAR:
          varDecls.add(part.getValue());
          break;
        case INIT_ACTION:
          initializers.add(part.getValue());
          break;
        case ACTION:
          actions.add(part.getValue());
          break;
        case FSM_SCHEDULE:
          scheduleFSM = (ScheduleFSM)part.getValue();
          break;
        case PRIORITY:
          priorities.addAll((Collection)part.getValue());
          break;
        case INVARIANT_LIST:
          invariants.addAll((Collection)part.getValue());
          break;
      }
    }
    Actor a = new Actor((String)name.value,
                         null,                 // NamespaceDecl namespace,
                         typePars,     // typePars,
                         valuePars == null ? null : valuePars.build(), // valuePars,
                         null,      // typeDecls, NOTE, can not be expressed in CAL
                         varDecls.build(),             // varDecls
                         in,
                         out,
                         initializers.build(),
                         actions.build(),
                         scheduleFSM,
                         priorities.build(),
                         invariants.build()
                        );
     
    return new Symbol(a);
			}
			case 66: // time = TIME type.t
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					 return _symbol_t;
			}
			case 67: // actor_body = action_decl.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Action a = (Action) _symbol_a.value;
					 return new Symbol(new AbstractMap.SimpleEntry(ActorPartKind.ACTION, a));
			}
			case 68: // actor_body = init_action_decl.a
			{
					final Symbol _symbol_a = _symbols[offset + 1];
					final Action a = (Action) _symbol_a.value;
					 return new Symbol(new AbstractMap.SimpleEntry(ActorPartKind.INIT_ACTION, a));
			}
			case 69: // actor_body = var_decl.d SEMICOLON
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return new Symbol(new AbstractMap.SimpleEntry(ActorPartKind.DECL_VAR, d));
			}
			case 70: // actor_body = fun_decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return new Symbol(new AbstractMap.SimpleEntry(ActorPartKind.DECL_VAR, d));
			}
			case 71: // actor_body = proc_decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return new Symbol(new AbstractMap.SimpleEntry(ActorPartKind.DECL_VAR, d));
			}
			case 72: // lst$pri_inequality_list = pri_inequality_list
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 73: // lst$pri_inequality_list = lst$pri_inequality_list pri_inequality_list
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 74: // actor_body = PRIORITY lst$pri_inequality_list.l END
			{
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final ImmutableList[] l = _list_l == null ? new ImmutableList[0] : (ImmutableList[]) _list_l.toArray(new ImmutableList[_list_l.size()]);
					 return new Symbol(new AbstractMap.SimpleEntry(ActorPartKind.PRIORITY, _list_l));
			}
			case 75: // actor_body = schedule.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ScheduleFSM s = (ScheduleFSM) _symbol_s.value;
					 return new Symbol(new AbstractMap.SimpleEntry(ActorPartKind.FSM_SCHEDULE, s));
			}
			case 76: // actor_body = invariant.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final ImmutableList i = (ImmutableList) _symbol_i.value;
					 return new Symbol(new AbstractMap.SimpleEntry(ActorPartKind.INVARIANT_LIST, i));
			}
			case 77: // invariant = INVARIANT expression_list.l end_invariant
			{
					final Symbol _symbol_l = _symbols[offset + 2];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(l.build());
			}
			case 80: // lst$fsm_state_transitions = fsm_state_transitions
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 81: // lst$fsm_state_transitions = lst$fsm_state_transitions fsm_state_transitions
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 84: // schedule = SCHEDULE opt$FSM IDENTIFIER.ID COLON opt$lst$fsm_state_transitions.trans end_schedule
			{
					final Symbol ID = _symbols[offset + 3];
					final Symbol _symbol_trans = _symbols[offset + 5];
					final ArrayList _list_trans = (ArrayList) _symbol_trans.value;
					final ImmutableList.Builder[] trans = _list_trans == null ? new ImmutableList.Builder[0] : (ImmutableList.Builder[]) _list_trans.toArray(new ImmutableList.Builder[_list_trans.size()]);
					  ImmutableList.Builder tl = trans[0];
          for(int i=1; i<trans.length; i++){
            tl.addAll(trans[i].build());
          }
          return new Symbol(new ScheduleFSM(tl.build(), (String)ID.value));
			}
			case 85: // schedule = SCHEDULE.SCHEDULE REGEXP regexpr.r end_schedule
			{
					final Symbol SCHEDULE = _symbols[offset + 1];
					final Symbol _symbol_r = _symbols[offset + 3];
					final AbstractIRNode r = (AbstractIRNode) _symbol_r.value;
					 parseProblems.add("Regular expression schedules are not supported, at " + Symbol.getLine(SCHEDULE.getStart()) + ", " + Symbol.getColumn(SCHEDULE.getStart())); return new Symbol(null);
			}
			case 86: // lst$fsm_state_target = fsm_state_target
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 87: // lst$fsm_state_target = lst$fsm_state_target fsm_state_target
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 90: // fsm_state_transitions = IDENTIFIER.Src_state LPAREN action_tag_list.tags RPAREN EDGE IDENTIFIER.Dst_state opt$lst$fsm_state_target.more SEMICOLON
			{
					final Symbol Src_state = _symbols[offset + 1];
					final Symbol _symbol_tags = _symbols[offset + 3];
					final ImmutableList.Builder tags = (ImmutableList.Builder) _symbol_tags.value;
					final Symbol Dst_state = _symbols[offset + 6];
					final Symbol _symbol_more = _symbols[offset + 7];
					final ArrayList _list_more = (ArrayList) _symbol_more.value;
					final Transition[] more = _list_more == null ? new Transition[0] : (Transition[]) _list_more.toArray(new Transition[_list_more.size()]);
					 ImmutableList.Builder result = ImmutableList.builder();
          String startState = (String)Src_state.value;
          result.add(new Transition(startState,
                                    (String)Dst_state.value,
                                    tags.build())); 
          for(Transition t : more){
            result.add(new Transition(startState, t.getDestinationState(), t.getActionTags()));
          }
          return new Symbol(result);
			}
			case 91: // fsm_state_target = BAR LPAREN action_tag_list.tags RPAREN EDGE IDENTIFIER.Dst_state
			{
					final Symbol _symbol_tags = _symbols[offset + 3];
					final ImmutableList.Builder tags = (ImmutableList.Builder) _symbol_tags.value;
					final Symbol Dst_state = _symbols[offset + 6];
					 return new Symbol(new Transition(null,  // the start state is unknown. This is filled in later.
                                           (String)Dst_state.value,
                                           tags.build()));
			}
			case 92: // action_tag_list = qual_id.id
			{
					final Symbol _symbol_id = _symbols[offset + 1];
					final ArrayList id = (ArrayList) _symbol_id.value;
					 return new Symbol(ImmutableList.builder().add(new QID((String[])id.toArray(new String[id.size()]))));
			}
			case 93: // action_tag_list = action_tag_list.l COMMA qual_id.id
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_id = _symbols[offset + 3];
					final ArrayList id = (ArrayList) _symbol_id.value;
					 l.add(new QID((String[])id.toArray(new String[id.size()]))); return _symbol_l;
			}
			case 94: // regexpr = regexpr_kleene.r
			{
					final Symbol _symbol_r = _symbols[offset + 1];
					final AbstractIRNode r = (AbstractIRNode) _symbol_r.value;
					 return new Symbol(null);
			}
			case 95: // regexpr = regexpr.r1 regexpr_kleene.r2
			{
					final Symbol _symbol_r1 = _symbols[offset + 1];
					final AbstractIRNode r1 = (AbstractIRNode) _symbol_r1.value;
					final Symbol _symbol_r2 = _symbols[offset + 2];
					final AbstractIRNode r2 = (AbstractIRNode) _symbol_r2.value;
					 return new Symbol(null);
			}
			case 96: // regexpr = regexpr.r1 BAR regexpr_kleene.r2
			{
					final Symbol _symbol_r1 = _symbols[offset + 1];
					final AbstractIRNode r1 = (AbstractIRNode) _symbol_r1.value;
					final Symbol _symbol_r2 = _symbols[offset + 3];
					final AbstractIRNode r2 = (AbstractIRNode) _symbol_r2.value;
					 return new Symbol(null);
			}
			case 97: // regexpr_kleene = regexpr_simple.r
			{
					final Symbol _symbol_r = _symbols[offset + 1];
					final AbstractIRNode r = (AbstractIRNode) _symbol_r.value;
					 return new Symbol(null);
			}
			case 98: // regexpr_kleene = regexpr_simple.r MULT
			{
					final Symbol _symbol_r = _symbols[offset + 1];
					final AbstractIRNode r = (AbstractIRNode) _symbol_r.value;
					 return new Symbol(null);
			}
			case 99: // regexpr_simple = qual_id.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final ArrayList n = (ArrayList) _symbol_n.value;
					 return new Symbol(null);
			}
			case 100: // regexpr_simple = LPAREN regexpr.r RPAREN
			{
					final Symbol _symbol_r = _symbols[offset + 2];
					final AbstractIRNode r = (AbstractIRNode) _symbol_r.value;
					 return new Symbol(null);
			}
			case 101: // regexpr_simple = LBRACK regexpr.r RBRACK
			{
					final Symbol _symbol_r = _symbols[offset + 2];
					final AbstractIRNode r = (AbstractIRNode) _symbol_r.value;
					 return new Symbol(null);
			}
			case 102: // pri_inequality_list = pri_inequality.p SEMICOLON
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final ImmutableList.Builder p = (ImmutableList.Builder) _symbol_p.value;
					 return new Symbol(p.build());
			}
			case 103: // pri_inequality = qual_id.high GT qual_id.low
			{
					final Symbol _symbol_high = _symbols[offset + 1];
					final ArrayList high = (ArrayList) _symbol_high.value;
					final Symbol _symbol_low = _symbols[offset + 3];
					final ArrayList low = (ArrayList) _symbol_low.value;
					 return new Symbol(ImmutableList.builder().add(new QID((String[])high.toArray(new String[high.size()]))).add(new QID((String[])low.toArray(new String[low.size()]))));
			}
			case 104: // pri_inequality = pri_inequality.l GT qual_id.n
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final ArrayList n = (ArrayList) _symbol_n.value;
					 l.add(new QID((String[])n.toArray(new String[n.size()]))); return _symbol_l;
			}
			case 113: // actor_parameter_list = actor_parameter.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final ParDeclValue p = (ParDeclValue) _symbol_p.value;
					 return new Symbol(ImmutableList.builder().add(p));
			}
			case 114: // actor_parameter_list = actor_parameter_list.l COMMA actor_parameter.p
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final ParDeclValue p = (ParDeclValue) _symbol_p.value;
					 l.add(p); return _symbol_l;
			}
			case 117: // actor_parameter = IDENTIFIER.id opt$actor_parameter_init_expression.e
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(new ParDeclValue((String)id.value, null));
			}
			case 118: // actor_parameter = type.t IDENTIFIER.id opt$actor_parameter_init_expression.e
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(new ParDeclValue((String)id.value, t));
			}
			case 119: // actor_parameter_init_expression = EQ expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return _symbol_e;
			}
			case 120: // qual_id = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 ArrayList l = new ArrayList(); l.add(id.value); return new Symbol(l);
			}
			case 121: // qual_id = IDENTIFIER.id DOT qual_id.l
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 3];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, id.value); return _symbol_l;
			}
			case 122: // variable = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(Variable.namedVariable((String) id.value));
			}
			case 123: // field = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(new Field((String) id.value));
			}
			case 124: // decl_list = decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return new Symbol(ImmutableList.builder().add(d));
			}
			case 125: // decl_list = decl_list.l COMMA decl.d
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 l.add(d); return _symbol_l;
			}
			case 126: // decl_block = VAR decl_list.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final ImmutableList.Builder d = (ImmutableList.Builder) _symbol_d.value;
					 return new Symbol(d.build());
			}
			case 127: // decl_block_opt = 
			{
					 return new Symbol(ImmutableList.empty());
			}
			case 128: // decl_block_opt = VAR decl_list.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final ImmutableList.Builder d = (ImmutableList.Builder) _symbol_d.value;
					 return new Symbol(d.build());
			}
			case 129: // decl = var_decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return _symbol_d;
			}
			case 130: // decl = fun_decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return _symbol_d;
			}
			case 131: // decl = proc_decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return _symbol_d;
			}
			case 132: // var_decl = MUTABLE var_name_type.v
			{
					final Symbol _symbol_v = _symbols[offset + 2];
					final DeclVar v = (DeclVar) _symbol_v.value;
					 return new Symbol(new DeclVar(v.getType(), v.getName(), null, null, true));
			}
			case 133: // var_decl = MUTABLE var_name_type.v EQ expression.init
			{
					final Symbol _symbol_v = _symbols[offset + 2];
					final DeclVar v = (DeclVar) _symbol_v.value;
					final Symbol _symbol_init = _symbols[offset + 4];
					final Expression init = (Expression) _symbol_init.value;
					 return new Symbol(new DeclVar(v.getType(), v.getName(), null, init, false));
			}
			case 134: // var_decl = MUTABLE var_name_type.v EQCOLON expression.init
			{
					final Symbol _symbol_v = _symbols[offset + 2];
					final DeclVar v = (DeclVar) _symbol_v.value;
					final Symbol _symbol_init = _symbols[offset + 4];
					final Expression init = (Expression) _symbol_init.value;
					 return new Symbol(new DeclVar(v.getType(), v.getName(), null, init, true));
			}
			case 135: // var_decl = var_name_type.v
			{
					final Symbol _symbol_v = _symbols[offset + 1];
					final DeclVar v = (DeclVar) _symbol_v.value;
					 return new Symbol(new DeclVar(v.getType(), v.getName(), null, null, true));
			}
			case 136: // var_decl = var_name_type.v EQ expression.init
			{
					final Symbol _symbol_v = _symbols[offset + 1];
					final DeclVar v = (DeclVar) _symbol_v.value;
					final Symbol _symbol_init = _symbols[offset + 3];
					final Expression init = (Expression) _symbol_init.value;
					 return new Symbol(new DeclVar(v.getType(), v.getName(), null, init, false));
			}
			case 137: // var_decl = var_name_type.v COLONEQ expression.init
			{
					final Symbol _symbol_v = _symbols[offset + 1];
					final DeclVar v = (DeclVar) _symbol_v.value;
					final Symbol _symbol_init = _symbols[offset + 3];
					final Expression init = (Expression) _symbol_init.value;
					 return new Symbol(new DeclVar(v.getType(), v.getName(), null, init, true));
			}
			case 138: // var_name_type = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(new DeclVar(null, (String)id.value, null));
			}
			case 139: // var_name_type = type.type IDENTIFIER.id
			{
					final Symbol _symbol_type = _symbols[offset + 1];
					final TypeExpr type = (TypeExpr) _symbol_type.value;
					final Symbol id = _symbols[offset + 2];
					 return new Symbol(new DeclVar(type, (String)id.value, null));
			}
			case 140: // fun_decl = FUNCTION IDENTIFIER.id lambda_expr_body.lambda
			{
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_lambda = _symbols[offset + 3];
					final ExprLambda lambda = (ExprLambda) _symbol_lambda.value;
					 return new Symbol(new DeclVar(null, (String)id.value, null, lambda, false));
			}
			case 141: // proc_decl = PROCEDURE IDENTIFIER.id procedure_expr_body.body
			{
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_body = _symbols[offset + 3];
					final ExprProc body = (ExprProc) _symbol_body.value;
					 return new Symbol(new DeclVar(null, (String)id.value, null, body, false));
			}
			case 142: // port_decl = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(new PortDecl((String)id.value, null));
			}
			case 143: // port_decl = type.type IDENTIFIER.id
			{
					final Symbol _symbol_type = _symbols[offset + 1];
					final TypeExpr type = (TypeExpr) _symbol_type.value;
					final Symbol id = _symbols[offset + 2];
					 return new Symbol(new PortDecl((String)id.value, type));
			}
			case 144: // port_decl = MULTI IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 2];
					 return new Symbol(new PortDecl((String)id.value, null));
			}
			case 145: // port_decl = MULTI type.type IDENTIFIER.id
			{
					final Symbol _symbol_type = _symbols[offset + 2];
					final TypeExpr type = (TypeExpr) _symbol_type.value;
					final Symbol id = _symbols[offset + 3];
					 return new Symbol(new PortDecl((String)id.value, type));
			}
			case 146: // port_decl_list_opt = 
			{
					 return new Symbol(null);
			}
			case 147: // port_decl_list_opt = port_decl_list.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(l.build());
			}
			case 148: // port_decl_list = port_decl.port_decl
			{
					final Symbol _symbol_port_decl = _symbols[offset + 1];
					final PortDecl port_decl = (PortDecl) _symbol_port_decl.value;
					 return new Symbol(ImmutableList.builder().add(port_decl));
			}
			case 149: // port_decl_list = port_decl_list.l COMMA port_decl.d
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final PortDecl d = (PortDecl) _symbol_d.value;
					 l.add(d); return _symbol_l;
			}
			case 150: // type_bound = LT type.type
			{
					final Symbol _symbol_type = _symbols[offset + 2];
					final TypeExpr type = (TypeExpr) _symbol_type.value;
					 return _symbol_type;
			}
			case 151: // type_bound_opt = 
			{
					 return new Symbol(null);
			}
			case 152: // type_bound_opt = type_bound.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final TypeExpr n = (TypeExpr) _symbol_n.value;
					 return _symbol_n;
			}
			case 153: // type_parameter = IDENTIFIER.id type_bound_opt.type_bound
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_type_bound = _symbols[offset + 2];
					final TypeExpr type_bound = (TypeExpr) _symbol_type_bound.value;
					 return new Symbol(new ParDeclType((String)id.value));
			}
			case 156: // type_parameter_block = LBRACK opt$type_parameter_list.l RBRACK
			{
					final Symbol _symbol_l = _symbols[offset + 2];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(l == null ? null : l.build());
			}
			case 157: // type_parameter_list = type_parameter.tp
			{
					final Symbol _symbol_tp = _symbols[offset + 1];
					final ParDeclType tp = (ParDeclType) _symbol_tp.value;
					 return new Symbol(ImmutableList.builder().add(tp));
			}
			case 158: // type_parameter_list = type_parameter_list.l COMMA type_parameter.tp
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_tp = _symbols[offset + 3];
					final ParDeclType tp = (ParDeclType) _symbol_tp.value;
					 l.add(tp); return _symbol_l;
			}
			case 159: // type_list = type.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					 return new Symbol(ImmutableList.builder().add(t));
			}
			case 160: // type_list = type_list.l COMMA type.t
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					 l.add(t); return _symbol_l;
			}
			case 161: // type = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(new TypeExpr((String)id.value));
			}
			case 164: // type = IDENTIFIER.id LPAREN opt$type_attribute_list.attributes RPAREN
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_attributes = _symbols[offset + 3];
					final ArrayList attributes = (ArrayList) _symbol_attributes.value;
					 ImmutableList.Builder valueParameters = ImmutableList.builder();
                                                                   ImmutableList.Builder typeParameters = ImmutableList.builder();
                                                                   for(Map.Entry map : (ArrayList<Map.Entry>)attributes){
                                                                     if(map.getValue() instanceof Expression){
                                                                       valueParameters.add(ImmutableEntry.of(map.getKey(), map.getValue()));
                                                                     } else {
                                                                       typeParameters.add(ImmutableEntry.of(map.getKey(), map.getValue()));
                                                                     }
                                                                   }
                                                                   return new Symbol(new TypeExpr((String)id.value, typeParameters.build(), valueParameters.build()));
			}
			case 167: // type = LBRACK opt$type_list.param EDGE type.result_type RBRACK
			{
					final Symbol _symbol_param = _symbols[offset + 2];
					final ImmutableList.Builder param = (ImmutableList.Builder) _symbol_param.value;
					final Symbol _symbol_result_type = _symbols[offset + 4];
					final TypeExpr result_type = (TypeExpr) _symbol_result_type.value;
					 return new Symbol(null);
			}
			case 168: // type = LBRACK opt$type_list.param EDGE RBRACK
			{
					final Symbol _symbol_param = _symbols[offset + 2];
					final ImmutableList.Builder param = (ImmutableList.Builder) _symbol_param.value;
					 return new Symbol(null);
			}
			case 169: // type_attribute_list = type_attribute.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Map.Entry t = (Map.Entry) _symbol_t.value;
					 ArrayList l = new ArrayList(); l.add(t); return new Symbol(l);
			}
			case 170: // type_attribute_list = type_attribute_list.l COMMA type_attribute.t
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList l = (ArrayList) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final Map.Entry t = (Map.Entry) _symbol_t.value;
					 l.add(t); return _symbol_l;
			}
			case 171: // type_attribute = IDENTIFIER.id COLON type.type
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_type = _symbols[offset + 3];
					final TypeExpr type = (TypeExpr) _symbol_type.value;
					 return new Symbol(new AbstractMap.SimpleEntry((String)id.value, type));
			}
			case 172: // type_attribute = IDENTIFIER.id EQ expression.e
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(new AbstractMap.SimpleEntry((String)id.value, e));
			}
			case 173: // edge_type = EDGE type.t
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					 return _symbol_t;
			}
			case 178: // procedure_expr_body = LPAREN opt$formal_parameter_list.param RPAREN opt$decl_block.decl stmt_block_opt.body end_proc
			{
					final Symbol _symbol_param = _symbols[offset + 2];
					final ImmutableList.Builder param = (ImmutableList.Builder) _symbol_param.value;
					final Symbol _symbol_decl = _symbols[offset + 4];
					final ImmutableList decl = (ImmutableList) _symbol_decl.value;
					final Symbol _symbol_body = _symbols[offset + 5];
					final ImmutableList body = (ImmutableList) _symbol_body.value;
					  return new Symbol(
            new ExprProc(
              null, 
              param==null ? ImmutableList.empty() : param.build(),
              new StmtBlock(null, decl, body)
            )
          );
			}
			case 179: // stmt_block_opt = 
			{
					 return new Symbol(ImmutableList.empty());
			}
			case 180: // stmt_block_opt = do_begin statement_list_opt.s
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final ImmutableList s = (ImmutableList) _symbol_s.value;
					 return _symbol_s;
			}
			case 181: // lambda_expr_body = LPAREN opt$formal_parameter_list.param RPAREN expression.body end_lambda
			{
					final Symbol _symbol_param = _symbols[offset + 2];
					final ImmutableList.Builder param = (ImmutableList.Builder) _symbol_param.value;
					final Symbol _symbol_body = _symbols[offset + 4];
					final Expression body = (Expression) _symbol_body.value;
					 return new Symbol(new ExprLambda(null,
                                             param==null ? null : param.build(),
                                             body,
                                             null));
			}
			case 182: // lambda_expr_body = LPAREN opt$formal_parameter_list.param RPAREN opt$decl_block.decl COLON expression.body end_lambda
			{
					final Symbol _symbol_param = _symbols[offset + 2];
					final ImmutableList.Builder param = (ImmutableList.Builder) _symbol_param.value;
					final Symbol _symbol_decl = _symbols[offset + 4];
					final ImmutableList decl = (ImmutableList) _symbol_decl.value;
					final Symbol _symbol_body = _symbols[offset + 6];
					final Expression body = (Expression) _symbol_body.value;
					 return new Symbol(new ExprLambda(null,
                                             param==null ? null : param.build(),
                                             new ExprLet(null, decl, body),
                                             null));
			}
			case 183: // lambda_expr_body = LPAREN opt$formal_parameter_list.param RPAREN edge_type.t opt$decl_block.decl COLON expression.body end_lambda
			{
					final Symbol _symbol_param = _symbols[offset + 2];
					final ImmutableList.Builder param = (ImmutableList.Builder) _symbol_param.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_decl = _symbols[offset + 5];
					final ImmutableList decl = (ImmutableList) _symbol_decl.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final Expression body = (Expression) _symbol_body.value;
					 return new Symbol(new ExprLambda(null,
                                             param==null ? null : param.build(),
                                             new ExprLet(null, decl, body),
                                             t));
			}
			case 184: // map_list = map_entry.m
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final Map.Entry m = (Map.Entry) _symbol_m.value;
					 return new Symbol(ImmutableList.builder().add(m));
			}
			case 185: // map_list = map_list.l COMMA map_entry.m
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 3];
					final Map.Entry m = (Map.Entry) _symbol_m.value;
					 l.add(m); return _symbol_l;
			}
			case 186: // map_entry = expression.e1 ARROW expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expression e1 = (Expression) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expression e2 = (Expression) _symbol_e2.value;
					 return new Symbol(new AbstractMap.SimpleEntry(e1, e2));
			}
			case 187: // expression_list = expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(ImmutableList.builder().add(e));
			}
			case 188: // expression_list = expression_list.l COMMA expression.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expression e = (Expression) _symbol_e.value;
					 l.add(e); return _symbol_l;
			}
			case 189: // expression_list_opt = 
			{
					 return new Symbol(ImmutableList.empty());
			}
			case 190: // expression_list_opt = expression_list.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final ImmutableList.Builder n = (ImmutableList.Builder) _symbol_n.value;
					 return new Symbol(n.build());
			}
			case 191: // method_invocation = indexing_expression.function LPAREN expression_list_opt.args RPAREN
			{
					final Symbol _symbol_function = _symbols[offset + 1];
					final Expression function = (Expression) _symbol_function.value;
					final Symbol _symbol_args = _symbols[offset + 3];
					final ImmutableList args = (ImmutableList) _symbol_args.value;
					 return new Symbol(new ExprApplication(function, args));
			}
			case 192: // literal = INTEGER_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.Kind.Integer, ((String)txt.value)));
			}
			case 193: // literal = LONG_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.Kind.Integer, ((String)txt.value)));
			}
			case 194: // literal = FLOATING_POINT_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.Kind.Integer, ((String)txt.value)));
			}
			case 195: // literal = DOUBLE_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.Kind.Real, ((String)txt.value)));
			}
			case 196: // literal = TRUE_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.Kind.True, ((String)txt.value)));
			}
			case 197: // literal = FALSE_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.Kind.False, ((String)txt.value)));
			}
			case 198: // literal = CHARACTER_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.Kind.Char, ((String)txt.value)));
			}
			case 199: // literal = STRING_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.Kind.String, ((String)txt.value)));
			}
			case 200: // literal = NULL_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.Kind.Null, ((String)txt.value)));
			}
			case 201: // primary = literal.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ExprLiteral l = (ExprLiteral) _symbol_l.value;
					 return _symbol_l;
			}
			case 202: // primary = LPAREN expression.e RPAREN
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return new ParenthesSymbol(_symbol_e);
			}
			case 203: // primary = LPAREN.start expression.e DOUBLECOLON type.t RPAREN
			{
					final Symbol start = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					 parseProblems.add("Type assertion is not supported. Assertion is ignored at " + Symbol.getLine(start.getStart()) + ", " + Symbol.getColumn(start.getStart()));
			}
			case 204: // simple_expression = primary.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final Expression p = (Expression) _symbol_p.value;
					 return _symbol_p;
			}
			case 205: // simple_expression = variable.v
			{
					final Symbol _symbol_v = _symbols[offset + 1];
					final Variable v = (Variable) _symbol_v.value;
					 return new Symbol(new ExprVariable(v));
			}
			case 206: // simple_expression = OLD variable.v
			{
					final Symbol _symbol_v = _symbols[offset + 2];
					final Variable v = (Variable) _symbol_v.value;
					 return new Symbol(new ExprVariable(v));
			}
			case 207: // simple_expression = IF expression.c THEN expression.e1 ELSE expression.e2 END
			{
					final Symbol _symbol_c = _symbols[offset + 2];
					final Expression c = (Expression) _symbol_c.value;
					final Symbol _symbol_e1 = _symbols[offset + 4];
					final Expression e1 = (Expression) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 6];
					final Expression e2 = (Expression) _symbol_e2.value;
					 return new Symbol(new ExprIf(c, e1, e2));
			}
			case 208: // simple_expression = LBRACE expression_list_opt.e RBRACE
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final ImmutableList e = (ImmutableList) _symbol_e.value;
					 return new Symbol(new ExprSet(e));
			}
			case 209: // simple_expression = LBRACE expression_list_opt.e COLON for_generator_list.l RBRACE
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final ImmutableList e = (ImmutableList) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(new ExprSet(e, l.build()));
			}
			case 210: // simple_expression = LBRACK expression_list_opt.e RBRACK
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final ImmutableList e = (ImmutableList) _symbol_e.value;
					 return new Symbol(new ExprList(e));
			}
			case 211: // simple_expression = LBRACK expression_list_opt.e COLON for_generator_list.l RBRACK
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final ImmutableList e = (ImmutableList) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(new ExprList(e, l.build()));
			}
			case 214: // simple_expression = MAP LBRACE opt$map_list.m RBRACE
			{
					final Symbol _symbol_m = _symbols[offset + 3];
					final ImmutableList.Builder m = (ImmutableList.Builder) _symbol_m.value;
					 return new Symbol(new ExprMap(m==null? null : m.build()));
			}
			case 215: // simple_expression = MAP LBRACE opt$map_list.m COLON for_generator_list.generators RBRACE
			{
					final Symbol _symbol_m = _symbols[offset + 3];
					final ImmutableList.Builder m = (ImmutableList.Builder) _symbol_m.value;
					final Symbol _symbol_generators = _symbols[offset + 5];
					final ImmutableList.Builder generators = (ImmutableList.Builder) _symbol_generators.value;
					 return new Symbol(new ExprMap(m==null? null : m.build(), generators.build()));
			}
			case 216: // simple_expression = LET decl_list.l COLON expression.e end_let
			{
					final Symbol _symbol_l = _symbols[offset + 2];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(new ExprLet(null, l.build(), e));
			}
			case 217: // simple_expression = LAMBDA lambda_expr_body.lambda
			{
					final Symbol _symbol_lambda = _symbols[offset + 2];
					final ExprLambda lambda = (ExprLambda) _symbol_lambda.value;
					 return _symbol_lambda;
			}
			case 218: // simple_expression = CONST LAMBDA lambda_expr_body.lambda
			{
					final Symbol _symbol_lambda = _symbols[offset + 3];
					final ExprLambda lambda = (ExprLambda) _symbol_lambda.value;
					 return _symbol_lambda;
			}
			case 219: // simple_expression = PROC procedure_expr_body.p
			{
					final Symbol _symbol_p = _symbols[offset + 2];
					final ExprProc p = (ExprProc) _symbol_p.value;
					 return _symbol_p;
			}
			case 220: // indexing_expression = simple_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expression e = (Expression) _symbol_e.value;
					 return _symbol_e;
			}
			case 221: // indexing_expression = indexer.i
			{
					final Symbol i = _symbols[offset + 1];
					 return i;
			}
			case 222: // indexing_expression = indexing_expression.p DOT field.f
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final Expression p = (Expression) _symbol_p.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final Field f = (Field) _symbol_f.value;
					 return new Symbol(new ExprField(p, f));
			}
			case 223: // indexing_expression = method_invocation.m
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final ExprApplication m = (ExprApplication) _symbol_m.value;
					 return _symbol_m;
			}
			case 224: // indexer = indexer_start.s expression.i RBRACK
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final Expression s = (Expression) _symbol_s.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final Expression i = (Expression) _symbol_i.value;
					 return new Symbol(new ExprIndexer(s, i));
			}
			case 225: // indexer_start = indexing_expression.e LBRACK
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expression e = (Expression) _symbol_e.value;
					 return _symbol_e;
			}
			case 226: // indexer_start = indexer_start.s expression.i COMMA
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final Expression s = (Expression) _symbol_s.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final Expression i = (Expression) _symbol_i.value;
					 return new Symbol(new ExprIndexer(s, i));
			}
			case 227: // unary_expression = indexing_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expression e = (Expression) _symbol_e.value;
					 return _symbol_e;
			}
			case 228: // unary_expression = operator.operator unary_expression.expr
			{
					final Symbol _symbol_operator = _symbols[offset + 1];
					final String operator = (String) _symbol_operator.value;
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					 return new Symbol(new ExprUnaryOp(operator, expr));
			}
			case 229: // expression = unary_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expression e = (Expression) _symbol_e.value;
					 return _symbol_e;
			}
			case 230: // expression = expression.arg1 operator.operator unary_expression.arg2
			{
					final Symbol _symbol_arg1 = _symbols[offset + 1];
					final Expression arg1 = (Expression) _symbol_arg1.value;
					final Symbol _symbol_operator = _symbols[offset + 2];
					final String operator = (String) _symbol_operator.value;
					final Symbol _symbol_arg2 = _symbols[offset + 3];
					final Expression arg2 = (Expression) _symbol_arg2.value;
					 ImmutableList<String> operators;
                                                               ImmutableList<Expression> operands;
                                                               boolean arg1IsPar = _symbol_arg1 instanceof ParenthesSymbol;
                                                               if((arg1 instanceof ExprBinaryOp) && !(arg1IsPar)){
                                                                 ExprBinaryOp expr = (ExprBinaryOp)arg1;
                                                                 operators = ImmutableList.<String>builder().addAll(expr.getOperations()).add(operator).build();
                                                                 operands = ImmutableList.<Expression>builder().addAll(expr.getOperands()).add(arg2).build();
                                                               } else {
                                                                 operators = ImmutableList.of(operator);
                                                                 operands = ImmutableList.of(arg1, arg2);
                                                               }
                                                               return new Symbol(new ExprBinaryOp(operators, operands));
			}
			case 231: // operator = OPERATOR.op
			{
					final Symbol op = _symbols[offset + 1];
					 return op;
			}
			case 232: // operator = EQ.op
			{
					final Symbol op = _symbols[offset + 1];
					 return op;
			}
			case 233: // operator = IN.op
			{
					final Symbol op = _symbols[offset + 1];
					 return op;
			}
			case 234: // operator = GT.op
			{
					final Symbol op = _symbols[offset + 1];
					 return op;
			}
			case 235: // operator = MULT.op
			{
					final Symbol op = _symbols[offset + 1];
					 return op;
			}
			case 236: // operator = BAR.op
			{
					final Symbol op = _symbols[offset + 1];
					 return op;
			}
			case 237: // formal_parameter = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(new ParDeclValue((String)id.value, null));
			}
			case 238: // formal_parameter = type.t IDENTIFIER.id
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol id = _symbols[offset + 2];
					 return new Symbol(new ParDeclValue((String)id.value, t));
			}
			case 239: // formal_parameter_list = formal_parameter.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final ParDeclValue p = (ParDeclValue) _symbol_p.value;
					 return new Symbol(ImmutableList.builder().add(p));
			}
			case 240: // formal_parameter_list = formal_parameter_list.l COMMA formal_parameter.p
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final ParDeclValue p = (ParDeclValue) _symbol_p.value;
					 l.add(p);  return _symbol_l;
			}
			case 241: // statement = expression.lhs COLONEQ expression.value SEMICOLON
			{
					final Symbol _symbol_lhs = _symbols[offset + 1];
					final Expression lhs = (Expression) _symbol_lhs.value;
					final Symbol _symbol_value = _symbols[offset + 3];
					final Expression value = (Expression) _symbol_value.value;
					 LValue lvalue = expressionToLValue(lhs);
                                                         if (lvalue != null) return new Symbol(new StmtAssignment(lvalue, value));
                                                         newError("Illegal left hand sign of assignment.", _symbol_lhs);
                                                         return new Symbol(new StmtAssignment(new LValueVariable(Variable.namedVariable("$illegal")), value));
			}
			case 242: // statement = method_invocation.m SEMICOLON
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final ExprApplication m = (ExprApplication) _symbol_m.value;
					 return new Symbol(new StmtCall(m.getFunction(), m.getArgs()));
			}
			case 243: // statement = BEGIN statement_list_opt.s END
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final ImmutableList s = (ImmutableList) _symbol_s.value;
					 return new Symbol(new StmtBlock(null, null, s));
			}
			case 244: // statement = BEGIN VAR decl_list.d DO statement_list_opt.s END
			{
					final Symbol _symbol_d = _symbols[offset + 3];
					final ImmutableList.Builder d = (ImmutableList.Builder) _symbol_d.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final ImmutableList s = (ImmutableList) _symbol_s.value;
					 return new Symbol(new StmtBlock(null, d.build(), s));
			}
			case 245: // statement = IF expression.e THEN statement_list_opt.s end_if
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final ImmutableList s = (ImmutableList) _symbol_s.value;
					 return new Symbol(new StmtIf(e, new StmtBlock(null, null, s), null));
			}
			case 246: // statement = IF expression.e THEN statement_list_opt.s1 ELSE statement_list_opt.s2 end_if
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_s1 = _symbols[offset + 4];
					final ImmutableList s1 = (ImmutableList) _symbol_s1.value;
					final Symbol _symbol_s2 = _symbols[offset + 6];
					final ImmutableList s2 = (ImmutableList) _symbol_s2.value;
					 return new Symbol(new StmtIf(e, 
                                                                                                                 new StmtBlock(null, null, s1),
                                                                                                                 new StmtBlock(null, null, s2)));
			}
			case 247: // statement = WHILE expression.e decl_block_opt.d DO statement_list_opt.s end_while
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final ImmutableList d = (ImmutableList) _symbol_d.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final ImmutableList s = (ImmutableList) _symbol_s.value;
					 return new Symbol(new StmtWhile(e, new StmtBlock(null, d, s)));
			}
			case 251: // statement = for_generator_list.g DO statement_list_opt.s end_foreach
			{
					final Symbol _symbol_g = _symbols[offset + 1];
					final ImmutableList.Builder g = (ImmutableList.Builder) _symbol_g.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final ImmutableList s = (ImmutableList) _symbol_s.value;
					 return new Symbol(new StmtForeach(g.build(), new StmtBlock(null, null, s)));
			}
			case 252: // statement = for_generator_list.g decl_block.d DO statement_list_opt.s end_foreach
			{
					final Symbol _symbol_g = _symbols[offset + 1];
					final ImmutableList.Builder g = (ImmutableList.Builder) _symbol_g.value;
					final Symbol _symbol_d = _symbols[offset + 2];
					final ImmutableList d = (ImmutableList) _symbol_d.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final ImmutableList s = (ImmutableList) _symbol_s.value;
					 return new Symbol(new StmtForeach(g.build(), new StmtBlock(null, d, s)));
			}
			case 253: // choose_generator_list = CHOOSE generator_variable_list.vars IN expression.e
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					 ArrayList l = new ArrayList(); l.add(makeGeneratorFilter(null, vars.build(), e, null)); return new Symbol(l);
			}
			case 254: // choose_generator_list = CHOOSE type.t generator_variable_list.vars IN expression.e
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					 ArrayList l = new ArrayList(); l.add(makeGeneratorFilter(t, vars.build(), e, null)); return new Symbol(l);
			}
			case 255: // choose_generator_list = CHOOSE generator_variable_list.vars IN expression.e COMMA expression_list.filters
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 6];
					final ImmutableList.Builder filters = (ImmutableList.Builder) _symbol_filters.value;
					 ArrayList l = new ArrayList(); l.add(makeGeneratorFilter(null, vars.build(), e, filters.build())); return new Symbol(l);
			}
			case 256: // choose_generator_list = CHOOSE type.t generator_variable_list.vars IN expression.e COMMA expression_list.filters
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 7];
					final ImmutableList.Builder filters = (ImmutableList.Builder) _symbol_filters.value;
					 ArrayList l = new ArrayList(); l.add(makeGeneratorFilter(t, vars.build(), e, filters.build())); return new Symbol(l);
			}
			case 257: // choose_generator_list = CHOOSE generator_variable_list.vars IN expression.e COMMA choose_generator_list.l
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 6];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, makeGeneratorFilter(null, vars.build(), e, null)); return _symbol_l;
			}
			case 258: // choose_generator_list = CHOOSE type.t generator_variable_list.vars IN expression.e COMMA choose_generator_list.l
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, makeGeneratorFilter(t, vars.build(), e, null)); return _symbol_l;
			}
			case 259: // choose_generator_list = CHOOSE generator_variable_list.vars IN expression.e COMMA expression_list.filters COMMA choose_generator_list.l
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 6];
					final ImmutableList.Builder filters = (ImmutableList.Builder) _symbol_filters.value;
					final Symbol _symbol_l = _symbols[offset + 8];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, makeGeneratorFilter(null, vars.build(), e, filters.build())); return _symbol_l;
			}
			case 260: // choose_generator_list = CHOOSE type.t generator_variable_list.vars IN expression.e COMMA expression_list.filters COMMA choose_generator_list.l
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 7];
					final ImmutableList.Builder filters = (ImmutableList.Builder) _symbol_filters.value;
					final Symbol _symbol_l = _symbols[offset + 9];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, makeGeneratorFilter(t, vars.build(), e, filters.build())); return _symbol_l;
			}
			case 261: // for_generator_list = for_foreach generator_variable_list.vars IN expression.e
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(ImmutableList.builder().add(makeGeneratorFilter(null, vars.build(), e, null)));
			}
			case 262: // for_generator_list = for_foreach type.t generator_variable_list.vars IN expression.e
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(ImmutableList.builder().add(makeGeneratorFilter(t, vars.build(), e, null)));
			}
			case 263: // for_generator_list = for_foreach generator_variable_list.vars IN expression.e COMMA expression_list.filters
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 6];
					final ImmutableList.Builder filters = (ImmutableList.Builder) _symbol_filters.value;
					 return new Symbol(ImmutableList.builder().add(makeGeneratorFilter(null, vars.build(), e, filters.build())));
			}
			case 264: // for_generator_list = for_foreach type.t generator_variable_list.vars IN expression.e COMMA expression_list.filters
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 7];
					final ImmutableList.Builder filters = (ImmutableList.Builder) _symbol_filters.value;
					 return new Symbol(ImmutableList.builder().add((makeGeneratorFilter(t, vars.build(), e, filters.build()))));
			}
			case 265: // for_generator_list = for_foreach generator_variable_list.vars IN expression.e COMMA for_generator_list.l
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 6];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(ImmutableList.builder().add(makeGeneratorFilter(null, vars.build(), e, null)).addAll(l.build()));
			}
			case 266: // for_generator_list = for_foreach type.t generator_variable_list.vars IN expression.e COMMA for_generator_list.l
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(ImmutableList.builder().add(makeGeneratorFilter(t, vars.build(), e, null)).addAll(l.build()));
			}
			case 267: // for_generator_list = for_foreach generator_variable_list.vars IN expression.e COMMA expression_list.filters COMMA for_generator_list.l
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 6];
					final ImmutableList.Builder filters = (ImmutableList.Builder) _symbol_filters.value;
					final Symbol _symbol_l = _symbols[offset + 8];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(ImmutableList.builder().add(makeGeneratorFilter(null, vars.build(), e, filters.build())).addAll(l.build()));
			}
			case 268: // for_generator_list = for_foreach type.t generator_variable_list.vars IN expression.e COMMA expression_list.filters COMMA for_generator_list.l
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 7];
					final ImmutableList.Builder filters = (ImmutableList.Builder) _symbol_filters.value;
					final Symbol _symbol_l = _symbols[offset + 9];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(ImmutableList.builder().add(makeGeneratorFilter(t, vars.build(), e, filters.build())).addAll(l.build()));
			}
			case 269: // generator_variable_list = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(ImmutableList.builder().add(id.value));
			}
			case 270: // generator_variable_list = generator_variable_list.l COMMA IDENTIFIER.id
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol id = _symbols[offset + 3];
					 l.add(id.value); return _symbol_l;
			}
			case 289: // statement_list_opt = 
			{
					 return new Symbol(ImmutableList.empty());
			}
			case 290: // statement_list_opt = statement_list.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(l.build());
			}
			case 291: // statement_list = statement.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Statement n = (Statement) _symbol_n.value;
					 return new Symbol(ImmutableList.builder().add(n));
			}
			case 292: // statement_list = statement_list.l statement.n
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final Statement n = (Statement) _symbol_n.value;
					 l.add(n); return _symbol_l;
			}
			case 0: // opt$SEMICOLON = 
			case 10: // opt$action_tag = 
			case 12: // opt$action_output_expression_list = 
			case 16: // opt$lst$action_head = 
			case 29: // opt$port_name_colon = 
			case 31: // opt$token_name_list = 
			case 33: // opt$repeat = 
			case 35: // opt$channel_selector = 
			case 42: // opt$ATSTAR = 
			case 49: // opt$expression_list = 
			case 53: // opt$import_list = 
			case 55: // opt$type_parameter_block = 
			case 57: // opt$actor_parameter_list = 
			case 59: // opt$time = 
			case 63: // opt$lst$actor_body = 
			case 78: // opt$FSM = 
			case 82: // opt$lst$fsm_state_transitions = 
			case 88: // opt$lst$fsm_state_target = 
			case 115: // opt$actor_parameter_init_expression = 
			case 154: // opt$type_parameter_list = 
			case 162: // opt$type_attribute_list = 
			case 165: // opt$type_list = 
			case 174: // opt$formal_parameter_list = 
			case 176: // opt$decl_block = 
			case 212: // opt$map_list = 
			{
				return new Symbol(null);
			}
			case 1: // opt$SEMICOLON = SEMICOLON
			case 11: // opt$action_tag = action_tag
			case 13: // opt$action_output_expression_list = action_output_expression_list
			case 17: // opt$lst$action_head = lst$action_head
			case 30: // opt$port_name_colon = port_name_colon
			case 32: // opt$token_name_list = token_name_list
			case 34: // opt$repeat = repeat
			case 36: // opt$channel_selector = channel_selector
			case 43: // opt$ATSTAR = ATSTAR
			case 50: // opt$expression_list = expression_list
			case 54: // opt$import_list = import_list
			case 56: // opt$type_parameter_block = type_parameter_block
			case 58: // opt$actor_parameter_list = actor_parameter_list
			case 60: // opt$time = time
			case 64: // opt$lst$actor_body = lst$actor_body
			case 79: // opt$FSM = FSM
			case 83: // opt$lst$fsm_state_transitions = lst$fsm_state_transitions
			case 89: // opt$lst$fsm_state_target = lst$fsm_state_target
			case 105: // end_action = END
			case 106: // end_action = ENDACTION
			case 107: // end_actor = END
			case 108: // end_actor = ENDACTOR
			case 109: // end_invariant = END
			case 110: // end_invariant = ENDINVARIANT
			case 111: // end_schedule = END
			case 112: // end_schedule = ENDSCHEDULE
			case 116: // opt$actor_parameter_init_expression = actor_parameter_init_expression
			case 155: // opt$type_parameter_list = type_parameter_list
			case 163: // opt$type_attribute_list = type_attribute_list
			case 166: // opt$type_list = type_list
			case 175: // opt$formal_parameter_list = formal_parameter_list
			case 177: // opt$decl_block = decl_block
			case 213: // opt$map_list = map_list
			case 271: // for_foreach = FOREACH.FOREACH
			case 272: // for_foreach = FOR.FOR
			case 273: // do_begin = BEGIN.BEGIN
			case 274: // do_begin = DO.DO
			case 275: // end_choose = END.END
			case 276: // end_choose = ENDCHOOSE.ENDCHOOSE
			case 277: // end_foreach = END.END
			case 278: // end_foreach = ENDFOREACH.ENDFOREACH
			case 279: // end_if = END.END
			case 280: // end_if = ENDIF.ENDIF
			case 281: // end_lambda = END.END
			case 282: // end_lambda = ENDLAMBDA.ENDLAMBDA
			case 283: // end_let = END.END
			case 284: // end_let = ENDLET.ENDLET
			case 285: // end_proc = END.END
			case 286: // end_proc = ENDPROC.ENDPROC
			case 287: // end_while = END.END
			case 288: // end_while = ENDWHILE.ENDWHILE
			{
				return _symbols[offset + 1];
			}
			case 248: // statement = choose_generator_list.l decl_block_opt.do_v DO statement_list_opt.do_s end_choose
			{
				return _symbols[offset + 4];
			}
			case 249: // statement = choose_generator_list.l decl_block_opt.do_v DO statement_list_opt.do_s ELSE statement_list_opt.else_s end_choose
			{
				return _symbols[offset + 6];
			}
			case 250: // statement = choose_generator_list.l decl_block_opt.do_v DO statement_list_opt.do_s ELSE decl_block_opt.else_v DO statement_list_opt.else_s end_choose
			{
				return _symbols[offset + 8];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
