/* 
 *  @author Per Andersson<Per.Andersson@cs.lth.se>, Lund University
 *  To parse a CAL file use one of the methods:
 *  - public net.opendf.ir.cal.Actor parse(String path, String fileName)
 *  - public net.opendf.ir.cal.Actor parse(File file)
 *
 *  After parsing check for errors in the attribute parseProblems.
 *
 *  The parser is created using jflex and beaver.
 */
 
package net.opendf.parser.lth;

import java.util.ArrayList;
import net.opendf.ir.net.ast.PortReference;
import java.util.Map;
import net.opendf.ir.net.ast.NetworkDefinition;
import net.opendf.ir.net.ToolValueAttribute;
import net.opendf.ir.net.ToolTypeAttribute;
import net.opendf.ir.net.ast.EntityIfExpr;
import java.util.AbstractMap;
import java.io.PrintStream;
import net.opendf.ir.net.ToolAttribute;
import net.opendf.ir.net.ast.EntityListExpr;
import net.opendf.ir.util.ImmutableList;
import net.opendf.ir.util.ImmutableEntry;
import net.opendf.ir.net.ast.StructureStatement;
import java.util.TreeSet;
import beaver.*;
import net.opendf.ir.net.ast.StructureForeachStmt;
import java.util.Arrays;
import net.opendf.ir.net.ast.EntityInstanceExpr;
import net.opendf.ir.net.ast.StructureConnectionStmt;
import net.opendf.ir.common.*;
import net.opendf.ir.net.ast.StructureIfStmt;
import net.opendf.ir.net.ast.EntityExpr;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "NlParser.beaver".
 */
public class NlParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short NETWORK = 1;
		static public final short IDENTIFIER = 2;
		static public final short LPAREN = 3;
		static public final short RPAREN = 4;
		static public final short PORTCONN = 5;
		static public final short COLON = 6;
		static public final short IF = 7;
		static public final short THEN = 8;
		static public final short ELSE = 9;
		static public final short END = 10;
		static public final short IMPORT = 11;
		static public final short EQ = 12;
		static public final short SEMICOLON = 13;
		static public final short MAP = 14;
		static public final short LBRACE = 15;
		static public final short RBRACE = 16;
		static public final short BEGIN = 17;
		static public final short VAR = 18;
		static public final short DO = 19;
		static public final short CHOOSE = 20;
		static public final short IN = 21;
		static public final short COMMA = 22;
		static public final short LBRACK = 23;
		static public final short RBRACK = 24;
		static public final short DOT = 25;
		static public final short ALL = 26;
		static public final short EDGE = 27;
		static public final short DOUBLECOLON = 28;
		static public final short MUTABLE = 29;
		static public final short EQCOLON = 30;
		static public final short FUNCTION = 31;
		static public final short PROCEDURE = 32;
		static public final short MULTI = 33;
		static public final short LET = 34;
		static public final short CONST = 35;
		static public final short LAMBDA = 36;
		static public final short COLONEQ = 37;
		static public final short WHILE = 38;
		static public final short ENTITIES = 39;
		static public final short STRUCTURE = 40;
		static public final short ENTITY = 41;
		static public final short ENDNETWORK = 42;
		static public final short LT = 43;
		static public final short ARROW = 44;
		static public final short INTEGER_LITERAL = 45;
		static public final short LONG_LITERAL = 46;
		static public final short FLOATING_POINT_LITERAL = 47;
		static public final short DOUBLE_LITERAL = 48;
		static public final short TRUE_LITERAL = 49;
		static public final short FALSE_LITERAL = 50;
		static public final short CHARACTER_LITERAL = 51;
		static public final short STRING_LITERAL = 52;
		static public final short NULL_LITERAL = 53;
		static public final short OLD = 54;
		static public final short PROC = 55;
		static public final short OPERATOR = 56;
		static public final short GT = 57;
		static public final short MULT = 58;
		static public final short BAR = 59;
		static public final short FOREACH = 60;
		static public final short FOR = 61;
		static public final short ENDCHOOSE = 62;
		static public final short ENDFOREACH = 63;
		static public final short ENDIF = 64;
		static public final short ENDLAMBDA = 65;
		static public final short ENDLET = 66;
		static public final short ENDPROC = 67;
		static public final short ENDWHILE = 68;

		static public final String[] NAMES = {
			"EOF",
			"NETWORK",
			"IDENTIFIER",
			"LPAREN",
			"RPAREN",
			"PORTCONN",
			"COLON",
			"IF",
			"THEN",
			"ELSE",
			"END",
			"IMPORT",
			"EQ",
			"SEMICOLON",
			"MAP",
			"LBRACE",
			"RBRACE",
			"BEGIN",
			"VAR",
			"DO",
			"CHOOSE",
			"IN",
			"COMMA",
			"LBRACK",
			"RBRACK",
			"DOT",
			"ALL",
			"EDGE",
			"DOUBLECOLON",
			"MUTABLE",
			"EQCOLON",
			"FUNCTION",
			"PROCEDURE",
			"MULTI",
			"LET",
			"CONST",
			"LAMBDA",
			"COLONEQ",
			"WHILE",
			"ENTITIES",
			"STRUCTURE",
			"ENTITY",
			"ENDNETWORK",
			"LT",
			"ARROW",
			"INTEGER_LITERAL",
			"LONG_LITERAL",
			"FLOATING_POINT_LITERAL",
			"DOUBLE_LITERAL",
			"TRUE_LITERAL",
			"FALSE_LITERAL",
			"CHARACTER_LITERAL",
			"STRING_LITERAL",
			"NULL_LITERAL",
			"OLD",
			"PROC",
			"OPERATOR",
			"GT",
			"MULT",
			"BAR",
			"FOREACH",
			"FOR",
			"ENDCHOOSE",
			"ENDFOREACH",
			"ENDIF",
			"ENDLAMBDA",
			"ENDLET",
			"ENDPROC",
			"ENDWHILE"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjN7USL4NohtvlPZQm0LasO2AxY80kAWPGKLWGKLXopZb7aPmHaA2We22IGGHM42E22ND" +
		"2z5JC#VGCfvxfF3sf#tQzdfdtPj#oppj$V$pyxEodNdLNLzUtgxewpExC4bMyW9hIRLIRB5" +
		"M53gkXntvZfUPJ0TMYFdIvkecUf6Vu2Fr83LLpwahdqKLKXqwdMsWTDQ4Bw49gJ2Df7arIw" +
		"#XDggZQgKwgFssXasW$FKW7w20zH0$J8$GeFKONqxLq5frDvz2vr9cw26wnQgccqM6U8P8J" +
		"W1lIk6JJa#eatYAuUGRt$D9mrLJrE71hKN5GNFMSWwjIAG$#jg82TPhWJe6$hz9HmNq4k0M" +
		"KnOkejReS8yLuL3LgwE3I5V2tCcLJ3kLI5JeneBzRQA8wH8TZyW9wGt0t0BUDkbxZKaHmYs" +
		"cVcg#cg5cgWPg9UOZYviFV#scZM3n4TGFwsup$gPfwSASBxkt0pMGMVyyMNFHGvwa9j8tQq" +
		"9N818EB4Rofda0cX17djcfSGDm7AOb$S#EQE2$6$9v3FSJVbiRVJ#bpAg9ZCe9udBiZpjfQ" +
		"6#gf#b5Am3Xh6rKz$YwHVEuAt2hqXU3UHrtLMJI1Pz5O6aVZLMUgeAge4mpkAE1EeD5KbQf" +
		"J3TeHqD$bj5JjGLwrvHleLDKM$WuJt670NQmM2EuDuk$Db0wVyzLOVfl7gx6nEEy3RXiQI7" +
		"VJdIeJ#HBCtxcmzRx7tmp1NIx#BfVvhKbTUI9y#jxukrWjeW4nVv$5$9wYzgfJgJzi1SNz0" +
		"EjYFd2hgVlK7kH80INB$5ulk3#uSTLk1vTsKZ7FZkAgYl3t7ZL8xUCF8P$#E#ONk6eYefsl" +
		"SH5lZRjBu$AF4kVxCR$NO7xVChZ5F8Usnd1F1kvpQfzw27FyDjPwSDosUdvfYyh3h9hvvP#" +
		"mZlw9tDMuC$Jy2jPOjHypMuoVex5yheauLrBPzBbwINQuO7cLIT$oUBhKjOwUblbDfPag4w" +
		"EP0Vi5y7SOrj0RgfvwKbaOJKFCzHS6r$5#h7xIKPvG1gx6hAvgAd9ZycQ9yMXWLeNTPh3$a" +
		"$PLrO67Fs0UBg1ZgZV64Stb7kePUeCNeduhzgsr0Nqz0x6jvV6re#16w$dH6AlkoBxkgeEp" +
		"FwYhOxWrg1u$mE$p$QeJChb1uBDeZRh5u#y74kFjyFU0sab7aCiT1NUZsY1nB5G7rG2NltC" +
		"HWuPg2$JkK7UhlK5nnPRRtplT$lA$OVyImUr5JTLZwWNrF6AG7yS5wWFgeCIbFLs5FJSGBW" +
		"#ITUx29M#SUpav1Rk3g2zqXnZCVu57pwB9g5z3KsaspKUvp9oYuRI05dam5temVpIOro7Zb" +
		"ucNWgb2CSnDj1drneZOJjfETmJ0t4rxQAy7yovVp7iHnn7q192U5ZzVY67#XLv7$HrwZpwY" +
		"Z#cl0J3$Hb$HrvuvhU2B#HqmVYLMAKe9PhwAc5pAK6dmCqjLLikmuWB4LkMeN6zirOb#cAg" +
		"sEbsjLlM1bIAnFJ$gfxf8NORwfMXfZPyh0c1UgQvIRJoOxTsOgiXWTb7Ti1RpLH$LLmq2na" +
		"0rE9P3#Mga6gL6gp5gl9eK07EocesztuqvHzRfF9pUIzIrQec9xGIrq9nqIoIsOzHriVLo0" +
		"yQm4lnMTPjQ7m1pazgCVS2DkTNZvpRZv#rgkzgXYjLTwXw9xRsns3wgdaBz8Jx6r#Bs#Mm0" +
		"p1VLOVBilwYvvvECdzvNGtawViPUs8lqg#oy9Rc5klsyJs8xYrBLZOvzDHr#pd3PtcqA2PZ" +
		"c5HnJsyh3m$W9J8fXhl1YubNimgm9JNsc$h6OD$$VOGgg7#RQ1Cm2WngDRKten563OEfN2J" +
		"yzEKGbSkX$zTCVC$xwqs7AAnWckJ0JN#MOvPZbcEMOvPZbcEMOvPZbcEMOvyhVFXfv$lRnE" +
		"Ds4Ncte6$gGNgJFQ6NCah$kbp7T5T0jozvJ0NIUBqNdPPVEAm7il1P0vzq0Efy4qFbx09r$" +
		"bAsZqilKkT6dlJ7rrksgaMlUE$Zg3VELJYl5PY5iNY8vIAegg4ai1sULEWfIvzAgs2Zg##Q" +
		"Denb$dqWg7vfdk4O$cFgLadEDwKngXLXqAdq4dbVzu#hz5jFx1TJjUBegEQggmgMCIy$1nR" +
		"yZxcSQW$y#NgjAycqzhOIdGqknuYUzp5VQt5VQmbVQpbSwmbTwjQzqZgzqjQzqZQzqlQ$q0" +
		"L$fIxxIjtobF$j9bUqhhUihzOswAl2LNkWhBVILzlIL3l6L3lULBlMLhlALFanvgeednoQ0" +
		"dBzQEhl2BbTRmuHyTFy5MxzMgHQKbg1JgKGMktQ54gzJVANkrybaaGqKHKMKH9Df3wL2aaP" +
		"TA8Co8Ja1YAaoibCniaBaTakShgte2cfDLz9Ls5TgK4sgHHMmlb8HYqnQY$wLi8iqm4ewIt" +
		"xNwuol4I9slicN9eYTnisbVAe3b9D4KXUuImJN4jmimRNAnBs6jgDF4VI2ube6rw916FNDm" +
		"1qZkEE1csByrVRIi1BpA48xn7OMpONSmQq8t7aqdnRWRh2G5WN6JQFfm8tAqt27qRWXuBQZ" +
		"zeAxL71pWMjHB#f9jR6V9iLm2u5x6sPDMvmDYq7ZJCWgD#ummTq4t7IqQznKmTKzYh1xt2d" +
		"ZiMAuIS3DXOwDrhvqHs1$G$XnuyRZV1dY6iVDbRZh$DTzut7E0wwMwD5Cet10NCtxUN272k" +
		"uwu1RXFXUTtmZoF8HJh3lre9se5U7kwE0E06uNZCPfomc8Em9tEaloAeoRfPxjfDWwca9J1" +
		"NUp#9jEooMlSoM$ScF#LWUkzdK3RKJ6MG5nXydSkFszNd17YB#fiNKKWa#fnYSzdeZ7NwsR" +
		"XSpE3OpRN7IJuCqeuMaqJd2RYQrBFBWp3QvJT#FcG5OTibpi0y7dL#D5y2mKt8ZWHWJNsKb" +
		"rJkK0Dy$WvafFDsuMKDEWCnXzVX#k9Jz9iVabuEhSZUUpi#gcWt9bRgBpUmfmgr8rI6R9ZX" +
		"8CLsj6FFExtkoJbqgMf1f$ar1gYYWMosZqM2uskBbcHFgPYbWV7rThwLafyc1c2MOECFl1R" +
		"ZBiznLVX#9v2UP1OqPGZ$ggOziKyTVoGl2WkPo8EqXme$L2LuorFnDZ#qCKTmpyguYSh2WH" +
		"2hfsdHt8ZHkAnNW6egpz7IIuUlNg7Ycq6DRZ$ax4s6x2sPsDMu4LEAUSEN7ZZlBu6uAz5cR" +
		"Fi32INRGRE8Kkt4ACOh69VyN0QpTarcuSDyU3csTogb3Yc2jpc6RcCefhepuMbYAebNKMQS" +
		"nwqFRwUfq7CxfkGuZtIl4o4RD8uf5ZpfRP0J2Bi1wy#PJdYra4Z6J4k11Pa2Ov5iKSZfziP" +
		"F#Ds2coQ4W0p26YvyRivuivGUPExoLz1LFN7Cm9iA3tph4ORKwWs5g8fJUsbY#cXTbA5cyj" +
		"mUmRypD7pljjqcBXLbKsPXfkAEa#QoPQjmrcHPpTcR1R93cSZNjcMYo72c4Z1JGSdfQrHsZ" +
		"CNfXFRzxs5CnqET6ho5cgCRj0AxhpQp$xu3ICOcQP#KsbMsbaeDYc9s2EzFYPRZ2hG6kasJ" +
		"dJPFwYiRNCUhB5sgm0c6TG4RCR4pKN9cg2oPuNPSjJC5tI8dcMYGaTlO#Mt8jwubplxTYd$" +
		"l1peClsJCCJC8qqCAPeMw2edpt1Iy64B3UEIQUWX3Fr$m#cHWs2AJgvyTZYzf0THms2ANeb" +
		"$NJbKDIlFyvFVqoN$JyTPcokoiGqBV$rMYd7BCSinop7BCSinop7BCSin$pJO$hzxQCjE#y" +
		"cEb17waITOvPyTMcmMpU8lNAT$r7dEEskUUzQodpz7ccAOAQ9lNxQPZG7QMXfeq3h7AeT7q" +
		"LfUGDvx7qYolgRagDTezz2Mu#JSwDbNAMEm9F$fSJ1j7RmZ7HqKDtZpj7lY73Kyd$Vwl9qp" +
		"Xymu#NISgbREiZvxLuinxg0dDzxEhl2rQwsx8HyTFq5M#grQH8jIz1PLIABNRj2YRRLVbAF" +
		"nkr4wiXivzC75aX$LkyOP9L1zK1dWBQ3sg6v5$WijEjlaPm4#XwoOQ3Dkh#nqJ5QBesWlzR" +
		"XaUQcdkrjfpOOs4z4uHE9GfF0EnhvsqJspw31JjtkZhRbqDbxVBpmCwMtsQ$6on7uRyFlI1" +
		"Fmcy21hHgPDlqjiILc71lGVjIKfqEd0ErVG7O4b0pw1jJSYvDK2thdEMNzJHhx1wSSGh#GZ" +
		"VRUaFzisXj0fipuC1T9jnZTL9HVWJ#m5Pa9lSdW#qlwHBk8ajEW1vkXaupDxr0#1R4#35hl" +
		"rG#T3FqMaBzXC1cowgRjN8TRUapG2Lq0Mp#0Fal0t6VurmxF$10sKLHtElNa1s7tP6#VPDY" +
		"XXytuNe1jCy#Xhi1h1DxDj276eUvc77r1oGOh7$BEuFU0zulRjP2prffuFGLZ3mzEZ5Df15" +
		"jJDKSE8lQXMOuiWlXPmr50JeJckcmFXLzBCSQwHEclGs3qrM3ex$3QJTcCnrpqduDsbDLRt" +
		"dOBynQQ3$bxeCR6nmiXlojXVBT0XhLXlMlwFGf27DJN2VRU0LqFNF0GSZlK4BGJDD9bwn73" +
		"jGsCFpK7PUH$26i#T1VeWmIRTq2s7tmbw1D7beHz8dJ0sD7p#98fVmJwsFJJ#VUbqKTiR2l" +
		"1BjQxNS6KVuJkJ$4sTG1rx3MfHT0fScHsIuUdNeUvHJnIdq3b5xTDbu#$GhyYTFHyDaSPuf" +
		"1UemVZEk6Gjq#5yo7RQDfCleLJ3A$aV78id6NgEj#QWjS4rOxRi7kWNiEKUnbU7RR7WpzZw" +
		"gEWKzVLPp7gPiy9dmdTtU2lc35zYd5ZtLkh8SCwj7GUV6DYj0Eo#YP#M3zsRTGRcFhxNj$e" +
		"UIC$rU1S3D9z#e1tCRAse3QW4Q1sHcRMO5erZEC1L#o6u944FZukIyFU7D9h1joURiQezwI" +
		"9na#i0HjxjxtCsBW1TAqf8xV2gqnv6MYRU$n6VYDiHsEx1lKTfepyj1z1VRShfiX9#rFZym" +
		"JN6FKUVmYwoFFmJfTjx2U4lJMy3dGl#kAy2zzlsZQvxFxRFIRi5rqDFsZYtCJuVP$fkzdXc" +
		"TESFLxrBEaNdPWeAwcJkSBORUJN3lnxdFOCxF$MrwY$7E#Rdh0dPUXSxETdnpMczDBRxAKk" +
		"MpDGNmM#21mvce4vijSPt8TSzWwuoljDt$NGnRcQFiZel#t5IVyyNbPMl6oRN4wVucgVdE2" +
		"ZESFq#PoXy#DLwDHnP67FtSFL1pbWlm7QQyPPsU1WVwQLFlh8EUKQW$squVUQ$cQzgmeWxB" +
		"7sWzx#QPkC$KuE3#4UaV4SkDbpCbxJvty2vWUGPHZz96yRzVBMxVVYvL0rCvPwfbwZf3#XS" +
		"rmuNwBUD56dB89FTyVBokobQKyc#81zFzGCygFWk7k6yetUvoZNyUfcAkIpkS#a$QhFj8Gn" +
		"d#Nmz7IK2upU4cs$vDZIgq9UQFgrHnrtk51hhuvbxYQPQVfE09tVp9XBn0Bj0unkhdE#PvY" +
		"p8QEjVspIc#bxZedDEmcs#hZAFKhsjVByRLgbd7#MMMEPDQ9d0UpkChBwADyFZlFEplBl7p" +
		"9pbwd7V11Zlzxubf$eVxoUYRCZz8GkO$$vmkYiSkaVSkj3PxaPwrTn7NhBfUywRpAxeVwja" +
		"N$gCzv3Bjs1gFzYocESkq3easXVq5i6QvpNXbt9PUzNRrlOxEVaEal2OVGfYDUT#vifppCw" +
		"gMOSoALmR7sPjc#zzSm5a65E8gwxGMIWQqoVeBroek$6rfa9zIR#UhRF#HCkaM#Et6fe#cJ" +
		"7PPdwp1vkvDqJz2zAi6lkitPzbsn6lAoEaE#B$nKhtStx#6V#XN$Wx$ax$WT$ouVuCVuxVy" +
		"bVyTTe$u8$vx#1uoJXsq1D#1BfDu2H0poO6$E5V06Vp#Tn8xu8aekv1HToC#xCdL3ho3iyk" +
		"1ru49xjfTpEoF3#YV6#btCvYoj9Uv78sp9kG8oCvokbtfglmdEOb8UQljju4s$a3Nmhocj1" +
		"hM98epY5pNTpUAGyiGzoIocDP#GiZ#KmXrZnQAPZnuocV7#1B#Ect4rAyfqwxi9pXC#KvsH" +
		"vNXD3ciPJXS$bUNXEulxSZ$jo7#xDlRWdz#3kF0NnE4jqpeprQd2CXIjvrjUSwt45JZNjkd" +
		"u6ssp5QdNbUJfdSeQHr34ydzFPV8U2SKDbt9YvAkDEp9MDj1O8#nIVojKucxDDlzD0MtcxQ" +
		"AoMvoh6xPTlbl89N977IQaXduldENnsRFIul$BLe3LIkuAJECB3sNmhXF7Eb$5EYdCOTpnk" +
		"phVpfU3h#1l#At$Cd$2dHkyZmz$dT$azATq7sc#azyhp7dvG#Elo$0iV9TUBtv7dcwQ6cmM" +
		"$og$nPto43$DB$79CxqL#cfy4VvgVuAVu6P4zpi#QrXVu5U5OBVoyb9xZXuG$Aiz7vFamur" +
		"qUty47#G3$odW7oCiOTrt6VOnnj#OLl5pqzl8UBkOxKSAx6PHtyrsUCS$d9RoOyGwBb$82V" +
		"UyYdAOWHNZ72rAqIiWYtD91Ye05KhI7qkbgy4HQBMJftpg15Cr7UPAG4hfPo2Az5dUWl40#" +
		"#HWYp3L8qKJmYU2zA0nA8jpcGBfkYsmjocjHNWE#1dmoQ23A0s6dFtJxetmjohsXsnjs7Pv" +
		"4Ko2V0hbU7rDHxeboJxIDGFzvg6jQ2Fs55A55a6CLWvJGEY6B47EGea7eCmswcfQZhkas8P" +
		"lq$w#PWV9qw4z7VR5yGb61R6e1lWqqGCYcVcZ3EsMGHNqWYr8t#IHbo92ksq9TKDQVikoES" +
		"W$GADJrzm0Siacla76GpHIoQHVa#lyJxKPz5ihwFxuKexmTRUl1ruDl0DyWdzfLX3m1AVdC" +
		"xqQKDqevBFLDA6#2tcn3Dy0Utbc05EaTS2ZuTOZT2fHNoETemw0aK39jGTiMz9a3wefoL$3" +
		"Hq1kDSXlOlWAyB6ejP8F2T2NA3bcW990D2iVuLjZUAkqXKCIqMQRTeilHvf0j$2hmLf2t0c" +
		"#9UakKsuAtHRqGt8$625aq5tmkz3e2goFg7QKS0OL1IGdb5ACNfWxW7OH7G4akdWnAeVPeR" +
		"u$szf3hJuZ6UJ8eXVe2jo#mse5hscneYA49XeOR6cRe9aCh3Tre22SaI55d8Ols$WTg2B8l");

/*******************************************************
 *  Inject code for custom error handling in the parser class.
 *******************************************************/
  // all errors encountered during parsing is stored in the array parseProblems. This includes lexical, syntactical and semantic error (multiple initialization actors et.c.)
  public java.util.TreeSet<String> parseProblems = new TreeSet<String>();
  public void newError(String msg, Symbol token){
      parseProblems.add(msg + " At row " + Symbol.getLine(token.getStart()) + ", column " + Symbol.getColumn(token.getStart()));
  };
  public void printParseProblems(){ printParseProblems(System.err); }
  public void printParseProblems(PrintStream out){
    out.println("number of problems: " + parseProblems.size());
    for(String msg : parseProblems){
      out.println("ERROR: " + msg);
    }
  }

  // parser plug-in methods that are called when the parser encounters a syntactical problem
  class Events extends Parser.Events {
    public void scannerError(Scanner.Exception e) {
      parseProblems.add(e.getMessage());
    }
    public void syntaxError(Symbol token) {
      // This method is always called when a problem is encountered, even if it is repaired.
      // beaver.Parser$Exception is thrown if recovery fails.
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("unexpected token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
    public void unexpectedTokenRemoved(Symbol token) {
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("parser recovered after removing token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
    public void missingTokenInserted(Symbol token) {
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("parser recovered after inserting token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
    public void misspelledTokenReplaced(Symbol token) {
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("parser recovered after replacing token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
    public void errorPhraseRemoved(Symbol token) {
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("parser recovered after removing token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
  }

  {
    // initialization, before the constructor
    report = new Events(); // Use error handler in parser
  }

/*******************************************************
 *  Help routine that parses a file, given its name.
 *  A compilation unit is always returned, containing all parseProblems encountered during parsing.
 *  If a Parser.exception is thrown a CompilationUnit with an empty AST is returned.
 *******************************************************/

  public NetworkDefinition parse(String fileName){
    return parse(new java.io.File(fileName));
  }
  public NetworkDefinition parse(String path, String fileName){
    return parse(new java.io.File(path + "/" + fileName));
  }
  public NetworkDefinition parse(java.io.File file){
     NetworkDefinition network;
     parseProblems = new TreeSet<String>();
     java.io.FileReader fr = null;
     try {
       try {
         fr = new java.io.FileReader(file);
	       NlScanner scanner = new NlScanner(new java.io.BufferedReader(fr));
         network = (NetworkDefinition)parse(scanner);
         fr.close();
       } catch(CalParser.Exception e) {
         // build empty compilation unit for failed error recovery
         // The problem is added to parseProblems[] by the syntaxError() method added to the parser above.
         network = new NetworkDefinition(file.getName());
       } finally {
         if(fr != null){ fr.close(); }
       }
     } catch (java.io.FileNotFoundException e){
       parseProblems.add("file not found: " + e.getMessage());
       network = new NetworkDefinition(file.getName());
     } catch (java.io.IOException e){
       parseProblems.add("error reading file: " + e.getMessage());
       network = new NetworkDefinition(file.getName());
     }
//     network.setSourceFile(file);
//     network.parseProblems = parseProblems;
//     for(Problem p : parseProblems) {
//       p.setSourceFile(file);
//     }
     return network;
   }

  private enum NetworkBodyPartKind{ IMPORT, VAR_DECL, ENTITIES, STRUCTURE, TOOL_ATTRIBUTE; }

/******************************************************************************
 * Needed by CommonParser.beaver
 * Repeated in both NlParser.beaver and CalParser.beaver
 *****************************************************************************/
  private GeneratorFilter makeGeneratorFilter(TypeExpr type, ImmutableList<String> varList, Expression e, ImmutableList<Expression> filterList){
    ImmutableList.Builder<DeclVar> vars = ImmutableList.builder();
    for(String var : varList){
      vars.add(new DeclVar(type, var, null));
    }
    return new GeneratorFilter(vars.build(), e, filterList);
  }
  class ParenthesSymbol extends Symbol{ // used by the parser to wrap subexpressions that are enclosed by parentheses, i.e. do not add them to a ExprBinaryOp sequence.
     ParenthesSymbol(Symbol s){
       super(s.getId(), s.getStart(), s.getEnd(), s.value);
     }
  }
   
  private LValue expressionToLValue(Expression expression) {
    if (expression instanceof ExprVariable) {
      return new LValueVariable(((ExprVariable) expression).getVariable());
    } else if (expression instanceof ExprIndexer) {
      ExprIndexer exprIndexer = (ExprIndexer) expression;
      LValue structure = expressionToLValue(exprIndexer.getStructure());
      if (structure == null) return null;
      return new LValueIndexer(structure, exprIndexer.getIndex());
    } else if (expression instanceof ExprField) {
      ExprField exprField = (ExprField) expression;
      LValue structure = expressionToLValue(exprField.getStructure());
      if (structure == null) return null;
      return new LValueField(structure, exprField.getField());
    } else {
      return null;
    }
  }

	public NlParser() {
		super(PARSING_TABLES);
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 4: // lst$network_body_part = network_body_part
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 5: // lst$network_body_part = lst$network_body_part network_body_part
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 10: // network = NETWORK IDENTIFIER.name opt$type_parameter_block.typePars LPAREN opt$actor_parameter_list.valuePars RPAREN port_decl_list_opt.inputPorts PORTCONN port_decl_list_opt.outputPorts COLON opt$lst$network_body_part.body end_network.end_network opt$SEMICOLON
			{
					final Symbol name = _symbols[offset + 2];
					final Symbol _symbol_typePars = _symbols[offset + 3];
					final ImmutableList typePars = (ImmutableList) _symbol_typePars.value;
					final Symbol _symbol_valuePars = _symbols[offset + 5];
					final ImmutableList.Builder valuePars = (ImmutableList.Builder) _symbol_valuePars.value;
					final Symbol _symbol_inputPorts = _symbols[offset + 7];
					final ImmutableList inputPorts = (ImmutableList) _symbol_inputPorts.value;
					final Symbol _symbol_outputPorts = _symbols[offset + 9];
					final ImmutableList outputPorts = (ImmutableList) _symbol_outputPorts.value;
					final Symbol _symbol_body = _symbols[offset + 11];
					final ArrayList _list_body = (ArrayList) _symbol_body.value;
					final Map.Entry[] body = _list_body == null ? new Map.Entry[0] : (Map.Entry[]) _list_body.toArray(new Map.Entry[_list_body.size()]);
					final Symbol _symbol_end_network = _symbols[offset + 12];
					final String end_network = (String) _symbol_end_network.value;
					
        NamespaceDecl ns = null;
        ImmutableList.Builder varDecls = ImmutableList.builder();
        ImmutableList.Builder structure = ImmutableList.builder();
        ImmutableList.Builder<java.util.Map.Entry<String,EntityExpr>> entities = ImmutableList.builder();
        ImmutableList.Builder<ToolAttribute> toolAttributes = ImmutableList.builder();
        for(Map.Entry part : body){
            ImmutableList all;
            if(part.getValue() != null){  // entities and structure may be empty. Then the parser return null.
                switch((NetworkBodyPartKind)part.getKey()){
                case IMPORT:
                     System.out.println("UNSUPPORTED, import is ignored.");
                     //TODO
                     break;
                case VAR_DECL:
                    varDecls.addAll((ArrayList)part.getValue());
                    break;
                case ENTITIES:
                    entities.addAll((ArrayList)part.getValue());
                    break;
                case STRUCTURE:
                    structure.addAll((ArrayList)part.getValue());
                    break;
                case TOOL_ATTRIBUTE:
                    toolAttributes.addAll((ImmutableList)part.getValue());
                    break;
                }
            }
        }
        
        return new Symbol(new NetworkDefinition((String)name.value, 
                          ns, 
                          typePars,     // typePars,
                          valuePars == null ? null : valuePars.build(), // valuePars,
                          null,      // typeDecls, NOTE, can not be expressed in NL
                          varDecls.build(),             // varDecls
                          inputPorts,
                          outputPorts,
                          entities.build(), // entities
                          structure.build(), // structure
                          toolAttributes.build()
                          ));
			}
			case 11: // network_body_part = import_part.part
			{
					final Symbol _symbol_part = _symbols[offset + 1];
					final ArrayList part = (ArrayList) _symbol_part.value;
					 return new Symbol(new AbstractMap.SimpleEntry(NetworkBodyPartKind.IMPORT, part));
			}
			case 12: // network_body_part = network_decl_block.part
			{
					final Symbol _symbol_part = _symbols[offset + 1];
					final ArrayList part = (ArrayList) _symbol_part.value;
					 return new Symbol(new AbstractMap.SimpleEntry(NetworkBodyPartKind.VAR_DECL, part));
			}
			case 13: // network_body_part = entities.part
			{
					final Symbol _symbol_part = _symbols[offset + 1];
					final ArrayList part = (ArrayList) _symbol_part.value;
					 return new Symbol(new AbstractMap.SimpleEntry(NetworkBodyPartKind.ENTITIES, part));
			}
			case 14: // network_body_part = structure.part
			{
					final Symbol _symbol_part = _symbols[offset + 1];
					final ArrayList part = (ArrayList) _symbol_part.value;
					 return new Symbol(new AbstractMap.SimpleEntry(NetworkBodyPartKind.STRUCTURE, part));
			}
			case 15: // network_body_part = tool_attribute_block.part
			{
					final Symbol _symbol_part = _symbols[offset + 1];
					final ImmutableList part = (ImmutableList) _symbol_part.value;
					 return new Symbol(new AbstractMap.SimpleEntry(NetworkBodyPartKind.TOOL_ATTRIBUTE, part));
			}
			case 16: // lst$network_decl = network_decl
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 17: // lst$network_decl = lst$network_decl network_decl
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 20: // network_decl_block = VAR opt$lst$network_decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final ArrayList _list_d = (ArrayList) _symbol_d.value;
					final DeclVar[] d = _list_d == null ? new DeclVar[0] : (DeclVar[]) _list_d.toArray(new DeclVar[_list_d.size()]);
					 return _symbol_d;
			}
			case 21: // network_decl = var_decl.d SEMICOLON
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return _symbol_d;
			}
			case 22: // network_decl = fun_decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return _symbol_d;
			}
			case 23: // network_decl = proc_decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return _symbol_d;
			}
			case 24: // lst$entity = entity
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 25: // lst$entity = lst$entity entity
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 28: // entities = ENTITIES opt$lst$entity.l
			{
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final java.util.Map.Entry[] l = _list_l == null ? new java.util.Map.Entry[0] : (java.util.Map.Entry[]) _list_l.toArray(new java.util.Map.Entry[_list_l.size()]);
					 return _symbol_l;
			}
			case 29: // entity = IDENTIFIER.ID EQ entity_expr.e SEMICOLON
			{
					final Symbol ID = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final EntityExpr e = (EntityExpr) _symbol_e.value;
					 return new Symbol(new java.util.AbstractMap.SimpleEntry((String)ID.value, e));
			}
			case 34: // entity_expr = IDENTIFIER.id LPAREN opt$param_assign_list.l RPAREN opt$tool_attribute_block.a
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 3];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_a = _symbols[offset + 5];
					final ImmutableList a = (ImmutableList) _symbol_a.value;
					 return new Symbol(new EntityInstanceExpr((String)id.value, l == null ? null : l.build(), a));
			}
			case 35: // entity_expr = IF expression.e THEN entity_expr.t ELSE entity_expr.f end_if
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final EntityExpr t = (EntityExpr) _symbol_t.value;
					final Symbol _symbol_f = _symbols[offset + 6];
					final EntityExpr f = (EntityExpr) _symbol_f.value;
					 return new Symbol(new EntityIfExpr(e, t, f));
			}
			case 38: // entity_expr = LBRACK opt$entity_expr_list.e RBRACK
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final ImmutableList.Builder e = (ImmutableList.Builder) _symbol_e.value;
					 return new Symbol(new EntityListExpr(e==null ? null : e.build(), null));
			}
			case 39: // entity_expr = LBRACK entity_expr_list.e COLON for_generator_list.g RBRACK
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final ImmutableList.Builder e = (ImmutableList.Builder) _symbol_e.value;
					final Symbol _symbol_g = _symbols[offset + 4];
					final ImmutableList.Builder g = (ImmutableList.Builder) _symbol_g.value;
					 return new Symbol(new EntityListExpr(e.build(), g.build()));
			}
			case 40: // param_assign_list = param_assign.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final Map.Entry p = (Map.Entry) _symbol_p.value;
					 return new Symbol(ImmutableList.builder().add(p));
			}
			case 41: // param_assign_list = param_assign_list.l COMMA param_assign.p
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final Map.Entry p = (Map.Entry) _symbol_p.value;
					 l.add(p); return _symbol_l;
			}
			case 42: // entity_expr_list = entity_expr.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final EntityExpr e = (EntityExpr) _symbol_e.value;
					 return new Symbol(ImmutableList.builder().add(e));
			}
			case 43: // entity_expr_list = entity_expr_list.l COMMA entity_expr.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final EntityExpr e = (EntityExpr) _symbol_e.value;
					 l.add(e); return _symbol_l;
			}
			case 44: // param_assign = IDENTIFIER.ID EQ expression.expression
			{
					final Symbol ID = _symbols[offset + 1];
					final Symbol _symbol_expression = _symbols[offset + 3];
					final Expression expression = (Expression) _symbol_expression.value;
					 return new Symbol(new java.util.AbstractMap.SimpleEntry((String)ID.value, expression));
			}
			case 45: // lst$entity_statement = entity_statement
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 46: // lst$entity_statement = lst$entity_statement entity_statement
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 49: // structure = STRUCTURE opt$lst$entity_statement.l
			{
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final StructureStatement[] l = _list_l == null ? new StructureStatement[0] : (StructureStatement[]) _list_l.toArray(new StructureStatement[_list_l.size()]);
					 return _symbol_l;
			}
			case 50: // entity_statement = entity_port.src EDGE entity_port.dst opt$tool_attribute_block.a SEMICOLON
			{
					final Symbol _symbol_src = _symbols[offset + 1];
					final PortReference src = (PortReference) _symbol_src.value;
					final Symbol _symbol_dst = _symbols[offset + 3];
					final PortReference dst = (PortReference) _symbol_dst.value;
					final Symbol _symbol_a = _symbols[offset + 4];
					final ImmutableList a = (ImmutableList) _symbol_a.value;
					 return new Symbol(new StructureConnectionStmt(src, dst, a==null ? null : a));
			}
			case 51: // entity_statement = for_generator_list.g DO opt$lst$entity_statement.s END
			{
					final Symbol _symbol_g = _symbols[offset + 1];
					final ImmutableList.Builder g = (ImmutableList.Builder) _symbol_g.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final StructureStatement[] s = _list_s == null ? new StructureStatement[0] : (StructureStatement[]) _list_s.toArray(new StructureStatement[_list_s.size()]);
					 return new Symbol(new StructureForeachStmt(g.build(), ImmutableList.copyOf(s)));
			}
			case 52: // entity_statement = IF expression.e THEN opt$lst$entity_statement.t_stmt END
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_t_stmt = _symbols[offset + 4];
					final ArrayList _list_t_stmt = (ArrayList) _symbol_t_stmt.value;
					final StructureStatement[] t_stmt = _list_t_stmt == null ? new StructureStatement[0] : (StructureStatement[]) _list_t_stmt.toArray(new StructureStatement[_list_t_stmt.size()]);
					 return new Symbol(new StructureIfStmt(e, ImmutableList.copyOf(t_stmt), null));
			}
			case 53: // entity_statement = IF expression.e THEN opt$lst$entity_statement.t_stmt ELSE opt$lst$entity_statement.f_stmt END
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_t_stmt = _symbols[offset + 4];
					final ArrayList _list_t_stmt = (ArrayList) _symbol_t_stmt.value;
					final StructureStatement[] t_stmt = _list_t_stmt == null ? new StructureStatement[0] : (StructureStatement[]) _list_t_stmt.toArray(new StructureStatement[_list_t_stmt.size()]);
					final Symbol _symbol_f_stmt = _symbols[offset + 6];
					final ArrayList _list_f_stmt = (ArrayList) _symbol_f_stmt.value;
					final StructureStatement[] f_stmt = _list_f_stmt == null ? new StructureStatement[0] : (StructureStatement[]) _list_f_stmt.toArray(new StructureStatement[_list_f_stmt.size()]);
					 return new Symbol(new StructureIfStmt(e, ImmutableList.copyOf(t_stmt), ImmutableList.copyOf(f_stmt)));
			}
			case 54: // lst$entity_indexing = entity_indexing
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 55: // lst$entity_indexing = lst$entity_indexing entity_indexing
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 58: // entity_port = IDENTIFIER.id_port opt$lst$entity_indexing.index_port
			{
					final Symbol id_port = _symbols[offset + 1];
					final Symbol _symbol_index_port = _symbols[offset + 2];
					final ArrayList _list_index_port = (ArrayList) _symbol_index_port.value;
					final Expression[] index_port = _list_index_port == null ? new Expression[0] : (Expression[]) _list_index_port.toArray(new Expression[_list_index_port.size()]);
					 return new Symbol(new PortReference(null, null, (String)id_port.value));
			}
			case 59: // entity_port = IDENTIFIER.id_entity opt$lst$entity_indexing.index_entity DOT IDENTIFIER.id_port opt$lst$entity_indexing.index_port
			{
					final Symbol id_entity = _symbols[offset + 1];
					final Symbol _symbol_index_entity = _symbols[offset + 2];
					final ArrayList _list_index_entity = (ArrayList) _symbol_index_entity.value;
					final Expression[] index_entity = _list_index_entity == null ? new Expression[0] : (Expression[]) _list_index_entity.toArray(new Expression[_list_index_entity.size()]);
					final Symbol id_port = _symbols[offset + 4];
					final Symbol _symbol_index_port = _symbols[offset + 5];
					final ArrayList _list_index_port = (ArrayList) _symbol_index_port.value;
					final Expression[] index_port = _list_index_port == null ? new Expression[0] : (Expression[]) _list_index_port.toArray(new Expression[_list_index_port.size()]);
					 return new Symbol(new PortReference((String)id_entity.value, ImmutableList.copyOf(index_entity) , (String)id_port.value));
			}
			case 60: // entity_indexing = LBRACK.LBRACK expression.e RBRACK.RBRACK
			{
					final Symbol LBRACK = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol RBRACK = _symbols[offset + 3];
					 return _symbol_e;
			}
			case 61: // import_part = import_single.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final ArrayList i = (ArrayList) _symbol_i.value;
					 return _symbol_i;
			}
			case 62: // import_part = import_group.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final ArrayList i = (ArrayList) _symbol_i.value;
					 return _symbol_i;
			}
			case 63: // import_single = IMPORT import_kind.k qual_id.qual_id SEMICOLON
			{
					final Symbol _symbol_k = _symbols[offset + 2];
					final String k = (String) _symbol_k.value;
					final Symbol _symbol_qual_id = _symbols[offset + 3];
					final ArrayList qual_id = (ArrayList) _symbol_qual_id.value;
					 return new Symbol(qual_id);
			}
			case 64: // import_single = IMPORT import_kind.k qual_id.qual_id EQ IDENTIFIER.alias SEMICOLON
			{
					final Symbol _symbol_k = _symbols[offset + 2];
					final String k = (String) _symbol_k.value;
					final Symbol _symbol_qual_id = _symbols[offset + 3];
					final ArrayList qual_id = (ArrayList) _symbol_qual_id.value;
					final Symbol alias = _symbols[offset + 5];
					 return new Symbol(qual_id);
			}
			case 65: // import_group = IMPORT import_kind.k ALL qual_id.qual_id SEMICOLON
			{
					final Symbol _symbol_k = _symbols[offset + 2];
					final String k = (String) _symbol_k.value;
					final Symbol _symbol_qual_id = _symbols[offset + 4];
					final ArrayList qual_id = (ArrayList) _symbol_qual_id.value;
					 return new Symbol(qual_id);
			}
			case 66: // import_kind = 
			{
					 return new Symbol("");
			}
			case 67: // import_kind = ENTITY.kind
			{
					final Symbol kind = _symbols[offset + 1];
					 return kind;
			}
			case 68: // import_kind = VAR.kind
			{
					final Symbol kind = _symbols[offset + 1];
					 return kind;
			}
			case 69: // lst$tool_attribute = tool_attribute
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 70: // lst$tool_attribute = lst$tool_attribute tool_attribute
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 73: // tool_attribute_block = LBRACE opt$lst$tool_attribute.a RBRACE
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final ToolAttribute[] a = _list_a == null ? new ToolAttribute[0] : (ToolAttribute[]) _list_a.toArray(new ToolAttribute[_list_a.size()]);
					 return new Symbol(ImmutableList.builder().addAll(a).build());
			}
			case 74: // tool_attribute = IDENTIFIER.ID EQ expression.expression SEMICOLON
			{
					final Symbol ID = _symbols[offset + 1];
					final Symbol _symbol_expression = _symbols[offset + 3];
					final Expression expression = (Expression) _symbol_expression.value;
					 return new Symbol(new ToolValueAttribute((String)ID.value, expression));
			}
			case 75: // tool_attribute = IDENTIFIER.ID COLON type.type SEMICOLON
			{
					final Symbol ID = _symbols[offset + 1];
					final Symbol _symbol_type = _symbols[offset + 3];
					final TypeExpr type = (TypeExpr) _symbol_type.value;
					 return new Symbol(new ToolTypeAttribute((String)ID.value, type));
			}
			case 78: // actor_parameter_list = actor_parameter.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final ParDeclValue p = (ParDeclValue) _symbol_p.value;
					 return new Symbol(ImmutableList.builder().add(p));
			}
			case 79: // actor_parameter_list = actor_parameter_list.l COMMA actor_parameter.p
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final ParDeclValue p = (ParDeclValue) _symbol_p.value;
					 l.add(p); return _symbol_l;
			}
			case 82: // actor_parameter = IDENTIFIER.id opt$actor_parameter_init_expression.e
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(new ParDeclValue((String)id.value, null));
			}
			case 83: // actor_parameter = type.t IDENTIFIER.id opt$actor_parameter_init_expression.e
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(new ParDeclValue((String)id.value, t));
			}
			case 84: // actor_parameter_init_expression = EQ expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return _symbol_e;
			}
			case 85: // qual_id = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 ArrayList l = new ArrayList(); l.add(id.value); return new Symbol(l);
			}
			case 86: // qual_id = IDENTIFIER.id DOT qual_id.l
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 3];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, id.value); return _symbol_l;
			}
			case 87: // variable = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(Variable.namedVariable((String) id.value));
			}
			case 88: // field = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(new Field((String) id.value));
			}
			case 89: // decl_list = decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return new Symbol(ImmutableList.builder().add(d));
			}
			case 90: // decl_list = decl_list.l COMMA decl.d
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 l.add(d); return _symbol_l;
			}
			case 91: // decl_block = VAR decl_list.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final ImmutableList.Builder d = (ImmutableList.Builder) _symbol_d.value;
					 return new Symbol(d.build());
			}
			case 92: // decl_block_opt = 
			{
					 return new Symbol(ImmutableList.empty());
			}
			case 93: // decl_block_opt = VAR decl_list.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final ImmutableList.Builder d = (ImmutableList.Builder) _symbol_d.value;
					 return new Symbol(d.build());
			}
			case 94: // decl = var_decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return _symbol_d;
			}
			case 95: // decl = fun_decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return _symbol_d;
			}
			case 96: // decl = proc_decl.d
			{
					final Symbol _symbol_d = _symbols[offset + 1];
					final DeclVar d = (DeclVar) _symbol_d.value;
					 return _symbol_d;
			}
			case 97: // var_decl = MUTABLE var_name_type.v
			{
					final Symbol _symbol_v = _symbols[offset + 2];
					final DeclVar v = (DeclVar) _symbol_v.value;
					 return new Symbol(new DeclVar(v.getType(), v.getName(), null, null, true));
			}
			case 98: // var_decl = MUTABLE var_name_type.v EQ expression.init
			{
					final Symbol _symbol_v = _symbols[offset + 2];
					final DeclVar v = (DeclVar) _symbol_v.value;
					final Symbol _symbol_init = _symbols[offset + 4];
					final Expression init = (Expression) _symbol_init.value;
					 return new Symbol(new DeclVar(v.getType(), v.getName(), null, init, false));
			}
			case 99: // var_decl = MUTABLE var_name_type.v EQCOLON expression.init
			{
					final Symbol _symbol_v = _symbols[offset + 2];
					final DeclVar v = (DeclVar) _symbol_v.value;
					final Symbol _symbol_init = _symbols[offset + 4];
					final Expression init = (Expression) _symbol_init.value;
					 return new Symbol(new DeclVar(v.getType(), v.getName(), null, init, true));
			}
			case 100: // var_decl = var_name_type.v
			{
					final Symbol _symbol_v = _symbols[offset + 1];
					final DeclVar v = (DeclVar) _symbol_v.value;
					 return new Symbol(new DeclVar(v.getType(), v.getName(), null, null, true));
			}
			case 101: // var_decl = var_name_type.v EQ expression.init
			{
					final Symbol _symbol_v = _symbols[offset + 1];
					final DeclVar v = (DeclVar) _symbol_v.value;
					final Symbol _symbol_init = _symbols[offset + 3];
					final Expression init = (Expression) _symbol_init.value;
					 return new Symbol(new DeclVar(v.getType(), v.getName(), null, init, false));
			}
			case 102: // var_decl = var_name_type.v COLONEQ expression.init
			{
					final Symbol _symbol_v = _symbols[offset + 1];
					final DeclVar v = (DeclVar) _symbol_v.value;
					final Symbol _symbol_init = _symbols[offset + 3];
					final Expression init = (Expression) _symbol_init.value;
					 return new Symbol(new DeclVar(v.getType(), v.getName(), null, init, true));
			}
			case 103: // var_name_type = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(new DeclVar(null, (String)id.value, null));
			}
			case 104: // var_name_type = type.type IDENTIFIER.id
			{
					final Symbol _symbol_type = _symbols[offset + 1];
					final TypeExpr type = (TypeExpr) _symbol_type.value;
					final Symbol id = _symbols[offset + 2];
					 return new Symbol(new DeclVar(type, (String)id.value, null));
			}
			case 105: // fun_decl = FUNCTION IDENTIFIER.id lambda_expr_body.lambda
			{
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_lambda = _symbols[offset + 3];
					final ExprLambda lambda = (ExprLambda) _symbol_lambda.value;
					 return new Symbol(new DeclVar(null, (String)id.value, null, lambda, false));
			}
			case 106: // proc_decl = PROCEDURE IDENTIFIER.id procedure_expr_body.body
			{
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_body = _symbols[offset + 3];
					final ExprProc body = (ExprProc) _symbol_body.value;
					 return new Symbol(new DeclVar(null, (String)id.value, null, body, false));
			}
			case 107: // port_decl = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(new PortDecl((String)id.value, null));
			}
			case 108: // port_decl = type.type IDENTIFIER.id
			{
					final Symbol _symbol_type = _symbols[offset + 1];
					final TypeExpr type = (TypeExpr) _symbol_type.value;
					final Symbol id = _symbols[offset + 2];
					 return new Symbol(new PortDecl((String)id.value, type));
			}
			case 109: // port_decl = MULTI IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 2];
					 return new Symbol(new PortDecl((String)id.value, null));
			}
			case 110: // port_decl = MULTI type.type IDENTIFIER.id
			{
					final Symbol _symbol_type = _symbols[offset + 2];
					final TypeExpr type = (TypeExpr) _symbol_type.value;
					final Symbol id = _symbols[offset + 3];
					 return new Symbol(new PortDecl((String)id.value, type));
			}
			case 111: // port_decl_list_opt = 
			{
					 return new Symbol(null);
			}
			case 112: // port_decl_list_opt = port_decl_list.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(l.build());
			}
			case 113: // port_decl_list = port_decl.port_decl
			{
					final Symbol _symbol_port_decl = _symbols[offset + 1];
					final PortDecl port_decl = (PortDecl) _symbol_port_decl.value;
					 return new Symbol(ImmutableList.builder().add(port_decl));
			}
			case 114: // port_decl_list = port_decl_list.l COMMA port_decl.d
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final PortDecl d = (PortDecl) _symbol_d.value;
					 l.add(d); return _symbol_l;
			}
			case 115: // type_bound = LT type.type
			{
					final Symbol _symbol_type = _symbols[offset + 2];
					final TypeExpr type = (TypeExpr) _symbol_type.value;
					 return _symbol_type;
			}
			case 116: // type_bound_opt = 
			{
					 return new Symbol(null);
			}
			case 117: // type_bound_opt = type_bound.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final TypeExpr n = (TypeExpr) _symbol_n.value;
					 return _symbol_n;
			}
			case 118: // type_parameter = IDENTIFIER.id type_bound_opt.type_bound
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_type_bound = _symbols[offset + 2];
					final TypeExpr type_bound = (TypeExpr) _symbol_type_bound.value;
					 return new Symbol(new ParDeclType((String)id.value));
			}
			case 121: // type_parameter_block = LBRACK opt$type_parameter_list.l RBRACK
			{
					final Symbol _symbol_l = _symbols[offset + 2];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(l == null ? null : l.build());
			}
			case 122: // type_parameter_list = type_parameter.tp
			{
					final Symbol _symbol_tp = _symbols[offset + 1];
					final ParDeclType tp = (ParDeclType) _symbol_tp.value;
					 return new Symbol(ImmutableList.builder().add(tp));
			}
			case 123: // type_parameter_list = type_parameter_list.l COMMA type_parameter.tp
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_tp = _symbols[offset + 3];
					final ParDeclType tp = (ParDeclType) _symbol_tp.value;
					 l.add(tp); return _symbol_l;
			}
			case 124: // type_list = type.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					 return new Symbol(ImmutableList.builder().add(t));
			}
			case 125: // type_list = type_list.l COMMA type.t
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					 l.add(t); return _symbol_l;
			}
			case 126: // type = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(new TypeExpr((String)id.value));
			}
			case 129: // type = IDENTIFIER.id LPAREN opt$type_attribute_list.attributes RPAREN
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_attributes = _symbols[offset + 3];
					final ArrayList attributes = (ArrayList) _symbol_attributes.value;
					 ImmutableList.Builder valueParameters = ImmutableList.builder();
                                                                   ImmutableList.Builder typeParameters = ImmutableList.builder();
                                                                   for(Map.Entry map : (ArrayList<Map.Entry>)attributes){
                                                                     if(map.getValue() instanceof Expression){
                                                                       valueParameters.add(ImmutableEntry.of(map.getKey(), map.getValue()));
                                                                     } else {
                                                                       typeParameters.add(ImmutableEntry.of(map.getKey(), map.getValue()));
                                                                     }
                                                                   }
                                                                   return new Symbol(new TypeExpr((String)id.value, typeParameters.build(), valueParameters.build()));
			}
			case 132: // type = LBRACK opt$type_list.param EDGE type.result_type RBRACK
			{
					final Symbol _symbol_param = _symbols[offset + 2];
					final ImmutableList.Builder param = (ImmutableList.Builder) _symbol_param.value;
					final Symbol _symbol_result_type = _symbols[offset + 4];
					final TypeExpr result_type = (TypeExpr) _symbol_result_type.value;
					 return new Symbol(null);
			}
			case 133: // type = LBRACK opt$type_list.param EDGE RBRACK
			{
					final Symbol _symbol_param = _symbols[offset + 2];
					final ImmutableList.Builder param = (ImmutableList.Builder) _symbol_param.value;
					 return new Symbol(null);
			}
			case 134: // type_attribute_list = type_attribute.t
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final Map.Entry t = (Map.Entry) _symbol_t.value;
					 ArrayList l = new ArrayList(); l.add(t); return new Symbol(l);
			}
			case 135: // type_attribute_list = type_attribute_list.l COMMA type_attribute.t
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList l = (ArrayList) _symbol_l.value;
					final Symbol _symbol_t = _symbols[offset + 3];
					final Map.Entry t = (Map.Entry) _symbol_t.value;
					 l.add(t); return _symbol_l;
			}
			case 136: // type_attribute = IDENTIFIER.id COLON type.type
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_type = _symbols[offset + 3];
					final TypeExpr type = (TypeExpr) _symbol_type.value;
					 return new Symbol(new AbstractMap.SimpleEntry((String)id.value, type));
			}
			case 137: // type_attribute = IDENTIFIER.id EQ expression.e
			{
					final Symbol id = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(new AbstractMap.SimpleEntry((String)id.value, e));
			}
			case 138: // edge_type = EDGE type.t
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					 return _symbol_t;
			}
			case 143: // procedure_expr_body = LPAREN opt$formal_parameter_list.param RPAREN opt$decl_block.decl stmt_block_opt.body end_proc
			{
					final Symbol _symbol_param = _symbols[offset + 2];
					final ImmutableList.Builder param = (ImmutableList.Builder) _symbol_param.value;
					final Symbol _symbol_decl = _symbols[offset + 4];
					final ImmutableList decl = (ImmutableList) _symbol_decl.value;
					final Symbol _symbol_body = _symbols[offset + 5];
					final ImmutableList body = (ImmutableList) _symbol_body.value;
					  return new Symbol(
            new ExprProc(
              null, 
              param==null ? ImmutableList.empty() : param.build(),
              new StmtBlock(null, decl, body)
            )
          );
			}
			case 144: // stmt_block_opt = 
			{
					 return new Symbol(ImmutableList.empty());
			}
			case 145: // stmt_block_opt = do_begin statement_list_opt.s
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final ImmutableList s = (ImmutableList) _symbol_s.value;
					 return _symbol_s;
			}
			case 146: // lambda_expr_body = LPAREN opt$formal_parameter_list.param RPAREN expression.body end_lambda
			{
					final Symbol _symbol_param = _symbols[offset + 2];
					final ImmutableList.Builder param = (ImmutableList.Builder) _symbol_param.value;
					final Symbol _symbol_body = _symbols[offset + 4];
					final Expression body = (Expression) _symbol_body.value;
					 return new Symbol(new ExprLambda(null,
                                             param==null ? null : param.build(),
                                             body,
                                             null));
			}
			case 147: // lambda_expr_body = LPAREN opt$formal_parameter_list.param RPAREN opt$decl_block.decl COLON expression.body end_lambda
			{
					final Symbol _symbol_param = _symbols[offset + 2];
					final ImmutableList.Builder param = (ImmutableList.Builder) _symbol_param.value;
					final Symbol _symbol_decl = _symbols[offset + 4];
					final ImmutableList decl = (ImmutableList) _symbol_decl.value;
					final Symbol _symbol_body = _symbols[offset + 6];
					final Expression body = (Expression) _symbol_body.value;
					 return new Symbol(new ExprLambda(null,
                                             param==null ? null : param.build(),
                                             new ExprLet(null, decl, body),
                                             null));
			}
			case 148: // lambda_expr_body = LPAREN opt$formal_parameter_list.param RPAREN edge_type.t opt$decl_block.decl COLON expression.body end_lambda
			{
					final Symbol _symbol_param = _symbols[offset + 2];
					final ImmutableList.Builder param = (ImmutableList.Builder) _symbol_param.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_decl = _symbols[offset + 5];
					final ImmutableList decl = (ImmutableList) _symbol_decl.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final Expression body = (Expression) _symbol_body.value;
					 return new Symbol(new ExprLambda(null,
                                             param==null ? null : param.build(),
                                             new ExprLet(null, decl, body),
                                             t));
			}
			case 149: // map_list = map_entry.m
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final Map.Entry m = (Map.Entry) _symbol_m.value;
					 return new Symbol(ImmutableList.builder().add(m));
			}
			case 150: // map_list = map_list.l COMMA map_entry.m
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_m = _symbols[offset + 3];
					final Map.Entry m = (Map.Entry) _symbol_m.value;
					 l.add(m); return _symbol_l;
			}
			case 151: // map_entry = expression.e1 ARROW expression.e2
			{
					final Symbol _symbol_e1 = _symbols[offset + 1];
					final Expression e1 = (Expression) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 3];
					final Expression e2 = (Expression) _symbol_e2.value;
					 return new Symbol(new AbstractMap.SimpleEntry(e1, e2));
			}
			case 152: // expression_list = expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(ImmutableList.builder().add(e));
			}
			case 153: // expression_list = expression_list.l COMMA expression.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expression e = (Expression) _symbol_e.value;
					 l.add(e); return _symbol_l;
			}
			case 154: // expression_list_opt = 
			{
					 return new Symbol(ImmutableList.empty());
			}
			case 155: // expression_list_opt = expression_list.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final ImmutableList.Builder n = (ImmutableList.Builder) _symbol_n.value;
					 return new Symbol(n.build());
			}
			case 156: // method_invocation = indexing_expression.function LPAREN expression_list_opt.args RPAREN
			{
					final Symbol _symbol_function = _symbols[offset + 1];
					final Expression function = (Expression) _symbol_function.value;
					final Symbol _symbol_args = _symbols[offset + 3];
					final ImmutableList args = (ImmutableList) _symbol_args.value;
					 return new Symbol(new ExprApplication(function, args));
			}
			case 157: // literal = INTEGER_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.Kind.Integer, ((String)txt.value)));
			}
			case 158: // literal = LONG_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.Kind.Integer, ((String)txt.value)));
			}
			case 159: // literal = FLOATING_POINT_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.Kind.Integer, ((String)txt.value)));
			}
			case 160: // literal = DOUBLE_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.Kind.Real, ((String)txt.value)));
			}
			case 161: // literal = TRUE_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.Kind.True, ((String)txt.value)));
			}
			case 162: // literal = FALSE_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.Kind.False, ((String)txt.value)));
			}
			case 163: // literal = CHARACTER_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.Kind.Char, ((String)txt.value)));
			}
			case 164: // literal = STRING_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.Kind.String, ((String)txt.value)));
			}
			case 165: // literal = NULL_LITERAL.txt
			{
					final Symbol txt = _symbols[offset + 1];
					 return new Symbol(new ExprLiteral(ExprLiteral.Kind.Null, ((String)txt.value)));
			}
			case 166: // primary = literal.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ExprLiteral l = (ExprLiteral) _symbol_l.value;
					 return _symbol_l;
			}
			case 167: // primary = LPAREN expression.e RPAREN
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					 return new ParenthesSymbol(_symbol_e);
			}
			case 168: // primary = LPAREN.start expression.e DOUBLECOLON type.t RPAREN
			{
					final Symbol start = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_t = _symbols[offset + 4];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					 parseProblems.add("Type assertion is not supported. Assertion is ignored at " + Symbol.getLine(start.getStart()) + ", " + Symbol.getColumn(start.getStart()));
			}
			case 169: // simple_expression = primary.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final Expression p = (Expression) _symbol_p.value;
					 return _symbol_p;
			}
			case 170: // simple_expression = variable.v
			{
					final Symbol _symbol_v = _symbols[offset + 1];
					final Variable v = (Variable) _symbol_v.value;
					 return new Symbol(new ExprVariable(v));
			}
			case 171: // simple_expression = OLD variable.v
			{
					final Symbol _symbol_v = _symbols[offset + 2];
					final Variable v = (Variable) _symbol_v.value;
					 return new Symbol(new ExprVariable(v));
			}
			case 172: // simple_expression = IF expression.c THEN expression.e1 ELSE expression.e2 END
			{
					final Symbol _symbol_c = _symbols[offset + 2];
					final Expression c = (Expression) _symbol_c.value;
					final Symbol _symbol_e1 = _symbols[offset + 4];
					final Expression e1 = (Expression) _symbol_e1.value;
					final Symbol _symbol_e2 = _symbols[offset + 6];
					final Expression e2 = (Expression) _symbol_e2.value;
					 return new Symbol(new ExprIf(c, e1, e2));
			}
			case 173: // simple_expression = LBRACE expression_list_opt.e RBRACE
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final ImmutableList e = (ImmutableList) _symbol_e.value;
					 return new Symbol(new ExprSet(e));
			}
			case 174: // simple_expression = LBRACE expression_list_opt.e COLON for_generator_list.l RBRACE
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final ImmutableList e = (ImmutableList) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(new ExprSet(e, l.build()));
			}
			case 175: // simple_expression = LBRACK expression_list_opt.e RBRACK
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final ImmutableList e = (ImmutableList) _symbol_e.value;
					 return new Symbol(new ExprList(e));
			}
			case 176: // simple_expression = LBRACK expression_list_opt.e COLON for_generator_list.l RBRACK
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final ImmutableList e = (ImmutableList) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(new ExprList(e, l.build()));
			}
			case 179: // simple_expression = MAP LBRACE opt$map_list.m RBRACE
			{
					final Symbol _symbol_m = _symbols[offset + 3];
					final ImmutableList.Builder m = (ImmutableList.Builder) _symbol_m.value;
					 return new Symbol(new ExprMap(m==null? null : m.build()));
			}
			case 180: // simple_expression = MAP LBRACE opt$map_list.m COLON for_generator_list.generators RBRACE
			{
					final Symbol _symbol_m = _symbols[offset + 3];
					final ImmutableList.Builder m = (ImmutableList.Builder) _symbol_m.value;
					final Symbol _symbol_generators = _symbols[offset + 5];
					final ImmutableList.Builder generators = (ImmutableList.Builder) _symbol_generators.value;
					 return new Symbol(new ExprMap(m==null? null : m.build(), generators.build()));
			}
			case 181: // simple_expression = LET decl_list.l COLON expression.e end_let
			{
					final Symbol _symbol_l = _symbols[offset + 2];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(new ExprLet(null, l.build(), e));
			}
			case 182: // simple_expression = LAMBDA lambda_expr_body.lambda
			{
					final Symbol _symbol_lambda = _symbols[offset + 2];
					final ExprLambda lambda = (ExprLambda) _symbol_lambda.value;
					 return _symbol_lambda;
			}
			case 183: // simple_expression = CONST LAMBDA lambda_expr_body.lambda
			{
					final Symbol _symbol_lambda = _symbols[offset + 3];
					final ExprLambda lambda = (ExprLambda) _symbol_lambda.value;
					 return _symbol_lambda;
			}
			case 184: // simple_expression = PROC procedure_expr_body.p
			{
					final Symbol _symbol_p = _symbols[offset + 2];
					final ExprProc p = (ExprProc) _symbol_p.value;
					 return _symbol_p;
			}
			case 185: // indexing_expression = simple_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expression e = (Expression) _symbol_e.value;
					 return _symbol_e;
			}
			case 186: // indexing_expression = indexer.i
			{
					final Symbol i = _symbols[offset + 1];
					 return i;
			}
			case 187: // indexing_expression = indexing_expression.p DOT field.f
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final Expression p = (Expression) _symbol_p.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final Field f = (Field) _symbol_f.value;
					 return new Symbol(new ExprField(p, f));
			}
			case 188: // indexing_expression = method_invocation.m
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final ExprApplication m = (ExprApplication) _symbol_m.value;
					 return _symbol_m;
			}
			case 189: // indexer = indexer_start.s expression.i RBRACK
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final Expression s = (Expression) _symbol_s.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final Expression i = (Expression) _symbol_i.value;
					 return new Symbol(new ExprIndexer(s, i));
			}
			case 190: // indexer_start = indexing_expression.e LBRACK
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expression e = (Expression) _symbol_e.value;
					 return _symbol_e;
			}
			case 191: // indexer_start = indexer_start.s expression.i COMMA
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final Expression s = (Expression) _symbol_s.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final Expression i = (Expression) _symbol_i.value;
					 return new Symbol(new ExprIndexer(s, i));
			}
			case 192: // unary_expression = indexing_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expression e = (Expression) _symbol_e.value;
					 return _symbol_e;
			}
			case 193: // unary_expression = operator.operator unary_expression.expr
			{
					final Symbol _symbol_operator = _symbols[offset + 1];
					final String operator = (String) _symbol_operator.value;
					final Symbol _symbol_expr = _symbols[offset + 2];
					final Expression expr = (Expression) _symbol_expr.value;
					 return new Symbol(new ExprUnaryOp(operator, expr));
			}
			case 194: // expression = unary_expression.e
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final Expression e = (Expression) _symbol_e.value;
					 return _symbol_e;
			}
			case 195: // expression = expression.arg1 operator.operator unary_expression.arg2
			{
					final Symbol _symbol_arg1 = _symbols[offset + 1];
					final Expression arg1 = (Expression) _symbol_arg1.value;
					final Symbol _symbol_operator = _symbols[offset + 2];
					final String operator = (String) _symbol_operator.value;
					final Symbol _symbol_arg2 = _symbols[offset + 3];
					final Expression arg2 = (Expression) _symbol_arg2.value;
					 ImmutableList<String> operators;
                                                               ImmutableList<Expression> operands;
                                                               boolean arg1IsPar = _symbol_arg1 instanceof ParenthesSymbol;
                                                               if((arg1 instanceof ExprBinaryOp) && !(arg1IsPar)){
                                                                 ExprBinaryOp expr = (ExprBinaryOp)arg1;
                                                                 operators = ImmutableList.<String>builder().addAll(expr.getOperations()).add(operator).build();
                                                                 operands = ImmutableList.<Expression>builder().addAll(expr.getOperands()).add(arg2).build();
                                                               } else {
                                                                 operators = ImmutableList.of(operator);
                                                                 operands = ImmutableList.of(arg1, arg2);
                                                               }
                                                               return new Symbol(new ExprBinaryOp(operators, operands));
			}
			case 196: // operator = OPERATOR.op
			{
					final Symbol op = _symbols[offset + 1];
					 return op;
			}
			case 197: // operator = EQ.op
			{
					final Symbol op = _symbols[offset + 1];
					 return op;
			}
			case 198: // operator = IN.op
			{
					final Symbol op = _symbols[offset + 1];
					 return op;
			}
			case 199: // operator = GT.op
			{
					final Symbol op = _symbols[offset + 1];
					 return op;
			}
			case 200: // operator = MULT.op
			{
					final Symbol op = _symbols[offset + 1];
					 return op;
			}
			case 201: // operator = BAR.op
			{
					final Symbol op = _symbols[offset + 1];
					 return op;
			}
			case 202: // formal_parameter = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(new ParDeclValue((String)id.value, null));
			}
			case 203: // formal_parameter = type.t IDENTIFIER.id
			{
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol id = _symbols[offset + 2];
					 return new Symbol(new ParDeclValue((String)id.value, t));
			}
			case 204: // formal_parameter_list = formal_parameter.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final ParDeclValue p = (ParDeclValue) _symbol_p.value;
					 return new Symbol(ImmutableList.builder().add(p));
			}
			case 205: // formal_parameter_list = formal_parameter_list.l COMMA formal_parameter.p
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_p = _symbols[offset + 3];
					final ParDeclValue p = (ParDeclValue) _symbol_p.value;
					 l.add(p);  return _symbol_l;
			}
			case 206: // statement = expression.lhs COLONEQ expression.value SEMICOLON
			{
					final Symbol _symbol_lhs = _symbols[offset + 1];
					final Expression lhs = (Expression) _symbol_lhs.value;
					final Symbol _symbol_value = _symbols[offset + 3];
					final Expression value = (Expression) _symbol_value.value;
					 LValue lvalue = expressionToLValue(lhs);
                                                         if (lvalue != null) return new Symbol(new StmtAssignment(lvalue, value));
                                                         newError("Illegal left hand sign of assignment.", _symbol_lhs);
                                                         return new Symbol(new StmtAssignment(new LValueVariable(Variable.namedVariable("$illegal")), value));
			}
			case 207: // statement = method_invocation.m SEMICOLON
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final ExprApplication m = (ExprApplication) _symbol_m.value;
					 return new Symbol(new StmtCall(m.getFunction(), m.getArgs()));
			}
			case 208: // statement = BEGIN statement_list_opt.s END
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final ImmutableList s = (ImmutableList) _symbol_s.value;
					 return new Symbol(new StmtBlock(null, null, s));
			}
			case 209: // statement = BEGIN VAR decl_list.d DO statement_list_opt.s END
			{
					final Symbol _symbol_d = _symbols[offset + 3];
					final ImmutableList.Builder d = (ImmutableList.Builder) _symbol_d.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final ImmutableList s = (ImmutableList) _symbol_s.value;
					 return new Symbol(new StmtBlock(null, d.build(), s));
			}
			case 210: // statement = IF expression.e THEN statement_list_opt.s end_if
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final ImmutableList s = (ImmutableList) _symbol_s.value;
					 return new Symbol(new StmtIf(e, new StmtBlock(null, null, s), null));
			}
			case 211: // statement = IF expression.e THEN statement_list_opt.s1 ELSE statement_list_opt.s2 end_if
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_s1 = _symbols[offset + 4];
					final ImmutableList s1 = (ImmutableList) _symbol_s1.value;
					final Symbol _symbol_s2 = _symbols[offset + 6];
					final ImmutableList s2 = (ImmutableList) _symbol_s2.value;
					 return new Symbol(new StmtIf(e, 
                                                                                                                 new StmtBlock(null, null, s1),
                                                                                                                 new StmtBlock(null, null, s2)));
			}
			case 212: // statement = WHILE expression.e decl_block_opt.d DO statement_list_opt.s end_while
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_d = _symbols[offset + 3];
					final ImmutableList d = (ImmutableList) _symbol_d.value;
					final Symbol _symbol_s = _symbols[offset + 5];
					final ImmutableList s = (ImmutableList) _symbol_s.value;
					 return new Symbol(new StmtWhile(e, new StmtBlock(null, d, s)));
			}
			case 216: // statement = for_generator_list.g DO statement_list_opt.s end_foreach
			{
					final Symbol _symbol_g = _symbols[offset + 1];
					final ImmutableList.Builder g = (ImmutableList.Builder) _symbol_g.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final ImmutableList s = (ImmutableList) _symbol_s.value;
					 return new Symbol(new StmtForeach(g.build(), new StmtBlock(null, null, s)));
			}
			case 217: // statement = for_generator_list.g decl_block.d DO statement_list_opt.s end_foreach
			{
					final Symbol _symbol_g = _symbols[offset + 1];
					final ImmutableList.Builder g = (ImmutableList.Builder) _symbol_g.value;
					final Symbol _symbol_d = _symbols[offset + 2];
					final ImmutableList d = (ImmutableList) _symbol_d.value;
					final Symbol _symbol_s = _symbols[offset + 4];
					final ImmutableList s = (ImmutableList) _symbol_s.value;
					 return new Symbol(new StmtForeach(g.build(), new StmtBlock(null, d, s)));
			}
			case 218: // choose_generator_list = CHOOSE generator_variable_list.vars IN expression.e
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					 ArrayList l = new ArrayList(); l.add(makeGeneratorFilter(null, vars.build(), e, null)); return new Symbol(l);
			}
			case 219: // choose_generator_list = CHOOSE type.t generator_variable_list.vars IN expression.e
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					 ArrayList l = new ArrayList(); l.add(makeGeneratorFilter(t, vars.build(), e, null)); return new Symbol(l);
			}
			case 220: // choose_generator_list = CHOOSE generator_variable_list.vars IN expression.e COMMA expression_list.filters
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 6];
					final ImmutableList.Builder filters = (ImmutableList.Builder) _symbol_filters.value;
					 ArrayList l = new ArrayList(); l.add(makeGeneratorFilter(null, vars.build(), e, filters.build())); return new Symbol(l);
			}
			case 221: // choose_generator_list = CHOOSE type.t generator_variable_list.vars IN expression.e COMMA expression_list.filters
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 7];
					final ImmutableList.Builder filters = (ImmutableList.Builder) _symbol_filters.value;
					 ArrayList l = new ArrayList(); l.add(makeGeneratorFilter(t, vars.build(), e, filters.build())); return new Symbol(l);
			}
			case 222: // choose_generator_list = CHOOSE generator_variable_list.vars IN expression.e COMMA choose_generator_list.l
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 6];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, makeGeneratorFilter(null, vars.build(), e, null)); return _symbol_l;
			}
			case 223: // choose_generator_list = CHOOSE type.t generator_variable_list.vars IN expression.e COMMA choose_generator_list.l
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, makeGeneratorFilter(t, vars.build(), e, null)); return _symbol_l;
			}
			case 224: // choose_generator_list = CHOOSE generator_variable_list.vars IN expression.e COMMA expression_list.filters COMMA choose_generator_list.l
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 6];
					final ImmutableList.Builder filters = (ImmutableList.Builder) _symbol_filters.value;
					final Symbol _symbol_l = _symbols[offset + 8];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, makeGeneratorFilter(null, vars.build(), e, filters.build())); return _symbol_l;
			}
			case 225: // choose_generator_list = CHOOSE type.t generator_variable_list.vars IN expression.e COMMA expression_list.filters COMMA choose_generator_list.l
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 7];
					final ImmutableList.Builder filters = (ImmutableList.Builder) _symbol_filters.value;
					final Symbol _symbol_l = _symbols[offset + 9];
					final ArrayList l = (ArrayList) _symbol_l.value;
					 l.add(0, makeGeneratorFilter(t, vars.build(), e, filters.build())); return _symbol_l;
			}
			case 226: // for_generator_list = for_foreach generator_variable_list.vars IN expression.e
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(ImmutableList.builder().add(makeGeneratorFilter(null, vars.build(), e, null)));
			}
			case 227: // for_generator_list = for_foreach type.t generator_variable_list.vars IN expression.e
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					 return new Symbol(ImmutableList.builder().add(makeGeneratorFilter(t, vars.build(), e, null)));
			}
			case 228: // for_generator_list = for_foreach generator_variable_list.vars IN expression.e COMMA expression_list.filters
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 6];
					final ImmutableList.Builder filters = (ImmutableList.Builder) _symbol_filters.value;
					 return new Symbol(ImmutableList.builder().add(makeGeneratorFilter(null, vars.build(), e, filters.build())));
			}
			case 229: // for_generator_list = for_foreach type.t generator_variable_list.vars IN expression.e COMMA expression_list.filters
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 7];
					final ImmutableList.Builder filters = (ImmutableList.Builder) _symbol_filters.value;
					 return new Symbol(ImmutableList.builder().add((makeGeneratorFilter(t, vars.build(), e, filters.build()))));
			}
			case 230: // for_generator_list = for_foreach generator_variable_list.vars IN expression.e COMMA for_generator_list.l
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 6];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(ImmutableList.builder().add(makeGeneratorFilter(null, vars.build(), e, null)).addAll(l.build()));
			}
			case 231: // for_generator_list = for_foreach type.t generator_variable_list.vars IN expression.e COMMA for_generator_list.l
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_l = _symbols[offset + 7];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(ImmutableList.builder().add(makeGeneratorFilter(t, vars.build(), e, null)).addAll(l.build()));
			}
			case 232: // for_generator_list = for_foreach generator_variable_list.vars IN expression.e COMMA expression_list.filters COMMA for_generator_list.l
			{
					final Symbol _symbol_vars = _symbols[offset + 2];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 6];
					final ImmutableList.Builder filters = (ImmutableList.Builder) _symbol_filters.value;
					final Symbol _symbol_l = _symbols[offset + 8];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(ImmutableList.builder().add(makeGeneratorFilter(null, vars.build(), e, filters.build())).addAll(l.build()));
			}
			case 233: // for_generator_list = for_foreach type.t generator_variable_list.vars IN expression.e COMMA expression_list.filters COMMA for_generator_list.l
			{
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeExpr t = (TypeExpr) _symbol_t.value;
					final Symbol _symbol_vars = _symbols[offset + 3];
					final ImmutableList.Builder vars = (ImmutableList.Builder) _symbol_vars.value;
					final Symbol _symbol_e = _symbols[offset + 5];
					final Expression e = (Expression) _symbol_e.value;
					final Symbol _symbol_filters = _symbols[offset + 7];
					final ImmutableList.Builder filters = (ImmutableList.Builder) _symbol_filters.value;
					final Symbol _symbol_l = _symbols[offset + 9];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(ImmutableList.builder().add(makeGeneratorFilter(t, vars.build(), e, filters.build())).addAll(l.build()));
			}
			case 234: // generator_variable_list = IDENTIFIER.id
			{
					final Symbol id = _symbols[offset + 1];
					 return new Symbol(ImmutableList.builder().add(id.value));
			}
			case 235: // generator_variable_list = generator_variable_list.l COMMA IDENTIFIER.id
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol id = _symbols[offset + 3];
					 l.add(id.value); return _symbol_l;
			}
			case 254: // statement_list_opt = 
			{
					 return new Symbol(ImmutableList.empty());
			}
			case 255: // statement_list_opt = statement_list.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					 return new Symbol(l.build());
			}
			case 256: // statement_list = statement.n
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final Statement n = (Statement) _symbol_n.value;
					 return new Symbol(ImmutableList.builder().add(n));
			}
			case 257: // statement_list = statement_list.l statement.n
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ImmutableList.Builder l = (ImmutableList.Builder) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 2];
					final Statement n = (Statement) _symbol_n.value;
					 l.add(n); return _symbol_l;
			}
			case 0: // opt$type_parameter_block = 
			case 2: // opt$actor_parameter_list = 
			case 6: // opt$lst$network_body_part = 
			case 8: // opt$SEMICOLON = 
			case 18: // opt$lst$network_decl = 
			case 26: // opt$lst$entity = 
			case 30: // opt$param_assign_list = 
			case 32: // opt$tool_attribute_block = 
			case 36: // opt$entity_expr_list = 
			case 47: // opt$lst$entity_statement = 
			case 56: // opt$lst$entity_indexing = 
			case 71: // opt$lst$tool_attribute = 
			case 80: // opt$actor_parameter_init_expression = 
			case 119: // opt$type_parameter_list = 
			case 127: // opt$type_attribute_list = 
			case 130: // opt$type_list = 
			case 139: // opt$formal_parameter_list = 
			case 141: // opt$decl_block = 
			case 177: // opt$map_list = 
			{
				return new Symbol(null);
			}
			case 1: // opt$type_parameter_block = type_parameter_block
			case 3: // opt$actor_parameter_list = actor_parameter_list
			case 7: // opt$lst$network_body_part = lst$network_body_part
			case 9: // opt$SEMICOLON = SEMICOLON
			case 19: // opt$lst$network_decl = lst$network_decl
			case 27: // opt$lst$entity = lst$entity
			case 31: // opt$param_assign_list = param_assign_list
			case 33: // opt$tool_attribute_block = tool_attribute_block
			case 37: // opt$entity_expr_list = entity_expr_list
			case 48: // opt$lst$entity_statement = lst$entity_statement
			case 57: // opt$lst$entity_indexing = lst$entity_indexing
			case 72: // opt$lst$tool_attribute = lst$tool_attribute
			case 76: // end_network = END
			case 77: // end_network = ENDNETWORK
			case 81: // opt$actor_parameter_init_expression = actor_parameter_init_expression
			case 120: // opt$type_parameter_list = type_parameter_list
			case 128: // opt$type_attribute_list = type_attribute_list
			case 131: // opt$type_list = type_list
			case 140: // opt$formal_parameter_list = formal_parameter_list
			case 142: // opt$decl_block = decl_block
			case 178: // opt$map_list = map_list
			case 236: // for_foreach = FOREACH.FOREACH
			case 237: // for_foreach = FOR.FOR
			case 238: // do_begin = BEGIN.BEGIN
			case 239: // do_begin = DO.DO
			case 240: // end_choose = END.END
			case 241: // end_choose = ENDCHOOSE.ENDCHOOSE
			case 242: // end_foreach = END.END
			case 243: // end_foreach = ENDFOREACH.ENDFOREACH
			case 244: // end_if = END.END
			case 245: // end_if = ENDIF.ENDIF
			case 246: // end_lambda = END.END
			case 247: // end_lambda = ENDLAMBDA.ENDLAMBDA
			case 248: // end_let = END.END
			case 249: // end_let = ENDLET.ENDLET
			case 250: // end_proc = END.END
			case 251: // end_proc = ENDPROC.ENDPROC
			case 252: // end_while = END.END
			case 253: // end_while = ENDWHILE.ENDWHILE
			{
				return _symbols[offset + 1];
			}
			case 213: // statement = choose_generator_list.l decl_block_opt.do_v DO statement_list_opt.do_s end_choose
			{
				return _symbols[offset + 4];
			}
			case 214: // statement = choose_generator_list.l decl_block_opt.do_v DO statement_list_opt.do_s ELSE statement_list_opt.else_s end_choose
			{
				return _symbols[offset + 6];
			}
			case 215: // statement = choose_generator_list.l decl_block_opt.do_v DO statement_list_opt.do_s ELSE decl_block_opt.else_v DO statement_list_opt.else_s end_choose
			{
				return _symbols[offset + 8];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
