/* The following code was generated by JFlex 1.4.3 on 2013-06-27 13:25 */

package net.opendf.parser.lth; // The generated parser will belong to package AST_CAL

import beaver.Symbol;
import beaver.Scanner;
import net.opendf.parser.lth.CalParser.Terminals; // The terminals are implicitly defined in the parser
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2013-06-27 13:25 from the specification file
 * <tt>/Users/pera/workspace/dataflow/bin/generated/CalScanner.flex</tt>
 */
public final class CalScanner extends beaver.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\1\1\0\1\3\1\2\16\7\4\0\1\3\1\11"+
    "\1\25\1\11\1\12\2\11\1\24\1\62\1\63\1\5\1\23\1\71"+
    "\1\72\1\21\1\4\1\14\3\26\4\20\2\17\1\61\1\70\1\11"+
    "\1\13\1\73\2\11\3\16\1\60\1\22\1\57\5\6\1\56\13\6"+
    "\1\15\2\6\1\66\1\10\1\67\1\11\1\74\1\0\1\27\1\40"+
    "\1\30\1\45\1\41\1\46\1\42\1\43\1\32\2\6\1\36\1\50"+
    "\1\34\1\33\1\51\1\6\1\35\1\44\1\31\1\52\1\47\1\53"+
    "\1\55\1\37\1\54\1\64\1\11\1\65\1\11\41\7\2\0\4\6"+
    "\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\21\6"+
    "\1\12\5\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6"+
    "\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6\2\0"+
    "\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0"+
    "\123\6\1\0\213\6\1\0\5\7\2\0\236\6\11\0\46\6\2\0"+
    "\1\6\7\0\47\6\11\0\55\7\1\0\1\7\1\0\2\7\1\0"+
    "\2\7\1\0\1\7\10\0\33\6\5\0\3\6\15\0\4\7\7\0"+
    "\1\6\4\0\13\7\5\0\53\6\37\7\4\0\2\6\1\7\143\6"+
    "\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6"+
    "\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7"+
    "\2\0\131\6\13\7\1\6\16\0\12\7\41\6\11\7\2\6\4\0"+
    "\1\6\5\0\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7"+
    "\22\0\31\6\3\7\244\0\4\7\66\6\3\7\1\6\22\7\1\6"+
    "\7\7\12\6\2\7\2\0\12\7\1\0\7\6\1\0\7\6\1\0"+
    "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0"+
    "\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0"+
    "\12\7\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7"+
    "\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0\3\7"+
    "\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7"+
    "\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0"+
    "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0"+
    "\3\7\10\0\2\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7"+
    "\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0"+
    "\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0"+
    "\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0"+
    "\1\6\6\0\1\7\16\0\12\7\11\0\1\6\7\0\3\7\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\3\0"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0\2\6"+
    "\6\0\2\6\2\7\2\0\12\7\22\0\2\7\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0"+
    "\2\6\2\7\2\0\12\7\1\0\2\6\17\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\51\6\2\0\1\6\7\7\1\0\3\7\1\0"+
    "\4\7\1\6\10\0\1\7\10\0\2\6\2\7\2\0\12\7\12\0"+
    "\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0"+
    "\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0"+
    "\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6"+
    "\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0"+
    "\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0"+
    "\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7"+
    "\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0"+
    "\12\7\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0"+
    "\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\44\6"+
    "\4\0\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0\1\7"+
    "\71\0\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6\3\7"+
    "\1\6\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6\17\7"+
    "\2\0\46\6\12\0\53\6\1\0\1\6\3\0\u0149\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6"+
    "\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6"+
    "\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7"+
    "\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6"+
    "\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7\13\0"+
    "\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0"+
    "\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0"+
    "\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6\1\7"+
    "\1\6\5\0\106\6\12\0\35\6\3\0\14\7\4\0\14\7\12\0"+
    "\12\7\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6\2\7"+
    "\6\0\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7"+
    "\2\0\13\7\6\0\12\7\15\0\1\6\130\0\5\7\57\6\21\7"+
    "\7\6\4\0\12\7\21\0\11\7\14\0\3\7\36\6\12\7\3\0"+
    "\2\6\12\7\6\0\46\6\16\7\14\0\44\6\24\7\10\0\12\7"+
    "\3\0\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6\1\7"+
    "\4\6\1\7\15\0\300\6\47\7\25\0\4\7\u0116\6\2\0\6\6"+
    "\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6"+
    "\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6"+
    "\5\0\3\6\1\0\7\6\16\0\5\7\32\0\5\7\20\0\2\6"+
    "\23\0\1\6\13\0\5\7\5\0\6\7\1\0\1\6\15\0\1\6"+
    "\20\0\15\6\3\0\32\6\26\0\15\7\4\0\1\7\3\0\14\7"+
    "\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6"+
    "\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6"+
    "\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6"+
    "\1\0\57\6\1\0\205\6\6\0\4\6\3\7\16\0\46\6\12\0"+
    "\66\6\11\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6"+
    "\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0"+
    "\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0"+
    "\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cc\6\64\0\u048d\6\103\0"+
    "\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7"+
    "\14\0\2\7\1\0\31\6\10\0\120\6\2\7\45\0\11\6\2\0"+
    "\147\6\2\0\4\6\1\0\2\6\16\0\12\6\120\0\10\6\1\7"+
    "\3\6\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0\64\6"+
    "\14\0\2\7\62\6\21\7\13\0\12\7\6\0\22\7\6\6\3\0"+
    "\1\6\4\0\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6"+
    "\3\0\4\7\57\6\16\7\16\0\1\6\12\7\46\0\51\6\16\7"+
    "\11\0\3\6\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0"+
    "\1\6\1\7\4\0\60\6\1\7\1\6\3\7\2\6\2\7\5\6"+
    "\2\7\1\6\1\7\1\6\30\0\3\6\43\0\6\6\2\0\6\6"+
    "\2\0\6\6\11\0\7\6\1\0\7\6\221\0\43\6\10\7\1\0"+
    "\2\7\2\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0"+
    "\u012e\6\2\0\76\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0"+
    "\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0"+
    "\66\6\50\0\15\6\3\0\20\7\20\0\7\7\14\0\2\6\30\0"+
    "\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0"+
    "\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6\13\0"+
    "\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0"+
    "\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\1\2\3"+
    "\1\6\2\7\1\10\1\1\1\11\22\5\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\3"+
    "\1\23\1\24\2\25\1\1\1\26\1\2\1\3\1\0"+
    "\1\27\1\0\1\7\2\0\1\30\1\0\1\31\1\32"+
    "\1\33\1\30\1\34\1\0\2\35\1\0\1\5\1\36"+
    "\7\5\1\37\1\40\1\5\1\34\16\5\1\41\13\5"+
    "\1\42\1\43\1\3\1\44\1\45\1\46\2\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\0\1\3"+
    "\1\57\1\60\1\7\1\61\1\30\1\0\1\62\12\45"+
    "\1\5\1\63\1\64\1\65\10\5\1\66\4\5\1\67"+
    "\2\5\1\70\5\5\1\71\1\72\1\5\1\73\1\74"+
    "\5\5\1\75\1\47\1\0\1\2\1\76\1\77\1\0"+
    "\1\100\1\0\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\4\5\1\110\1\111\1\112\3\5\1\113\15\5"+
    "\1\114\11\5\1\115\2\5\1\116\1\117\11\5\1\120"+
    "\3\5\1\121\6\5\1\122\1\5\1\123\1\124\3\5"+
    "\1\125\2\5\1\126\1\127\1\130\2\5\1\131\1\132"+
    "\1\133\1\134\4\5\1\135\23\5\1\136\2\5\1\137"+
    "\1\5\1\140\5\5\1\141\5\5\1\142\1\143\1\144"+
    "\1\145\2\5\1\146\1\147\1\150\1\5\1\151\2\5"+
    "\1\152\1\153\2\5\1\154\1\5\1\155\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\172\0\267\0\364\0\u0131\0\u016e"+
    "\0\u01ab\0\u0131\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319"+
    "\0\172\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4"+
    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac"+
    "\0\u06e9\0\u0726\0\u0763\0\u07a0\0\172\0\172\0\172\0\172"+
    "\0\172\0\172\0\172\0\172\0\u07dd\0\u0131\0\u081a\0\172"+
    "\0\u0857\0\u0894\0\172\0\u08d1\0\u090e\0\u01ab\0\172\0\u094b"+
    "\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\172\0\172\0\172"+
    "\0\u0ab9\0\172\0\u0af6\0\172\0\u0b33\0\u0b70\0\u0bad\0\u0bea"+
    "\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2"+
    "\0\u016e\0\u0e0f\0\u016e\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40"+
    "\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128"+
    "\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310"+
    "\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\172\0\172\0\u147e"+
    "\0\u0131\0\172\0\172\0\u14bb\0\u14f8\0\172\0\172\0\172"+
    "\0\172\0\172\0\172\0\172\0\u1535\0\u1572\0\172\0\172"+
    "\0\u15af\0\u15ec\0\u1629\0\u1666\0\172\0\u16a3\0\u16e0\0\u171d"+
    "\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905"+
    "\0\172\0\u016e\0\u016e\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36"+
    "\0\u1a73\0\u1ab0\0\u1aed\0\u016e\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1"+
    "\0\u016e\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c"+
    "\0\u1dc9\0\u1e06\0\u016e\0\u1e43\0\u016e\0\u016e\0\u1e80\0\u1ebd"+
    "\0\u1efa\0\u1f37\0\u1f74\0\u0131\0\172\0\u1fb1\0\u0131\0\172"+
    "\0\172\0\u171d\0\172\0\u1fee\0\172\0\172\0\172\0\172"+
    "\0\172\0\172\0\172\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u016e"+
    "\0\u016e\0\u016e\0\u211f\0\u215c\0\u2199\0\u016e\0\u21d6\0\u2213"+
    "\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb"+
    "\0\u2438\0\u2475\0\u24b2\0\u016e\0\u24ef\0\u252c\0\u2569\0\u25a6"+
    "\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e"+
    "\0\u016e\0\u016e\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc"+
    "\0\u2939\0\u2976\0\u29b3\0\u016e\0\u29f0\0\u2a2d\0\u2a6a\0\u016e"+
    "\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u016e\0\u2c15"+
    "\0\u016e\0\u016e\0\u2c52\0\u2c8f\0\u2ccc\0\u016e\0\u2d09\0\u2d46"+
    "\0\u016e\0\u016e\0\u016e\0\u2d83\0\u2dc0\0\u016e\0\u016e\0\u016e"+
    "\0\u016e\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u016e\0\u2ef1\0\u2f2e"+
    "\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116"+
    "\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe"+
    "\0\u333b\0\u016e\0\u3378\0\u33b5\0\u016e\0\u33f2\0\u016e\0\u342f"+
    "\0\u346c\0\u34a9\0\u34e6\0\u3523\0\u016e\0\u3560\0\u359d\0\u35da"+
    "\0\u3617\0\u3654\0\u016e\0\u016e\0\u016e\0\u016e\0\u3691\0\u36ce"+
    "\0\u016e\0\u016e\0\u016e\0\u370b\0\u016e\0\u3748\0\u3785\0\u016e"+
    "\0\u016e\0\u37c2\0\u37ff\0\u016e\0\u383c\0\u016e\0\u016e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\7\1\10\1\3"+
    "\1\11\1\12\1\13\1\14\1\15\2\10\2\16\1\17"+
    "\1\10\1\12\1\20\1\21\1\16\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\10\1\32\1\33"+
    "\1\34\1\10\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\10\1\43\5\10\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\10\1\57"+
    "\1\60\1\61\5\57\1\62\14\57\1\63\47\57\76\0"+
    "\1\4\77\0\1\64\1\65\3\0\3\12\7\0\1\12"+
    "\46\0\2\12\5\0\2\12\3\0\3\12\7\0\1\12"+
    "\46\0\2\12\7\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\33\10\13\0\1\10\10\66\1\67"+
    "\64\66\4\0\2\12\2\10\1\0\1\12\1\13\1\12"+
    "\5\10\1\0\1\10\1\12\2\0\33\10\11\0\2\12"+
    "\1\10\13\0\1\70\75\0\1\71\1\72\1\0\1\73"+
    "\1\71\1\74\1\75\3\0\1\71\7\0\1\76\2\0"+
    "\1\75\3\0\1\77\1\100\6\0\1\72\1\76\1\100"+
    "\1\77\30\0\1\16\2\0\2\16\1\74\1\75\3\0"+
    "\1\16\7\0\1\76\2\0\1\75\3\0\1\77\1\100"+
    "\7\0\1\76\1\100\1\77\30\0\1\101\2\0\2\101"+
    "\1\102\4\0\1\101\46\0\1\103\1\104\1\105\5\103"+
    "\1\106\13\103\1\0\50\103\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\2\10\1\107\1\110"+
    "\2\10\1\111\1\10\1\112\22\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\5\10\1\113\7\10\1\114\15\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\4\10\1\115\2\10\1\116\5\10\1\117\15\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\6\10\1\120\11\10\1\121\1\10\1\122"+
    "\10\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\7\10\1\123\1\124\22\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\5\10\1\125\16\10\1\126\6\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\6\10\1\127\4\10\1\130\17\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\1\10\1\131\11\10\1\132\17\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\4\10\1\133\6\10\1\134\17\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\6\10\1\135\1\10\1\136\22\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\24\10\1\137\6\10\13\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\2\10\1\140\30\10\13\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\4\10"+
    "\1\141\1\142\5\10\1\143\17\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\1\10\1\144\3\10\1\145\10\10\1\146\5\10\1\147"+
    "\6\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\1\10\1\150\31\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\1\10\1\151\3\10\1\152\16\10\1\153"+
    "\6\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\7\10\1\154\23\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\15\10\1\155\15\10\13\0\1\10\13\0"+
    "\1\156\45\0\1\157\17\0\2\12\3\0\3\12\7\0"+
    "\1\12\46\0\1\160\1\161\1\0\1\57\2\0\5\57"+
    "\1\0\14\57\1\0\47\57\1\0\1\60\73\0\1\162"+
    "\1\0\6\162\1\163\3\162\1\164\3\162\1\165\3\162"+
    "\1\166\1\167\1\164\2\162\1\170\2\162\1\171\1\172"+
    "\2\162\1\173\5\162\1\174\26\162\1\64\1\4\1\5"+
    "\72\64\4\175\1\65\1\176\3\175\3\65\7\175\1\65"+
    "\46\175\2\65\1\175\73\0\1\177\15\0\1\71\2\0"+
    "\1\73\1\71\1\101\1\75\3\0\1\71\7\0\1\200"+
    "\2\0\1\75\3\0\1\77\1\100\7\0\1\200\1\100"+
    "\1\77\30\0\1\201\1\0\3\201\1\0\1\201\3\0"+
    "\3\201\7\0\2\201\3\0\2\201\10\0\2\201\30\0"+
    "\1\73\2\0\2\73\1\101\1\75\3\0\1\73\12\0"+
    "\1\75\3\0\1\77\1\100\10\0\1\100\1\77\30\0"+
    "\1\101\2\0\2\101\1\202\1\75\3\0\1\101\12\0"+
    "\1\75\3\0\1\77\1\100\10\0\1\100\1\77\30\0"+
    "\1\203\2\0\2\203\2\0\1\204\2\0\1\203\43\0"+
    "\1\204\16\0\1\101\2\0\2\101\1\0\1\75\3\0"+
    "\1\101\12\0\1\75\3\0\1\77\1\100\10\0\1\100"+
    "\1\77\40\0\1\205\51\0\1\104\73\0\1\162\1\0"+
    "\6\162\1\206\3\162\1\207\3\162\1\210\3\162\1\211"+
    "\1\212\1\207\2\162\1\213\2\162\1\214\1\215\2\162"+
    "\1\216\5\162\1\217\26\162\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\3\10\1\220\27\10"+
    "\13\0\1\10\5\0\1\221\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\33\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\11\10\1\222\5\10\1\123\13\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\10\10\1\223\22\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\6\10\1\224"+
    "\24\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\5\10\1\225\25\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\22\10\1\226\10\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\24\10\1\227\6\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\13\10\1\230"+
    "\17\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\4\10\1\231\14\10\1\232"+
    "\11\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\23\10\1\233\7\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\17\10\1\234\13\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\3\10\1\123\27\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\10\10\1\235"+
    "\22\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\14\10\1\123\16\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\14\10\1\236\6\10\1\237\7\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\22\10\1\240\10\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\3\10\1\241\27\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\3\10\1\242"+
    "\27\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\14\10\1\243\16\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\17\10\1\244\13\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\16\10\1\245\14\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\1\10\1\246"+
    "\31\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\15\10\1\247\15\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\21\10\1\123\11\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\22\10\1\123\10\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\10\10\1\250"+
    "\22\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\10\10\1\251\22\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\7\10\1\252\23\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\22\10\1\253\10\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\6\10\1\254"+
    "\24\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\7\10\1\255\23\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\23\10\1\256\7\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\17\10\1\123\13\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\3\10\1\257"+
    "\4\10\1\260\22\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\4\10\1\261"+
    "\1\262\25\10\13\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\4\10\1\263\26\10"+
    "\13\0\1\10\4\0\2\12\3\0\3\12\7\0\1\12"+
    "\46\0\1\12\1\264\15\0\1\165\3\0\1\165\5\0"+
    "\1\165\62\0\1\265\3\0\1\265\5\0\1\265\46\0"+
    "\5\175\1\266\73\175\1\267\1\176\3\175\3\65\7\175"+
    "\1\65\46\175\2\65\1\175\14\0\1\201\1\0\3\201"+
    "\1\0\1\201\3\0\3\201\5\0\1\200\1\0\2\201"+
    "\3\0\2\201\7\0\1\200\2\201\35\0\1\270\67\0"+
    "\1\203\2\0\2\203\5\0\1\203\16\0\1\77\1\100"+
    "\10\0\1\100\1\77\30\0\1\203\2\0\2\203\5\0"+
    "\1\203\72\0\1\271\64\0\1\272\3\0\1\272\3\0"+
    "\1\273\1\0\1\272\62\0\1\274\3\0\1\274\3\0"+
    "\1\273\1\0\1\274\72\0\1\275\74\0\1\276\74\0"+
    "\1\277\74\0\1\300\74\0\1\301\74\0\1\302\74\0"+
    "\1\303\56\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\4\10\1\304\1\305\25\10\13\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\16\10\1\306\14\10\13\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\5\10"+
    "\1\307\25\10\13\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\13\10\1\310\17\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\13\10\1\311\17\10\13\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\6\10\1\312\24\10\13\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\3\10"+
    "\1\313\27\10\13\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\1\10\1\314\31\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\5\10\1\315\25\10\13\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\10\10\1\316\22\10\13\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\13\10"+
    "\1\317\17\10\13\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\13\10\1\320\17\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\12\10\1\321\20\10\13\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\33\10\13\0\1\322\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\4\10\1\323\26\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\1\10\1\324\1\325\1\10\1\326"+
    "\3\10\1\327\5\10\1\330\1\10\1\331\2\10\1\332"+
    "\1\10\1\333\5\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\13\10\1\334"+
    "\17\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\7\10\1\335\23\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\13\10\1\336\17\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\1\10\1\337\31\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\16\10\1\340"+
    "\14\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\13\10\1\341\17\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\2\10\1\342\30\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\1\10\1\343\31\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\3\10\1\344"+
    "\27\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\5\10\1\345\25\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\2\10\1\346\30\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\10\10\1\347\22\10\13\0\1\10\4\175\1\4\1\266"+
    "\67\175\24\0\1\273\56\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\5\10\1\350\25\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\7\10\1\351\23\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\3\10\1\352\27\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\16\10\1\353"+
    "\14\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\4\10\1\354\26\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\7\10\1\355\23\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\7\10\1\356\23\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\27\10\1\357"+
    "\3\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\1\10\1\360\31\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\17\10\1\361\13\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\5\10\1\362\21\10\1\363\3\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\6\10\1\364\24\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\2\10\1\365"+
    "\30\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\15\10\1\366\15\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\6\10\1\367\11\10\1\370\12\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\1\10\1\371\11\10\1\372\17\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\2\10\1\373\30\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\5\10\1\374\25\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\7\10\1\375"+
    "\23\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\15\10\1\376\15\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\17\10\1\377\13\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\17\10\1\u0100\13\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\11\10\1\u0101"+
    "\21\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\13\10\1\u0102\17\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\1\10\1\u0103\31\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\3\10\1\u0104\27\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\12\10\1\u0105"+
    "\20\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\4\10\1\u0106\26\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\7\10\1\u0107\23\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\13\10\1\u0108\17\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\13\10\1\u0109"+
    "\17\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\6\10\1\u010a\24\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\13\10\1\u010b\17\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\1\10\1\u010c\31\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\4\10\1\u010d"+
    "\26\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\3\10\1\u010e\27\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\23\10\1\u010f\7\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\3\10\1\u0110\27\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\1\10\1\u0111"+
    "\31\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\7\10\1\123\23\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\5\10\1\362\25\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\3\10\1\u0112\27\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\5\10\1\u0113"+
    "\25\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\21\10\1\u0114\11\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\22\10\1\u0115\10\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\3\10\1\u0116\27\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\15\10\1\u0117"+
    "\15\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\7\10\1\u0118\23\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\5\10\1\u0119\25\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\4\10\1\u011a\26\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\24\10\1\u011b"+
    "\6\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\2\10\1\u011c\30\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\4\10\1\u011d\26\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\10\10\1\u011e\22\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\4\10\1\u011f"+
    "\26\10\13\0\1\10\6\0\2\10\2\0\1\10\1\0"+
    "\5\10\1\0\1\10\3\0\17\10\1\u0120\13\10\13\0"+
    "\1\10\6\0\2\10\2\0\1\10\1\0\5\10\1\0"+
    "\1\10\3\0\10\10\1\u0121\22\10\13\0\1\10\6\0"+
    "\2\10\2\0\1\10\1\0\5\10\1\0\1\10\3\0"+
    "\1\10\1\u0122\31\10\13\0\1\10\6\0\2\10\2\0"+
    "\1\10\1\0\5\10\1\0\1\10\3\0\4\10\1\u0123"+
    "\1\u0124\25\10\13\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\5\10\1\u0125\25\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\1\10\1\u0126\31\10\13\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\12\10\1\u0127\20\10\13\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\13\10"+
    "\1\u0128\17\10\13\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\13\10\1\u0129\17\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\2\10\1\u012a\30\10\13\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\10\10\1\u012b\22\10\13\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\10\10"+
    "\1\u012c\22\10\13\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\15\10\1\u012d\15\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\5\10\1\u012e\25\10\13\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\13\10\1\u012f\17\10\13\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\3\10"+
    "\1\u0130\27\10\13\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\24\10\1\u0131\6\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\4\10\1\u0132\26\10\13\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\6\10\1\u0133\24\10\13\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\5\10"+
    "\1\u0134\25\10\13\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\7\10\1\u0135\23\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\16\10\1\u0136\14\10\13\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\7\10\1\u0137\23\10\13\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\17\10"+
    "\1\u0138\13\10\13\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\17\10\1\u0139\13\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\1\10\1\u013a\31\10\13\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\13\10\1\u013b\17\10\13\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\13\10"+
    "\1\u013c\17\10\13\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\6\10\1\u013d\24\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\11\10\1\u013e\21\10\13\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\7\10\1\u013f\23\10\13\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\26\10"+
    "\1\u0140\4\10\13\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\3\10\1\u0141\27\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\6\10\1\u0142\24\10\13\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\13\10\1\u0143\17\10\13\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\4\10"+
    "\1\u0144\26\10\13\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\1\10\1\u0145\31\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\24\10\1\u0146\6\10\13\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\2\10\1\u0147\30\10\13\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\13\10"+
    "\1\u0148\17\10\13\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\13\10\1\u0149\17\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\1\10\1\u014a\31\10\13\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\10\10\1\u014b\22\10\13\0\1\10\6\0\2\10"+
    "\2\0\1\10\1\0\5\10\1\0\1\10\3\0\15\10"+
    "\1\u014c\15\10\13\0\1\10\6\0\2\10\2\0\1\10"+
    "\1\0\5\10\1\0\1\10\3\0\6\10\1\u014d\24\10"+
    "\13\0\1\10\6\0\2\10\2\0\1\10\1\0\5\10"+
    "\1\0\1\10\3\0\13\10\1\u014e\17\10\13\0\1\10"+
    "\6\0\2\10\2\0\1\10\1\0\5\10\1\0\1\10"+
    "\3\0\3\10\1\u014f\27\10\13\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14457];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\14\1\1\11\23\1\10\11\3\1\1\11"+
    "\2\1\1\11\2\1\1\0\1\11\1\0\1\1\2\0"+
    "\1\1\1\0\3\11\1\1\1\11\1\0\1\11\1\1"+
    "\1\0\47\1\2\11\2\1\2\11\2\1\7\11\1\0"+
    "\1\1\2\11\3\1\1\0\1\11\13\1\1\11\43\1"+
    "\1\11\1\0\1\1\2\11\1\0\1\11\1\0\7\11"+
    "\214\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer strbuf = new StringBuffer(128);
  int sub_line;
  int sub_column;
  int strlit_start_line, strlit_start_column;

  private Symbol sym(short id) {
    return new Symbol(id, yyline + 1, yycolumn + 1, len(), str());
  }

  private Symbol sym(short id, String value) {
    return new Symbol(id, yyline + 1, yycolumn + 1, len(), value);
  }

  private Symbol sym(short id, String value, int start_line, int start_column, int len) {
    return new Symbol(id, start_line, start_column, len, value);
  }

  private String str() { return yytext(); }
  private int len() { return yylength(); }

  private void error(String msg) throws Scanner.Exception {
    throw new Scanner.Exception(yyline + 1, yycolumn + 1, msg);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CalScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CalScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 105: 
          { return sym(Terminals.ENDLAMBDA);
          }
        case 111: break;
        case 26: 
          { return sym(Terminals.DOUBLE_LITERAL, str().substring(0,len()-1));
          }
        case 112: break;
        case 106: 
          { return sym(Terminals.PROCEDURE);
          }
        case 113: break;
        case 84: 
          { return sym(Terminals.FALSE_LITERAL);
          }
        case 114: break;
        case 80: 
          { return sym(Terminals.BEGIN);
          }
        case 115: break;
        case 48: 
          { return sym(Terminals.LONG_LITERAL, str().substring(0, len()-1));
          }
        case 116: break;
        case 29: 
          { error("unterminated character literal at end of line");
          }
        case 117: break;
        case 63: 
          { return sym(Terminals.CHARACTER_LITERAL, "\\");
          }
        case 118: break;
        case 60: 
          { return sym(Terminals.MAP);
          }
        case 119: break;
        case 110: 
          { return sym(Terminals.ENDINVARIANT);
          }
        case 120: break;
        case 4: 
          { return sym(Terminals.MULT);
          }
        case 121: break;
        case 100: 
          { return sym(Terminals.FUNCTION);
          }
        case 122: break;
        case 36: 
          { return sym(Terminals.ARROW);
          }
        case 123: break;
        case 25: 
          { return sym(Terminals.LONG_LITERAL, str().substring(0,len()-1));
          }
        case 124: break;
        case 97: 
          { return sym(Terminals.ENDACTOR);
          }
        case 125: break;
        case 85: 
          { return sym(Terminals.MULTI);
          }
        case 126: break;
        case 19: 
          { return sym(Terminals.GT);
          }
        case 127: break;
        case 102: 
          { return sym(Terminals.INVARIANT);
          }
        case 128: break;
        case 21: 
          { error("unterminated string at end of line");
          }
        case 129: break;
        case 76: 
          { return sym(Terminals.ELSE);
          }
        case 130: break;
        case 103: 
          { return sym(Terminals.ENDACTION);
          }
        case 131: break;
        case 6: 
          { return sym(Terminals.EQ);
          }
        case 132: break;
        case 42: 
          { strbuf.append( '\t' );
          }
        case 133: break;
        case 70: 
          { return sym(Terminals.CHARACTER_LITERAL, "\b");
          }
        case 134: break;
        case 20: 
          { strbuf.append(str());
          }
        case 135: break;
        case 79: 
          { return sym(Terminals.CONST);
          }
        case 136: break;
        case 12: 
          { return sym(Terminals.RPAREN);
          }
        case 137: break;
        case 33: 
          { return sym(Terminals.DO);
          }
        case 138: break;
        case 55: 
          { return sym(Terminals.LET);
          }
        case 139: break;
        case 75: 
          { return sym(Terminals.NULL_LITERAL);
          }
        case 140: break;
        case 49: 
          { yypushback(2); return sym(Terminals.INTEGER_LITERAL);
          }
        case 141: break;
        case 73: 
          { return sym(Terminals.TRUE_LITERAL);
          }
        case 142: break;
        case 83: 
          { return sym(Terminals.DELAY);
          }
        case 143: break;
        case 56: 
          { return sym(Terminals.END);
          }
        case 144: break;
        case 59: 
          { return sym(Terminals.VAR);
          }
        case 145: break;
        case 64: 
          { int val = Integer.parseInt(str().substring(2,len()-1),8);
                                         return sym(Terminals.CHARACTER_LITERAL, new Character((char)val).toString());
          }
        case 146: break;
        case 3: 
          { // Some legal operator names are used in other parts of the language. Detect them.
                                   if(str().startsWith("->")){          // used by maps, "a->-b" is "a", "->", "-", "b"
                                     yypushback(str().length()-2);
                                     return sym(Terminals.ARROW, "->");
                                   }
                                   if("|".equals(str())){
                                     return sym(Terminals.BAR);
                                   }
                                   return sym(Terminals.OPERATOR);
          }
        case 147: break;
        case 71: 
          { return sym(Terminals.CHARACTER_LITERAL, "\f");
          }
        case 148: break;
        case 62: 
          { yypushback(2); return sym(Terminals.FLOATING_POINT_LITERAL);
          }
        case 149: break;
        case 43: 
          { strbuf.append( '\n' );
          }
        case 150: break;
        case 82: 
          { return sym(Terminals.GUARD);
          }
        case 151: break;
        case 54: 
          { return sym(Terminals.OLD);
          }
        case 152: break;
        case 61: 
          { return sym(Terminals.EDGE);
          }
        case 153: break;
        case 92: 
          { return sym(Terminals.LAMBDA);
          }
        case 154: break;
        case 52: 
          { return sym(Terminals.ANY);
          }
        case 155: break;
        case 31: 
          { return sym(Terminals.IN);
          }
        case 156: break;
        case 39: 
          { strbuf.append((char)Integer.parseInt(str().substring(1),8));
          }
        case 157: break;
        case 108: 
          { return sym(Terminals.ENDFOREACH);
          }
        case 158: break;
        case 98: 
          { return sym(Terminals.ENDWHILE);
          }
        case 159: break;
        case 11: 
          { return sym(Terminals.LPAREN);
          }
        case 160: break;
        case 95: 
          { return sym(Terminals.FOREACH);
          }
        case 161: break;
        case 35: 
          { return sym(Terminals.DOUBLECOLON);
          }
        case 162: break;
        case 24: 
          { return sym(Terminals.DOUBLE_LITERAL);
          }
        case 163: break;
        case 28: 
          { return sym(Terminals.OPERATOR);
          }
        case 164: break;
        case 68: 
          { return sym(Terminals.CHARACTER_LITERAL, "\n");
          }
        case 165: break;
        case 87: 
          { return sym(Terminals.ACTION);
          }
        case 166: break;
        case 66: 
          { return sym(Terminals.CHARACTER_LITERAL, "\"");
          }
        case 167: break;
        case 78: 
          { return sym(Terminals.ACTOR);
          }
        case 168: break;
        case 17: 
          { return sym(Terminals.SEMICOLON);
          }
        case 169: break;
        case 109: 
          { return sym(Terminals.ENDSCHEDULE);
          }
        case 170: break;
        case 16: 
          { return sym(Terminals.RBRACK);
          }
        case 171: break;
        case 37: 
          { error("illegal escape sequence \""+str()+"\"");
          }
        case 172: break;
        case 89: 
          { return sym(Terminals.IMPORT);
          }
        case 173: break;
        case 44: 
          { strbuf.append( '\r' );
          }
        case 174: break;
        case 45: 
          { strbuf.append( '\b' );
          }
        case 175: break;
        case 7: 
          { return sym(Terminals.INTEGER_LITERAL);
          }
        case 176: break;
        case 1: 
          { error("illegal character \""+str()+ "\"");
          }
        case 177: break;
        case 74: 
          { return sym(Terminals.THEN);
          }
        case 178: break;
        case 69: 
          { return sym(Terminals.CHARACTER_LITERAL, "\r");
          }
        case 179: break;
        case 91: 
          { return sym(Terminals.REPEAT);
          }
        case 180: break;
        case 32: 
          { return sym(Terminals.IF);
          }
        case 181: break;
        case 47: 
          { return sym(Terminals.PORTCONN);
          }
        case 182: break;
        case 104: 
          { return sym(Terminals.ENDCHOOSE);
          }
        case 183: break;
        case 41: 
          { strbuf.append( '\"' );
          }
        case 184: break;
        case 96: 
          { return sym(Terminals.MUTABLE);
          }
        case 185: break;
        case 65: 
          { return sym(Terminals.CHARACTER_LITERAL, "\'");
          }
        case 186: break;
        case 67: 
          { return sym(Terminals.CHARACTER_LITERAL, "\t");
          }
        case 187: break;
        case 10: 
          { return sym(Terminals.COLON);
          }
        case 188: break;
        case 57: 
          { return sym(Terminals.FOR);
          }
        case 189: break;
        case 40: 
          { strbuf.append( '\'' );
          }
        case 190: break;
        case 77: 
          { return sym(Terminals.PROC);
          }
        case 191: break;
        case 38: 
          { strbuf.append( '\\' );
          }
        case 192: break;
        case 23: 
          { return  sym(Terminals.IDENTIFIER, str().substring(1,len()-1));
          }
        case 193: break;
        case 14: 
          { return sym(Terminals.RBRACE);
          }
        case 194: break;
        case 53: 
          { return sym(Terminals.ALL);
          }
        case 195: break;
        case 81: 
          { return sym(Terminals.ENDIF);
          }
        case 196: break;
        case 50: 
          { return sym(Terminals.CHARACTER_LITERAL, str().substring(1, len()-1));
          }
        case 197: break;
        case 15: 
          { return sym(Terminals.LBRACK);
          }
        case 198: break;
        case 51: 
          { return sym(Terminals.ATSTAR);
          }
        case 199: break;
        case 99: 
          { return sym(Terminals.SCHEDULE);
          }
        case 200: break;
        case 86: 
          { return sym(Terminals.WHILE);
          }
        case 201: break;
        case 46: 
          { strbuf.append( '\f' );
          }
        case 202: break;
        case 18: 
          { return sym(Terminals.COMMA);
          }
        case 203: break;
        case 93: 
          { return sym(Terminals.ENDLET);
          }
        case 204: break;
        case 5: 
          { return sym(Terminals.IDENTIFIER);
          }
        case 205: break;
        case 94: 
          { return sym(Terminals.ENDPROC);
          }
        case 206: break;
        case 72: 
          { return sym(Terminals.TIME);
          }
        case 207: break;
        case 101: 
          { return sym(Terminals.PRIORITY);
          }
        case 208: break;
        case 9: 
          { yybegin(STRING); 
                                   // remember start position of string literal so we can
                                   // set its position correctly in the end
                                   strlit_start_line = yyline+1;
                                   strlit_start_column = yycolumn+1;
                                   strbuf.setLength(0);
          }
        case 209: break;
        case 90: 
          { return sym(Terminals.REGEXP);
          }
        case 210: break;
        case 13: 
          { return sym(Terminals.LBRACE);
          }
        case 211: break;
        case 58: 
          { return sym(Terminals.FSM);
          }
        case 212: break;
        case 22: 
          { yybegin(YYINITIAL); 
                                   return sym(Terminals.STRING_LITERAL, strbuf.toString(), strlit_start_line, strlit_start_column, strbuf.length()+2);
          }
        case 213: break;
        case 107: 
          { return sym(Terminals.INITIALIZE);
          }
        case 214: break;
        case 30: 
          { return sym(Terminals.AT);
          }
        case 215: break;
        case 27: 
          { return sym(Terminals.FLOATING_POINT_LITERAL, str().substring(0,len()-1));
          }
        case 216: break;
        case 8: 
          { return sym(Terminals.DOT);
          }
        case 217: break;
        case 88: 
          { return sym(Terminals.CHOOSE);
          }
        case 218: break;
        case 2: 
          { 
          }
        case 219: break;
        case 34: 
          { return sym(Terminals.COLONEQ);
          }
        case 220: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return sym(Terminals.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
