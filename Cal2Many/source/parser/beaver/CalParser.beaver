%header {: 
/* 
 *  @author Per Andersson<Per.Andersson@cs.lth.se>, Lund University
 *  To parse a CAL file use one of the methods:
 *  - public net.opendf.ir.cal.Actor parse(String path, String fileName)
 *  - public net.opendf.ir.cal.Actor parse(File file)
 *
 *  After parsing check for errors in the attribute parseProblems.
 *
 *  The parser is created using jflex and beaver.
 */
 :} ;
%package "net.opendf.parser.lth";
%import "net.opendf.ir.*";
%import "net.opendf.ir.util.ImmutableList";
%import "net.opendf.ir.util.ImmutableEntry";
%import "net.opendf.ir.common.*";
%import "net.opendf.ir.cal.*";
%import "net.opendf.ir.cal.Action";
%import "java.io.File";
%import "java.io.PrintStream";
%import "java.util.TreeSet";
%import "java.util.Map";
%import "java.util.AbstractMap";
%import "java.util.Arrays";
%import "java.util.Collection";
%embed {:
/*******************************************************
 *  Inject code for custom error handling in the parser class.
 *******************************************************/
  // all errors encountered during parsing is stored in the array parseProblems. This includes lexical, syntactical and semantic error (multiple initialization actors et.c.)
  public java.util.TreeSet<String> parseProblems = new TreeSet<String>();
  public void newError(String msg, Symbol token){
      parseProblems.add(msg + " At row " + Symbol.getLine(token.getStart()) + ", column " + Symbol.getColumn(token.getStart()));
  };
  public void printParseProblems(){ printParseProblems(System.err); }
  public void printParseProblems(PrintStream out){
    out.println("number of problems: " + parseProblems.size());
    for(String msg : parseProblems){
      out.println("ERROR: " + msg);
    }
  }

  // parser plug-in methods that are called when the parser encounters a syntactical problem
  class Events extends Parser.Events {
    public void scannerError(Scanner.Exception e) {
      parseProblems.add(e.getMessage());
    }
    public void syntaxError(Symbol token) {
      // This method is always called when a problem is encountered, even if it is repaired.
      // beaver.Parser$Exception is thrown if recovery fails.
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("unexpected token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
    public void unexpectedTokenRemoved(Symbol token) {
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("parser recovered after removing token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
    public void missingTokenInserted(Symbol token) {
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("parser recovered after inserting token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
    public void misspelledTokenReplaced(Symbol token) {
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("parser recovered after replacing token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
    public void errorPhraseRemoved(Symbol token) {
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      parseProblems.add("parser recovered after removing token \"" + value + "\" at " + Symbol.getLine(token.getStart()) + ", " + Symbol.getColumn(token.getStart()));
    }
  }

  {
    // initialization, before the constructor
    report = new Events(); // Use error handler in parser
  }

/*******************************************************
 *  Help routine that parses a file, given its name.
 *  A compilation unit is always returned, containing all parseProblems encountered during parsing.
 *  If a Parser.exception is thrown a CompilationUnit with an empty AST is returned.
 *******************************************************/
  private Actor makeEmptyActor(File file){
    String name;
    int lastPeriodPos = file.getName().lastIndexOf('.');
    if(lastPeriodPos >=0){
      name = file.getName().substring(0, lastPeriodPos);
    } else {
      name = file.getName();
    }
    return new Actor(name, null, null, null, null, null, null, null, null, null, null, null, null);   
  }
  
  public net.opendf.ir.cal.Actor parse(String path, String fileName){
    return parse(new java.io.File(path + "/" + fileName));
  }
  public net.opendf.ir.cal.Actor parse(File file){
     Actor actor;
     parseProblems = new TreeSet<String>();
     java.io.FileReader fr = null;
     try {
       try{
         fr = new java.io.FileReader(file);
  	     CalScanner scanner = new CalScanner(new java.io.BufferedReader(fr));
         actor = (Actor)parse(scanner);
       } catch(CalParser.Exception e) {
         // build empty compilation unit for failed error recovery
         // The problem is added to parseProblems[] by the syntaxError() method added to the parser above.
         actor = makeEmptyActor(file);
       } finally {
         if(fr != null){
           fr.close();
         }
       }
     } catch (java.io.FileNotFoundException e){
       parseProblems.add("file not found: " + e.getMessage());
       actor = makeEmptyActor(file);
//       actor.setFileNotFound(true);
     } catch (java.io.IOException e){
       parseProblems.add("error reading file: " + e.getMessage());
       actor = makeEmptyActor(file);
     }
//     actor.setSourceFile(file);
//     actor.parseProblems = parseProblems;
     return actor;
   }

  private enum ActionPartKind{ GUARD, DECL_LIST, DELAY; }
  private enum ActorPartKind{ DECL_VAR, INIT_ACTION, ACTION, FSM_SCHEDULE, PRIORITY, INVARIANT_LIST; }

  /****************************************************************************
   * Needed by CommonParser.beaver
   * Repeated in both NlParser.beaver and CalParser.beaver
   ***************************************************************************/
  private GeneratorFilter makeGeneratorFilter(TypeExpr type, ImmutableList<String> varList, Expression e, ImmutableList<Expression> filterList){
    ImmutableList.Builder<DeclVar> vars = ImmutableList.builder();
    for(String var : varList){
      vars.add(new DeclVar(type, var, null));
    }
    return new GeneratorFilter(vars.build(), e, filterList);
  }
  class ParenthesSymbol extends Symbol{ // used by the parser to wrap subexpressions that are enclosed by parentheses, i.e. do not add them to a ExprBinaryOp sequence.
     ParenthesSymbol(Symbol s){
       super(s.getId(), s.getStart(), s.getEnd(), s.value);
     }
  }
  
  private LValue expressionToLValue(Expression expression) {
    if (expression instanceof ExprVariable) {
      return new LValueVariable(((ExprVariable) expression).getVariable());
    } else if (expression instanceof ExprIndexer) {
      ExprIndexer exprIndexer = (ExprIndexer) expression;
      LValue structure = expressionToLValue(exprIndexer.getStructure());
      if (structure == null) return null;
      return new LValueIndexer(structure, exprIndexer.getIndex());
    } else if (expression instanceof ExprField) {
      ExprField exprField = (ExprField) expression;
      LValue structure = expressionToLValue(exprField.getStructure());
      if (structure == null) return null;
      return new LValueField(structure, exprField.getField());
    } else {
      return null;
    }
  }
:};

// common terminals
%terminals ARROW;
%terminals BAR;
%terminals BEGIN;
%terminals CHARACTER_LITERAL;
%terminals CHOOSE;
%terminals COMMA;
%terminals COLON;
%terminals COLONEQ;
%terminals CONST;
%terminals DO;
%terminals DOT;
%terminals DOUBLECOLON;
%terminals DOUBLE_LITERAL;
%terminals EDGE;
%terminals ELSE;
%terminals END;
%terminals ENDCHOOSE;
%terminals ENDFOREACH;
%terminals ENDIF;
%terminals ENDLAMBDA;
%terminals ENDLET;
%terminals ENDPROC;
%terminals ENDWHILE;
%terminals EQ;
%terminals FALSE_LITERAL;
%terminals FLOATING_POINT_LITERAL;
%terminals FOR;
%terminals FOREACH;
%terminals FUNCTION;
%terminals GT;
%terminals IDENTIFIER;
%terminals IF;
%terminals IN;
%terminals INTEGER_LITERAL;
%terminals LAMBDA;
%terminals LBRACE;
%terminals LBRACK;
%terminals LONG_LITERAL;
%terminals LPAREN;
%terminals LET;
%terminals LT;
%terminals MAP;
%terminals MULT;
%terminals MULTI;
%terminals MUTABLE;
%terminals NULL_LITERAL;
%terminals OLD;
%terminals OPERATOR;
%terminals PROC;
%terminals PROCEDURE;
%terminals RBRACE;
%terminals RBRACK;
%terminals RPAREN;
%terminals SEMICOLON;
%terminals STRING_LITERAL;
%terminals THEN;
%terminals TRUE_LITERAL;
%terminals VAR;
%terminals WHILE;

// Cal specific terminals
%terminals ACTION;
%terminals ACTOR;
%terminals ALL;
%terminals ANY;
%terminals AT;
%terminals ATSTAR;
%terminals DELAY;
%terminals ENDACTION;
%terminals ENDACTOR;
%terminals ENDINVARIANT;
%terminals ENDSCHEDULE;
%terminals EQCOLON;
%terminals FSM;
%terminals GUARD;
%terminals IMPORT;
%terminals INITIALIZE;
%terminals INVARIANT;
%terminals PORTCONN;
%terminals PRIORITY;
%terminals REPEAT;
%terminals REGEXP;
%terminals SCHEDULE;
%terminals TIME;

//--- rules from CommonParser.beaver 
%typeof actor_parameter_list = "ImmutableList.Builder";
%typeof actor_parameter = "ParDeclValue";
%typeof actor_parameter_init_expression = "Expression";
%typeof qual_id = "ArrayList";
%typeof variable = "Variable";
%typeof field = "Field";
%typeof decl_list = "ImmutableList.Builder";
%typeof decl_block = "ImmutableList";
%typeof decl_block_opt = "ImmutableList";
%typeof decl = "DeclVar";
%typeof var_decl = "DeclVar";
%typeof var_name_type = "DeclVar";
%typeof fun_decl = "DeclVar";
%typeof proc_decl = "DeclVar";
%typeof port_decl = "PortDecl";
%typeof port_decl_list = "ImmutableList.Builder";
%typeof port_decl_list_opt = "ImmutableList";
%typeof type_bound = "TypeExpr";
%typeof type_bound_opt = "TypeExpr";
%typeof type_parameter = "ParDeclType";
%typeof type_parameter_block = "ImmutableList";
%typeof type_parameter_list = "ImmutableList.Builder";
%typeof type_list = "ImmutableList.Builder";
%typeof type = "TypeExpr";
%typeof type_attribute = "Map.Entry";
%typeof type_attribute_list = "ArrayList";
%typeof edge_type = "TypeExpr";
%typeof procedure_expr_body = "ExprProc";
%typeof stmt_block_opt = "ImmutableList";
%typeof lambda_expr_body = "ExprLambda";
%typeof map_list = "ImmutableList.Builder";
%typeof map_entry = "Map.Entry";
//%typeof tail = "Expression";
%typeof expression_list = "ImmutableList.Builder";
%typeof expression_list_opt = "ImmutableList";
%typeof method_invocation = "ExprApplication";
%typeof literal = "ExprLiteral";
%typeof primary = "Expression";
%typeof simple_expression = "Expression";
%typeof unary_expression = "Expression";
%typeof indexing_expression = "Expression";
%typeof indexer_start = "Expression";
%typeof expression = "Expression";
%typeof operator = "String";
%typeof formal_parameter = "ParDeclValue";
%typeof formal_parameter_list = "ImmutableList.Builder";
%typeof statement = "Statement";
%typeof choose_generator_list = "ArrayList";
%typeof for_generator_list = "ImmutableList.Builder";
%typeof generator_variable_list = "ImmutableList.Builder";  //<Symbol>  (type information is not available, so I can not build the DeclVar object)
%typeof for_foreach = "String";
%typeof do_begin = "String";
%typeof end_choose = "String";
%typeof end_foreach = "String";
%typeof end_if = "String";
%typeof end_lambda = "String";
%typeof end_let = "String";
%typeof end_proc = "String";
%typeof end_while = "String";
%typeof statement_list = "ImmutableList.Builder";
%typeof statement_list_opt = "ImmutableList";

//--- CAL specific
%typeof goal = "Actor";
%typeof action_decl = "Action";
%typeof action_head = "Map.Entry";
%typeof action_in_pattern = "InputPattern";
%typeof action_in_pattern_list = "ImmutableList.Builder";
%typeof action_output_expression = "OutputExpression";
%typeof action_output_expression_list = "ImmutableList.Builder";
%typeof action_statement_body = "ImmutableList";
%typeof action_tag = "QID";
%typeof action_tag_list = "ImmutableList.Builder";
%typeof actor_body = "Map.Entry";
%typeof actor_decl = "Actor";
%typeof channel_selector = "String";
%typeof end_actor = "String";
%typeof end_action = "String";
%typeof end_invariant = "String";
%typeof end_schedule = "String";
%typeof init_action_decl = "Action";
%typeof fsm_state_transitions = "ImmutableList.Builder";
%typeof fsm_state_target = "Transition";
%typeof import_group = "String";
%typeof import_list = "ArrayList";
%typeof import_part = "String";
%typeof import_single = "String";
%typeof invariant = "ImmutableList";
%typeof port_name_colon = "Port";
%typeof pri_inequality = "ImmutableList.Builder";        //<QID>
%typeof pri_inequality_list = "ImmutableList";   //<QID>
%typeof regexpr = "AbstractIRNode";
%typeof regexpr_simple = "AbstractIRNode";
%typeof regexpr_kleene = "AbstractIRNode";
%typeof repeat = "Expression";
%typeof schedule = "ScheduleFSM";
%typeof time = "TypeExpr";
%typeof token_name_list = "ImmutableList.Builder";

%goal goal;
goal =
    actor_decl.actor_decl end_actor SEMICOLON? {: return _symbol_actor_decl;:}
  ;
//=== import ==================================================================
import_list =
    import_part.i {: ArrayList l = new ArrayList(); l.add(i); return new Symbol(l);:}
  | import_list.l import_part.i {: l.add(i); return _symbol_l;:}
  ;
import_part =
    import_single.i {: return _symbol_i;:}
  | import_group.i {: return _symbol_i;:}
  ;
import_single =
//TODO return
    IMPORT qual_id.qual_id SEMICOLON {: return new Symbol(null);:}
  | IMPORT qual_id.qual_id EQ IDENTIFIER.alias SEMICOLON {: return new Symbol(null);:}
  ;
import_group =
//TODO return
    IMPORT ALL qual_id.qual_id SEMICOLON {: return new Symbol(null);:}
  ;
//=== Action ==================================================================
action_decl =
  action_tag.tag? ACTION.ACTION action_in_pattern_list.in_pattern_list PORTCONN action_output_expression_list.out_expr_list?
  action_head.head*  // guard, variable declaration, or delay
  action_statement_body.body
  end_action
  SEMICOLON?
  /**
   * When the the content of an action is parsed, the Action object is not jet created. (the tree is build bottom up)
   * To allow multiple elements in any order (guard, declaration, delay) the parser first collect these in a list, using action_head.
   * When the Action object is created this list is traversed and each element is added to the right attribute
   **/
        {:
           // split the action head to it's parts
           ImmutableList.Builder<Expression> guardList = ImmutableList.builder();
           Expression delay = null;
           ImmutableList.Builder<DeclVar> declVarList = ImmutableList.builder();
           for(Map.Entry part : head){
             switch((ActionPartKind)part.getKey()){
               case GUARD:
                 guardList.addAll((Iterable)part.getValue());
                 break;
               case DECL_LIST:
                 declVarList.addAll((Iterable)part.getValue());
                 break;
               case DELAY:
                 if(delay != null){ parseProblems.add("multiple delays is not allowed in action, at " + Symbol.getLine(ACTION.getStart()) + ", " + Symbol.getColumn(ACTION.getStart())); }
                 delay = (Expression)part.getValue();
                 break;
             }
           }
            Action a = new Action(-1,              // id
                                  tag,             // tag
                                  in_pattern_list.build(), //inputPatterns
                                  out_expr_list == null ? null : out_expr_list.build(),   //outputExpressions
                                  null,            // typeDecls
                                  declVarList.build(),     // varDecls
                                  guardList.build(),       // guards 
                                  body,            // body
                                  delay,           // delay
                                  null,            // preconditions  NOTE, can not be expressed in CAL
                                  null);           // postconditions NOTE, can not be expressed in CAL
            return new Symbol(a);
        :}

  ;
init_action_decl =
  action_tag.tag? INITIALIZE.INITIALIZE PORTCONN action_output_expression_list.out_expr_list?
  action_head.head*  // guard, variable declaration, or delay
  action_statement_body.body
  end_action
  SEMICOLON?
        {: 
           // split the action head to it's parts
           ImmutableList.Builder<Expression> guardList = ImmutableList.builder();
           Expression delay = null;
           ImmutableList.Builder<DeclVar> declVarList = ImmutableList.builder();
           for(Map.Entry part : head){
             switch((ActionPartKind)part.getKey()){
               case GUARD:
                 guardList.addAll((ArrayList)part.getValue());
                 break;
               case DECL_LIST:
                 declVarList.addAll((ArrayList<DeclVar>)part.getValue());
                 break;
               case DELAY:
                 if(delay != null){ parseProblems.add("multiple delays is not allowed in action, at " + Symbol.getLine(INITIALIZE.getStart()) + ", " + Symbol.getColumn(INITIALIZE.getStart())); }
                 delay = (Expression)part.getValue();
                 break;
             }
           }
            Action a = new Action(-1,                        // id
                                  tag,                       // tag
                                  null,       //inputPatterns
                                  out_expr_list==null ? null : out_expr_list.build(),  //outputExpressions
                                  null,                                              // typeDecls
                                  declVarList.build(),         // varDecls
                                  guardList.build(),          // guards 
                                  body,        // body
                                  delay,                      // delay
                                  null,         // preconditions  NOTE, can not be expressed in CAL
                                  null);        // postconditions NOTE, can not be expressed in CAL
            return new Symbol(a);
        :}
  ;
action_tag =
    qual_id.n COLON                    {: return new Symbol(new QID((String[])n.toArray(new String[n.size()]))); :}
  ;
action_head =
    GUARD expression_list.l       {: return new Symbol(new AbstractMap.SimpleEntry(ActionPartKind.GUARD, l.build())); :}
  | VAR decl_list.d               {: return new Symbol(new AbstractMap.SimpleEntry(ActionPartKind.DECL_LIST, d.build())); :}
  | DELAY expression.e            {: return new Symbol(new AbstractMap.SimpleEntry(ActionPartKind.DELAY, e)); :}
  ;
action_statement_body =
                            {: return new Symbol(ImmutableList.empty()); :}
  | DO statement_list_opt.s {: return new Symbol(s); :}
  ;
action_in_pattern_list =
                                                       {: return new Symbol(ImmutableList.builder()); :}
  | action_in_pattern.p                                {: return new Symbol(ImmutableList.builder().add(p)); :}
  | action_in_pattern_list.l COMMA action_in_pattern.p {: l.add(p); return _symbol_l;:}
  ;
action_in_pattern =
//TODO channels are ignored
  port_name_colon.actor_port_name? LBRACK token_name_list.tokens? RBRACK repeat.r? channel_selector.c? 
     {: return new Symbol(new InputPattern(actor_port_name, tokens==null ? null : tokens.build(), r)); :}
  ;
token_name_list =
//TODO, the position of the names are not saved
    IDENTIFIER.ID                           {: return new Symbol(ImmutableList.builder().add(ID.value)); :}
  | token_name_list.l COMMA IDENTIFIER.ID   {: l.add(ID.value); return _symbol_l; :}
  ;
channel_selector =
    AT expression.e          {: return new Symbol(null); :} //TODO new SingleChannel(e); :}
  | ATSTAR expression.e      {: return new Symbol(null); :} //TODO new AtStarChannel(e); :}
  | ATSTAR? ANY              {: return new Symbol(null); :} //TODO new AnyChannel(); :}
  | ATSTAR? ALL              {: return new Symbol(null); :} //TODO new AllChannels(); :}
  ;
repeat =
    REPEAT expression.e {: return _symbol_e; :}
  ;
action_output_expression_list =
    action_output_expression.e                                       {: return new Symbol(ImmutableList.builder().add(e)); :}
  | action_output_expression_list.l COMMA action_output_expression.e {: l.add(e); return _symbol_l; :}
  ;
action_output_expression =
//TODO channels are ignored
  port_name_colon.actor_port_name? LBRACK expression_list.values? RBRACK repeat.r? channel_selector.c? 
      {: return new Symbol(new OutputExpression(actor_port_name, values == null ? null : values.build(), r)); :}
  ;
port_name_colon =
    IDENTIFIER.IDENTIFIER COLON {: return new Symbol(new Port((String)IDENTIFIER.value));:}
  ;
//=== Actor ===================================================================
actor_decl =
  import_list.imports? 
  ACTOR IDENTIFIER.name
  type_parameter_block.typePars?
  LPAREN actor_parameter_list.valuePars? RPAREN 
  port_decl_list_opt.in PORTCONN port_decl_list_opt.out 
//TODO, time is ignored
  time.t?
  COLON 
  actor_body.body*
  /**
   * When the the content of an actor is parsed (actor_body_list), the Actor object is not jet created. (the tree is build bottom up)
   * To allow multiple elements in any order (actions, schedule...) the parser first collect these in a list, using actor_body_list.
   * When the Actor object is created this list is traversed and each element is added to the right attribute (Actor.VariableList, Actor.ActionList, ...)
   **/
  {:
    ImmutableList.Builder varDecls = ImmutableList.builder();
    ImmutableList.Builder initializers = ImmutableList.builder();
    ImmutableList.Builder actions = ImmutableList.builder();
    ScheduleFSM scheduleFSM = null;
    ImmutableList.Builder priorities = ImmutableList.builder();
    ImmutableList.Builder invariants = ImmutableList.builder();
    for(Map.Entry part : body){
      switch((ActorPartKind)part.getKey()){
        case DECL_VAR:
          varDecls.add(part.getValue());
          break;
        case INIT_ACTION:
          initializers.add(part.getValue());
          break;
        case ACTION:
          actions.add(part.getValue());
          break;
        case FSM_SCHEDULE:
          scheduleFSM = (ScheduleFSM)part.getValue();
          break;
        case PRIORITY:
          priorities.addAll((Collection)part.getValue());
          break;
        case INVARIANT_LIST:
          invariants.addAll((Collection)part.getValue());
          break;
      }
    }
    Actor a = new Actor((String)name.value,
                         null,                 // NamespaceDecl namespace,
                         typePars,     // typePars,
                         valuePars == null ? null : valuePars.build(), // valuePars,
                         null,      // typeDecls, NOTE, can not be expressed in CAL
                         varDecls.build(),             // varDecls
                         in,
                         out,
                         initializers.build(),
                         actions.build(),
                         scheduleFSM,
                         priorities.build(),
                         invariants.build()
                        );
     
    return new Symbol(a);
  :}
  ;

time =
    TIME type.t {: return _symbol_t; :}
  ;
actor_body =
    action_decl.a                               {: return new Symbol(new AbstractMap.SimpleEntry(ActorPartKind.ACTION, a)); :}
  | init_action_decl.a                          {: return new Symbol(new AbstractMap.SimpleEntry(ActorPartKind.INIT_ACTION, a)); :}
  | var_decl.d SEMICOLON                        {: return new Symbol(new AbstractMap.SimpleEntry(ActorPartKind.DECL_VAR, d)); :}
  | fun_decl.d                                  {: return new Symbol(new AbstractMap.SimpleEntry(ActorPartKind.DECL_VAR, d)); :}
  | proc_decl.d                                 {: return new Symbol(new AbstractMap.SimpleEntry(ActorPartKind.DECL_VAR, d)); :}
  | PRIORITY pri_inequality_list.l+ END         {: return new Symbol(new AbstractMap.SimpleEntry(ActorPartKind.PRIORITY, _list_l)); :}
  | schedule.s                                  {: return new Symbol(new AbstractMap.SimpleEntry(ActorPartKind.FSM_SCHEDULE, s)); :}
  | invariant.i                                 {: return new Symbol(new AbstractMap.SimpleEntry(ActorPartKind.INVARIANT_LIST, i)); :}
  ;
invariant =
    INVARIANT expression_list.l end_invariant   {: return new Symbol(l.build()); :}
  ;
//--- Schedule ----------------------------------------------------------------
schedule =
    SCHEDULE FSM? IDENTIFIER.ID COLON fsm_state_transitions.trans* end_schedule 
      {:  ImmutableList.Builder tl = trans[0];
          for(int i=1; i<trans.length; i++){
            tl.addAll(trans[i].build());
          }
          return new Symbol(new ScheduleFSM(tl.build(), (String)ID.value)); :}
  | SCHEDULE.SCHEDULE REGEXP regexpr.r end_schedule
    {: parseProblems.add("Regular expression schedules are not supported, at " + Symbol.getLine(SCHEDULE.getStart()) + ", " + Symbol.getColumn(SCHEDULE.getStart())); return new Symbol(null); :}
  ;
fsm_state_transitions =
    IDENTIFIER.Src_state LPAREN action_tag_list.tags RPAREN EDGE IDENTIFIER.Dst_state fsm_state_target.more* SEMICOLON 
       {: ImmutableList.Builder result = ImmutableList.builder();
          String startState = (String)Src_state.value;
          result.add(new Transition(startState,
                                    (String)Dst_state.value,
                                    tags.build())); 
          for(Transition t : more){
            result.add(new Transition(startState, t.getDestinationState(), t.getActionTags()));
          }
          return new Symbol(result); :}
  ;
fsm_state_target =
  BAR LPAREN action_tag_list.tags RPAREN EDGE IDENTIFIER.Dst_state
       {: return new Symbol(new Transition(null,  // the start state is unknown. This is filled in later.
                                           (String)Dst_state.value,
                                           tags.build())); :}
  ;
action_tag_list =
    qual_id.id                         {: return new Symbol(ImmutableList.builder().add(new QID((String[])id.toArray(new String[id.size()])))); :}
  | action_tag_list.l COMMA qual_id.id {: l.add(new QID((String[])id.toArray(new String[id.size()]))); return _symbol_l; :}
  ;
//TODO, reg expr schedules
regexpr =
    regexpr_kleene.r                 {: return new Symbol(null); :}
  | regexpr.r1 regexpr_kleene.r2     {: return new Symbol(null); :}
  | regexpr.r1 BAR regexpr_kleene.r2 {: return new Symbol(null); :}
  ;
regexpr_kleene =
    regexpr_simple.r        {: return new Symbol(null); :}
  | regexpr_simple.r MULT   {: return new Symbol(null); :}
  ;
regexpr_simple =
    qual_id.n               {: return new Symbol(null); :}
  | LPAREN regexpr.r RPAREN {: return new Symbol(null); :}
  | LBRACK regexpr.r RBRACK {: return new Symbol(null); :}
  ;
//--- priority ----------------------------------------------------------------
pri_inequality_list =
    pri_inequality.p SEMICOLON         {: return new Symbol(p.build()); :}
  ;
pri_inequality =
    qual_id.high GT qual_id.low        {: return new Symbol(ImmutableList.builder().add(new QID((String[])high.toArray(new String[high.size()]))).add(new QID((String[])low.toArray(new String[low.size()])))); :}
  | pri_inequality.l GT qual_id.n      {: l.add(new QID((String[])n.toArray(new String[n.size()]))); return _symbol_l; :}
  ;
//--- end ---------------------------------------------------------------------
end_action =
    END 
  | ENDACTION
  ;
end_actor =
    END 
  | ENDACTOR
  ;
end_invariant =
    END 
  | ENDINVARIANT
  ;
end_schedule =
    END 
  | ENDSCHEDULE
  ;

